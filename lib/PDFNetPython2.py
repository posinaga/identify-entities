# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PDFNetPython2', [dirname(__file__)])
        except ImportError:
            import _PDFNetPython2
            return _PDFNetPython2
        if fp is not None:
            try:
                _mod = imp.load_module('_PDFNetPython2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PDFNetPython2 = swig_import_helper()
    del swig_import_helper
else:
    import _PDFNetPython2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _PDFNetPython2.SwigPyIterator_value(self)
    def incr(self, n = 1): return _PDFNetPython2.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _PDFNetPython2.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _PDFNetPython2.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _PDFNetPython2.SwigPyIterator_equal(self, *args)
    def copy(self): return _PDFNetPython2.SwigPyIterator_copy(self)
    def next(self): return _PDFNetPython2.SwigPyIterator_next(self)
    def __next__(self): return _PDFNetPython2.SwigPyIterator___next__(self)
    def previous(self): return _PDFNetPython2.SwigPyIterator_previous(self)
    def advance(self, *args): return _PDFNetPython2.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _PDFNetPython2.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _PDFNetPython2.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _PDFNetPython2.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _PDFNetPython2.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _PDFNetPython2.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _PDFNetPython2.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _PDFNetPython2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorDouble___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorDouble___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorDouble___len__(self)
    def pop(self): return _PDFNetPython2.VectorDouble_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorDouble___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorDouble_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorDouble_empty(self)
    def size(self): return _PDFNetPython2.VectorDouble_size(self)
    def clear(self): return _PDFNetPython2.VectorDouble_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorDouble_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorDouble_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorDouble_begin(self)
    def end(self): return _PDFNetPython2.VectorDouble_end(self)
    def rbegin(self): return _PDFNetPython2.VectorDouble_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorDouble_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorDouble_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorDouble_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorDouble_front(self)
    def back(self): return _PDFNetPython2.VectorDouble_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorDouble_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorDouble_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorDouble_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorDouble_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorDouble_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorDouble
    __del__ = lambda self : None;
VectorDouble_swigregister = _PDFNetPython2.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorObj, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorObj_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorObj___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorObj___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorObj___len__(self)
    def pop(self): return _PDFNetPython2.VectorObj_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorObj___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorObj___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorObj___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorObj___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorObj___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorObj___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorObj_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorObj_empty(self)
    def size(self): return _PDFNetPython2.VectorObj_size(self)
    def clear(self): return _PDFNetPython2.VectorObj_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorObj_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorObj_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorObj_begin(self)
    def end(self): return _PDFNetPython2.VectorObj_end(self)
    def rbegin(self): return _PDFNetPython2.VectorObj_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorObj_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorObj_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorObj_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorObj(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorObj_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorObj_front(self)
    def back(self): return _PDFNetPython2.VectorObj_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorObj_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorObj_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorObj_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorObj_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorObj_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorObj
    __del__ = lambda self : None;
VectorObj_swigregister = _PDFNetPython2.VectorObj_swigregister
VectorObj_swigregister(VectorObj)

class VectorPage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPage, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorPage_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorPage___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorPage___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorPage___len__(self)
    def pop(self): return _PDFNetPython2.VectorPage_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorPage___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorPage___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorPage___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorPage___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorPage___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorPage___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorPage_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorPage_empty(self)
    def size(self): return _PDFNetPython2.VectorPage_size(self)
    def clear(self): return _PDFNetPython2.VectorPage_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorPage_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorPage_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorPage_begin(self)
    def end(self): return _PDFNetPython2.VectorPage_end(self)
    def rbegin(self): return _PDFNetPython2.VectorPage_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorPage_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorPage_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorPage_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorPage(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorPage_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorPage_front(self)
    def back(self): return _PDFNetPython2.VectorPage_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorPage_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorPage_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorPage_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorPage_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorPage_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorPage
    __del__ = lambda self : None;
VectorPage_swigregister = _PDFNetPython2.VectorPage_swigregister
VectorPage_swigregister(VectorPage)

class VectorUChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUChar, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorUChar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorUChar___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorUChar___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorUChar___len__(self)
    def pop(self): return _PDFNetPython2.VectorUChar_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorUChar___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorUChar___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorUChar___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorUChar___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorUChar___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorUChar___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorUChar_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorUChar_empty(self)
    def size(self): return _PDFNetPython2.VectorUChar_size(self)
    def clear(self): return _PDFNetPython2.VectorUChar_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorUChar_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorUChar_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorUChar_begin(self)
    def end(self): return _PDFNetPython2.VectorUChar_end(self)
    def rbegin(self): return _PDFNetPython2.VectorUChar_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorUChar_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorUChar_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorUChar_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorUChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorUChar_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorUChar_front(self)
    def back(self): return _PDFNetPython2.VectorUChar_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorUChar_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorUChar_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorUChar_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorUChar_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorUChar_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorUChar
    __del__ = lambda self : None;
VectorUChar_swigregister = _PDFNetPython2.VectorUChar_swigregister
VectorUChar_swigregister(VectorUChar)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorChar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorChar___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorChar___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorChar___len__(self)
    def pop(self): return _PDFNetPython2.VectorChar_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorChar___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorChar___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorChar___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorChar___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorChar___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorChar___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorChar_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorChar_empty(self)
    def size(self): return _PDFNetPython2.VectorChar_size(self)
    def clear(self): return _PDFNetPython2.VectorChar_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorChar_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorChar_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorChar_begin(self)
    def end(self): return _PDFNetPython2.VectorChar_end(self)
    def rbegin(self): return _PDFNetPython2.VectorChar_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorChar_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorChar_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorChar_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorChar_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorChar_front(self)
    def back(self): return _PDFNetPython2.VectorChar_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorChar_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorChar_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorChar_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorChar_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorChar_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorChar
    __del__ = lambda self : None;
VectorChar_swigregister = _PDFNetPython2.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorInt___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorInt___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorInt___len__(self)
    def pop(self): return _PDFNetPython2.VectorInt_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorInt___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorInt_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorInt_empty(self)
    def size(self): return _PDFNetPython2.VectorInt_size(self)
    def clear(self): return _PDFNetPython2.VectorInt_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorInt_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorInt_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorInt_begin(self)
    def end(self): return _PDFNetPython2.VectorInt_end(self)
    def rbegin(self): return _PDFNetPython2.VectorInt_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorInt_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorInt_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorInt_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorInt_front(self)
    def back(self): return _PDFNetPython2.VectorInt_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorInt_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorInt_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorInt_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorInt_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorInt_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _PDFNetPython2.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorString___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorString___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorString___len__(self)
    def pop(self): return _PDFNetPython2.VectorString_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorString___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorString___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorString___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorString___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorString___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorString___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorString_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorString_empty(self)
    def size(self): return _PDFNetPython2.VectorString_size(self)
    def clear(self): return _PDFNetPython2.VectorString_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorString_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorString_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorString_begin(self)
    def end(self): return _PDFNetPython2.VectorString_end(self)
    def rbegin(self): return _PDFNetPython2.VectorString_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorString_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorString_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorString_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorString_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorString_front(self)
    def back(self): return _PDFNetPython2.VectorString_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorString_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorString_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorString_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorString_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorString_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorString
    __del__ = lambda self : None;
VectorString_swigregister = _PDFNetPython2.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorRedaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRedaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRedaction, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorRedaction_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorRedaction___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorRedaction___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorRedaction___len__(self)
    def pop(self): return _PDFNetPython2.VectorRedaction_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorRedaction___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorRedaction___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorRedaction___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorRedaction___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorRedaction___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorRedaction___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorRedaction_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorRedaction_empty(self)
    def size(self): return _PDFNetPython2.VectorRedaction_size(self)
    def clear(self): return _PDFNetPython2.VectorRedaction_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorRedaction_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorRedaction_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorRedaction_begin(self)
    def end(self): return _PDFNetPython2.VectorRedaction_end(self)
    def rbegin(self): return _PDFNetPython2.VectorRedaction_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorRedaction_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorRedaction_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorRedaction_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorRedaction(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorRedaction_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorRedaction_front(self)
    def back(self): return _PDFNetPython2.VectorRedaction_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorRedaction_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorRedaction_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorRedaction_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorRedaction_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorRedaction_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorRedaction
    __del__ = lambda self : None;
VectorRedaction_swigregister = _PDFNetPython2.VectorRedaction_swigregister
VectorRedaction_swigregister(VectorRedaction)

class VectorQuadPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorQuadPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorQuadPoint, name)
    __repr__ = _swig_repr
    def iterator(self): return _PDFNetPython2.VectorQuadPoint_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PDFNetPython2.VectorQuadPoint___nonzero__(self)
    def __bool__(self): return _PDFNetPython2.VectorQuadPoint___bool__(self)
    def __len__(self): return _PDFNetPython2.VectorQuadPoint___len__(self)
    def pop(self): return _PDFNetPython2.VectorQuadPoint_pop(self)
    def __getslice__(self, *args): return _PDFNetPython2.VectorQuadPoint___getslice__(self, *args)
    def __setslice__(self, *args): return _PDFNetPython2.VectorQuadPoint___setslice__(self, *args)
    def __delslice__(self, *args): return _PDFNetPython2.VectorQuadPoint___delslice__(self, *args)
    def __delitem__(self, *args): return _PDFNetPython2.VectorQuadPoint___delitem__(self, *args)
    def __getitem__(self, *args): return _PDFNetPython2.VectorQuadPoint___getitem__(self, *args)
    def __setitem__(self, *args): return _PDFNetPython2.VectorQuadPoint___setitem__(self, *args)
    def append(self, *args): return _PDFNetPython2.VectorQuadPoint_append(self, *args)
    def empty(self): return _PDFNetPython2.VectorQuadPoint_empty(self)
    def size(self): return _PDFNetPython2.VectorQuadPoint_size(self)
    def clear(self): return _PDFNetPython2.VectorQuadPoint_clear(self)
    def swap(self, *args): return _PDFNetPython2.VectorQuadPoint_swap(self, *args)
    def get_allocator(self): return _PDFNetPython2.VectorQuadPoint_get_allocator(self)
    def begin(self): return _PDFNetPython2.VectorQuadPoint_begin(self)
    def end(self): return _PDFNetPython2.VectorQuadPoint_end(self)
    def rbegin(self): return _PDFNetPython2.VectorQuadPoint_rbegin(self)
    def rend(self): return _PDFNetPython2.VectorQuadPoint_rend(self)
    def pop_back(self): return _PDFNetPython2.VectorQuadPoint_pop_back(self)
    def erase(self, *args): return _PDFNetPython2.VectorQuadPoint_erase(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_VectorQuadPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PDFNetPython2.VectorQuadPoint_push_back(self, *args)
    def front(self): return _PDFNetPython2.VectorQuadPoint_front(self)
    def back(self): return _PDFNetPython2.VectorQuadPoint_back(self)
    def assign(self, *args): return _PDFNetPython2.VectorQuadPoint_assign(self, *args)
    def resize(self, *args): return _PDFNetPython2.VectorQuadPoint_resize(self, *args)
    def insert(self, *args): return _PDFNetPython2.VectorQuadPoint_insert(self, *args)
    def reserve(self, *args): return _PDFNetPython2.VectorQuadPoint_reserve(self, *args)
    def capacity(self): return _PDFNetPython2.VectorQuadPoint_capacity(self)
    __swig_destroy__ = _PDFNetPython2.delete_VectorQuadPoint
    __del__ = lambda self : None;
VectorQuadPoint_swigregister = _PDFNetPython2.VectorQuadPoint_swigregister
VectorQuadPoint_swigregister(VectorQuadPoint)

class Callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Callback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == Callback:
            _self = None
        else:
            _self = self
        this = _PDFNetPython2.new_Callback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Callback
    __del__ = lambda self : None;
    def RenderBeginEventProc(self): return _PDFNetPython2.Callback_RenderBeginEventProc(self)
    __swig_getmethods__["StaticRenderBeginEventProc"] = lambda x: _PDFNetPython2.Callback_StaticRenderBeginEventProc
    if _newclass:StaticRenderBeginEventProc = staticmethod(_PDFNetPython2.Callback_StaticRenderBeginEventProc)
    def RenderFinishEventProc(self, *args): return _PDFNetPython2.Callback_RenderFinishEventProc(self, *args)
    __swig_getmethods__["StaticRenderFinishEventProc"] = lambda x: _PDFNetPython2.Callback_StaticRenderFinishEventProc
    if _newclass:StaticRenderFinishEventProc = staticmethod(_PDFNetPython2.Callback_StaticRenderFinishEventProc)
    def ErrorReportProc(self, *args): return _PDFNetPython2.Callback_ErrorReportProc(self, *args)
    __swig_getmethods__["StaticErrorReportProc"] = lambda x: _PDFNetPython2.Callback_StaticErrorReportProc
    if _newclass:StaticErrorReportProc = staticmethod(_PDFNetPython2.Callback_StaticErrorReportProc)
    def CurrentPageProc(self, *args): return _PDFNetPython2.Callback_CurrentPageProc(self, *args)
    __swig_getmethods__["StaticCurrentPageProc"] = lambda x: _PDFNetPython2.Callback_StaticCurrentPageProc
    if _newclass:StaticCurrentPageProc = staticmethod(_PDFNetPython2.Callback_StaticCurrentPageProc)
    def CurrentZoomProc(self, *args): return _PDFNetPython2.Callback_CurrentZoomProc(self, *args)
    __swig_getmethods__["StaticCurrentZoomProc"] = lambda x: _PDFNetPython2.Callback_StaticCurrentZoomProc
    if _newclass:StaticCurrentZoomProc = staticmethod(_PDFNetPython2.Callback_StaticCurrentZoomProc)
    def CreateTileProc(self, *args): return _PDFNetPython2.Callback_CreateTileProc(self, *args)
    __swig_getmethods__["StaticCreateTileProc"] = lambda x: _PDFNetPython2.Callback_StaticCreateTileProc
    if _newclass:StaticCreateTileProc = staticmethod(_PDFNetPython2.Callback_StaticCreateTileProc)
    def RemoveTileProc(self, *args): return _PDFNetPython2.Callback_RemoveTileProc(self, *args)
    __swig_getmethods__["StaticRemoveTileProc"] = lambda x: _PDFNetPython2.Callback_StaticRemoveTileProc
    if _newclass:StaticRemoveTileProc = staticmethod(_PDFNetPython2.Callback_StaticRemoveTileProc)
    def __disown__(self):
        self.this.disown()
        _PDFNetPython2.disown_Callback(self)
        return weakref_proxy(self)
Callback_swigregister = _PDFNetPython2.Callback_swigregister
Callback_swigregister(Callback)

def Callback_StaticRenderBeginEventProc(*args):
  return _PDFNetPython2.Callback_StaticRenderBeginEventProc(*args)
Callback_StaticRenderBeginEventProc = _PDFNetPython2.Callback_StaticRenderBeginEventProc

def Callback_StaticRenderFinishEventProc(*args):
  return _PDFNetPython2.Callback_StaticRenderFinishEventProc(*args)
Callback_StaticRenderFinishEventProc = _PDFNetPython2.Callback_StaticRenderFinishEventProc

def Callback_StaticErrorReportProc(*args):
  return _PDFNetPython2.Callback_StaticErrorReportProc(*args)
Callback_StaticErrorReportProc = _PDFNetPython2.Callback_StaticErrorReportProc

def Callback_StaticCurrentPageProc(*args):
  return _PDFNetPython2.Callback_StaticCurrentPageProc(*args)
Callback_StaticCurrentPageProc = _PDFNetPython2.Callback_StaticCurrentPageProc

def Callback_StaticCurrentZoomProc(*args):
  return _PDFNetPython2.Callback_StaticCurrentZoomProc(*args)
Callback_StaticCurrentZoomProc = _PDFNetPython2.Callback_StaticCurrentZoomProc

def Callback_StaticCreateTileProc(*args):
  return _PDFNetPython2.Callback_StaticCreateTileProc(*args)
Callback_StaticCreateTileProc = _PDFNetPython2.Callback_StaticCreateTileProc

def Callback_StaticRemoveTileProc(*args):
  return _PDFNetPython2.Callback_StaticRemoveTileProc(*args)
Callback_StaticRemoveTileProc = _PDFNetPython2.Callback_StaticRemoveTileProc

class SignatureHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureHandler, name)
    __repr__ = _swig_repr
    def GetName(self): return _PDFNetPython2.SignatureHandler_GetName(self)
    def AppendData(self, *args): return _PDFNetPython2.SignatureHandler_AppendData(self, *args)
    def Reset(self): return _PDFNetPython2.SignatureHandler_Reset(self)
    def CreateSignature(self): return _PDFNetPython2.SignatureHandler_CreateSignature(self)
    def Clone(self): return _PDFNetPython2.SignatureHandler_Clone(self)
    __swig_destroy__ = _PDFNetPython2.delete_SignatureHandler
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == SignatureHandler:
            _self = None
        else:
            _self = self
        this = _PDFNetPython2.new_SignatureHandler(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _PDFNetPython2.disown_SignatureHandler(self)
        return weakref_proxy(self)
SignatureHandler_swigregister = _PDFNetPython2.SignatureHandler_swigregister
SignatureHandler_swigregister(SignatureHandler)

class TRN_matrix2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_matrix2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_matrix2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_a"] = _PDFNetPython2.TRN_matrix2d_m_a_set
    __swig_getmethods__["m_a"] = _PDFNetPython2.TRN_matrix2d_m_a_get
    if _newclass:m_a = _swig_property(_PDFNetPython2.TRN_matrix2d_m_a_get, _PDFNetPython2.TRN_matrix2d_m_a_set)
    __swig_setmethods__["m_b"] = _PDFNetPython2.TRN_matrix2d_m_b_set
    __swig_getmethods__["m_b"] = _PDFNetPython2.TRN_matrix2d_m_b_get
    if _newclass:m_b = _swig_property(_PDFNetPython2.TRN_matrix2d_m_b_get, _PDFNetPython2.TRN_matrix2d_m_b_set)
    __swig_setmethods__["m_c"] = _PDFNetPython2.TRN_matrix2d_m_c_set
    __swig_getmethods__["m_c"] = _PDFNetPython2.TRN_matrix2d_m_c_get
    if _newclass:m_c = _swig_property(_PDFNetPython2.TRN_matrix2d_m_c_get, _PDFNetPython2.TRN_matrix2d_m_c_set)
    __swig_setmethods__["m_d"] = _PDFNetPython2.TRN_matrix2d_m_d_set
    __swig_getmethods__["m_d"] = _PDFNetPython2.TRN_matrix2d_m_d_get
    if _newclass:m_d = _swig_property(_PDFNetPython2.TRN_matrix2d_m_d_get, _PDFNetPython2.TRN_matrix2d_m_d_set)
    __swig_setmethods__["m_h"] = _PDFNetPython2.TRN_matrix2d_m_h_set
    __swig_getmethods__["m_h"] = _PDFNetPython2.TRN_matrix2d_m_h_get
    if _newclass:m_h = _swig_property(_PDFNetPython2.TRN_matrix2d_m_h_get, _PDFNetPython2.TRN_matrix2d_m_h_set)
    __swig_setmethods__["m_v"] = _PDFNetPython2.TRN_matrix2d_m_v_set
    __swig_getmethods__["m_v"] = _PDFNetPython2.TRN_matrix2d_m_v_get
    if _newclass:m_v = _swig_property(_PDFNetPython2.TRN_matrix2d_m_v_get, _PDFNetPython2.TRN_matrix2d_m_v_set)
    def __init__(self): 
        this = _PDFNetPython2.new_TRN_matrix2d()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TRN_matrix2d
    __del__ = lambda self : None;
TRN_matrix2d_swigregister = _PDFNetPython2.TRN_matrix2d_swigregister
TRN_matrix2d_swigregister(TRN_matrix2d)

class TRN_rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x1"] = _PDFNetPython2.TRN_rect_x1_set
    __swig_getmethods__["x1"] = _PDFNetPython2.TRN_rect_x1_get
    if _newclass:x1 = _swig_property(_PDFNetPython2.TRN_rect_x1_get, _PDFNetPython2.TRN_rect_x1_set)
    __swig_setmethods__["y1"] = _PDFNetPython2.TRN_rect_y1_set
    __swig_getmethods__["y1"] = _PDFNetPython2.TRN_rect_y1_get
    if _newclass:y1 = _swig_property(_PDFNetPython2.TRN_rect_y1_get, _PDFNetPython2.TRN_rect_y1_set)
    __swig_setmethods__["x2"] = _PDFNetPython2.TRN_rect_x2_set
    __swig_getmethods__["x2"] = _PDFNetPython2.TRN_rect_x2_get
    if _newclass:x2 = _swig_property(_PDFNetPython2.TRN_rect_x2_get, _PDFNetPython2.TRN_rect_x2_set)
    __swig_setmethods__["y2"] = _PDFNetPython2.TRN_rect_y2_set
    __swig_getmethods__["y2"] = _PDFNetPython2.TRN_rect_y2_get
    if _newclass:y2 = _swig_property(_PDFNetPython2.TRN_rect_y2_get, _PDFNetPython2.TRN_rect_y2_set)
    __swig_setmethods__["mp_rect"] = _PDFNetPython2.TRN_rect_mp_rect_set
    __swig_getmethods__["mp_rect"] = _PDFNetPython2.TRN_rect_mp_rect_get
    if _newclass:mp_rect = _swig_property(_PDFNetPython2.TRN_rect_mp_rect_get, _PDFNetPython2.TRN_rect_mp_rect_set)
    def __init__(self): 
        this = _PDFNetPython2.new_TRN_rect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TRN_rect
    __del__ = lambda self : None;
TRN_rect_swigregister = _PDFNetPython2.TRN_rect_swigregister
TRN_rect_swigregister(TRN_rect)

class TRN_date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_date, name)
    __repr__ = _swig_repr
    __swig_setmethods__["year"] = _PDFNetPython2.TRN_date_year_set
    __swig_getmethods__["year"] = _PDFNetPython2.TRN_date_year_get
    if _newclass:year = _swig_property(_PDFNetPython2.TRN_date_year_get, _PDFNetPython2.TRN_date_year_set)
    __swig_setmethods__["month"] = _PDFNetPython2.TRN_date_month_set
    __swig_getmethods__["month"] = _PDFNetPython2.TRN_date_month_get
    if _newclass:month = _swig_property(_PDFNetPython2.TRN_date_month_get, _PDFNetPython2.TRN_date_month_set)
    __swig_setmethods__["day"] = _PDFNetPython2.TRN_date_day_set
    __swig_getmethods__["day"] = _PDFNetPython2.TRN_date_day_get
    if _newclass:day = _swig_property(_PDFNetPython2.TRN_date_day_get, _PDFNetPython2.TRN_date_day_set)
    __swig_setmethods__["hour"] = _PDFNetPython2.TRN_date_hour_set
    __swig_getmethods__["hour"] = _PDFNetPython2.TRN_date_hour_get
    if _newclass:hour = _swig_property(_PDFNetPython2.TRN_date_hour_get, _PDFNetPython2.TRN_date_hour_set)
    __swig_setmethods__["minute"] = _PDFNetPython2.TRN_date_minute_set
    __swig_getmethods__["minute"] = _PDFNetPython2.TRN_date_minute_get
    if _newclass:minute = _swig_property(_PDFNetPython2.TRN_date_minute_get, _PDFNetPython2.TRN_date_minute_set)
    __swig_setmethods__["second"] = _PDFNetPython2.TRN_date_second_set
    __swig_getmethods__["second"] = _PDFNetPython2.TRN_date_second_get
    if _newclass:second = _swig_property(_PDFNetPython2.TRN_date_second_get, _PDFNetPython2.TRN_date_second_set)
    __swig_setmethods__["UT"] = _PDFNetPython2.TRN_date_UT_set
    __swig_getmethods__["UT"] = _PDFNetPython2.TRN_date_UT_get
    if _newclass:UT = _swig_property(_PDFNetPython2.TRN_date_UT_get, _PDFNetPython2.TRN_date_UT_set)
    __swig_setmethods__["UT_hour"] = _PDFNetPython2.TRN_date_UT_hour_set
    __swig_getmethods__["UT_hour"] = _PDFNetPython2.TRN_date_UT_hour_get
    if _newclass:UT_hour = _swig_property(_PDFNetPython2.TRN_date_UT_hour_get, _PDFNetPython2.TRN_date_UT_hour_set)
    __swig_setmethods__["UT_minutes"] = _PDFNetPython2.TRN_date_UT_minutes_set
    __swig_getmethods__["UT_minutes"] = _PDFNetPython2.TRN_date_UT_minutes_get
    if _newclass:UT_minutes = _swig_property(_PDFNetPython2.TRN_date_UT_minutes_get, _PDFNetPython2.TRN_date_UT_minutes_set)
    __swig_setmethods__["mp_obj"] = _PDFNetPython2.TRN_date_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython2.TRN_date_mp_obj_get
    if _newclass:mp_obj = _swig_property(_PDFNetPython2.TRN_date_mp_obj_get, _PDFNetPython2.TRN_date_mp_obj_set)
    def __init__(self): 
        this = _PDFNetPython2.new_TRN_date()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TRN_date
    __del__ = lambda self : None;
TRN_date_swigregister = _PDFNetPython2.TRN_date_swigregister
TRN_date_swigregister(TRN_date)

class TRN_chardata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_chardata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_chardata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["char_code"] = _PDFNetPython2.TRN_chardata_char_code_set
    __swig_getmethods__["char_code"] = _PDFNetPython2.TRN_chardata_char_code_get
    if _newclass:char_code = _swig_property(_PDFNetPython2.TRN_chardata_char_code_get, _PDFNetPython2.TRN_chardata_char_code_set)
    __swig_setmethods__["x"] = _PDFNetPython2.TRN_chardata_x_set
    __swig_getmethods__["x"] = _PDFNetPython2.TRN_chardata_x_get
    if _newclass:x = _swig_property(_PDFNetPython2.TRN_chardata_x_get, _PDFNetPython2.TRN_chardata_x_set)
    __swig_setmethods__["y"] = _PDFNetPython2.TRN_chardata_y_set
    __swig_getmethods__["y"] = _PDFNetPython2.TRN_chardata_y_get
    if _newclass:y = _swig_property(_PDFNetPython2.TRN_chardata_y_get, _PDFNetPython2.TRN_chardata_y_set)
    __swig_setmethods__["char_data"] = _PDFNetPython2.TRN_chardata_char_data_set
    __swig_getmethods__["char_data"] = _PDFNetPython2.TRN_chardata_char_data_get
    if _newclass:char_data = _swig_property(_PDFNetPython2.TRN_chardata_char_data_get, _PDFNetPython2.TRN_chardata_char_data_set)
    __swig_setmethods__["bytes"] = _PDFNetPython2.TRN_chardata_bytes_set
    __swig_getmethods__["bytes"] = _PDFNetPython2.TRN_chardata_bytes_get
    if _newclass:bytes = _swig_property(_PDFNetPython2.TRN_chardata_bytes_get, _PDFNetPython2.TRN_chardata_bytes_set)
    def __init__(self): 
        this = _PDFNetPython2.new_TRN_chardata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TRN_chardata
    __del__ = lambda self : None;
TRN_chardata_swigregister = _PDFNetPython2.TRN_chardata_swigregister
TRN_chardata_swigregister(TRN_chardata)

class TRN_point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _PDFNetPython2.TRN_point_x_set
    __swig_getmethods__["x"] = _PDFNetPython2.TRN_point_x_get
    if _newclass:x = _swig_property(_PDFNetPython2.TRN_point_x_get, _PDFNetPython2.TRN_point_x_set)
    __swig_setmethods__["y"] = _PDFNetPython2.TRN_point_y_set
    __swig_getmethods__["y"] = _PDFNetPython2.TRN_point_y_get
    if _newclass:y = _swig_property(_PDFNetPython2.TRN_point_y_get, _PDFNetPython2.TRN_point_y_set)
    def __init__(self): 
        this = _PDFNetPython2.new_TRN_point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TRN_point
    __del__ = lambda self : None;
TRN_point_swigregister = _PDFNetPython2.TRN_point_swigregister
TRN_point_swigregister(TRN_point)

class TRN_quadpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_quadpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_quadpoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _PDFNetPython2.TRN_quadpoint_p1_set
    __swig_getmethods__["p1"] = _PDFNetPython2.TRN_quadpoint_p1_get
    if _newclass:p1 = _swig_property(_PDFNetPython2.TRN_quadpoint_p1_get, _PDFNetPython2.TRN_quadpoint_p1_set)
    __swig_setmethods__["p2"] = _PDFNetPython2.TRN_quadpoint_p2_set
    __swig_getmethods__["p2"] = _PDFNetPython2.TRN_quadpoint_p2_get
    if _newclass:p2 = _swig_property(_PDFNetPython2.TRN_quadpoint_p2_get, _PDFNetPython2.TRN_quadpoint_p2_set)
    __swig_setmethods__["p3"] = _PDFNetPython2.TRN_quadpoint_p3_set
    __swig_getmethods__["p3"] = _PDFNetPython2.TRN_quadpoint_p3_get
    if _newclass:p3 = _swig_property(_PDFNetPython2.TRN_quadpoint_p3_get, _PDFNetPython2.TRN_quadpoint_p3_set)
    __swig_setmethods__["p4"] = _PDFNetPython2.TRN_quadpoint_p4_set
    __swig_getmethods__["p4"] = _PDFNetPython2.TRN_quadpoint_p4_get
    if _newclass:p4 = _swig_property(_PDFNetPython2.TRN_quadpoint_p4_get, _PDFNetPython2.TRN_quadpoint_p4_set)
    def __init__(self): 
        this = _PDFNetPython2.new_TRN_quadpoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TRN_quadpoint
    __del__ = lambda self : None;
TRN_quadpoint_swigregister = _PDFNetPython2.TRN_quadpoint_swigregister
TRN_quadpoint_swigregister(TRN_quadpoint)

class Matrix2D(TRN_matrix2d):
    __swig_setmethods__ = {}
    for _s in [TRN_matrix2d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2D, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_matrix2d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Matrix2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _PDFNetPython2.Matrix2D_Set(self, *args)
    def Concat(self, *args): return _PDFNetPython2.Matrix2D_Concat(self, *args)
    def __imul__(self, *args): return _PDFNetPython2.Matrix2D___imul__(self, *args)
    def __mul__(self, *args): return _PDFNetPython2.Matrix2D___mul__(self, *args)
    def __eq__(self, *args): return _PDFNetPython2.Matrix2D___eq__(self, *args)
    def __ne__(self, *args): return _PDFNetPython2.Matrix2D___ne__(self, *args)
    def Mult(self, *args): return _PDFNetPython2.Matrix2D_Mult(self, *args)
    def Inverse(self): return _PDFNetPython2.Matrix2D_Inverse(self)
    def Translate(self, *args): return _PDFNetPython2.Matrix2D_Translate(self, *args)
    def Scale(self, *args): return _PDFNetPython2.Matrix2D_Scale(self, *args)
    __swig_getmethods__["ZeroMatrix"] = lambda x: _PDFNetPython2.Matrix2D_ZeroMatrix
    if _newclass:ZeroMatrix = staticmethod(_PDFNetPython2.Matrix2D_ZeroMatrix)
    __swig_getmethods__["IdentityMatrix"] = lambda x: _PDFNetPython2.Matrix2D_IdentityMatrix
    if _newclass:IdentityMatrix = staticmethod(_PDFNetPython2.Matrix2D_IdentityMatrix)
    __swig_getmethods__["RotationMatrix"] = lambda x: _PDFNetPython2.Matrix2D_RotationMatrix
    if _newclass:RotationMatrix = staticmethod(_PDFNetPython2.Matrix2D_RotationMatrix)
    __swig_destroy__ = _PDFNetPython2.delete_Matrix2D
    __del__ = lambda self : None;
Matrix2D_swigregister = _PDFNetPython2.Matrix2D_swigregister
Matrix2D_swigregister(Matrix2D)

def Matrix2D_ZeroMatrix():
  return _PDFNetPython2.Matrix2D_ZeroMatrix()
Matrix2D_ZeroMatrix = _PDFNetPython2.Matrix2D_ZeroMatrix

def Matrix2D_IdentityMatrix():
  return _PDFNetPython2.Matrix2D_IdentityMatrix()
Matrix2D_IdentityMatrix = _PDFNetPython2.Matrix2D_IdentityMatrix

def Matrix2D_RotationMatrix(*args):
  return _PDFNetPython2.Matrix2D_RotationMatrix(*args)
Matrix2D_RotationMatrix = _PDFNetPython2.Matrix2D_RotationMatrix

class GSChangesIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSChangesIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSChangesIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_GSChangesIterator
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.GSChangesIterator_Destroy(self)
    def Next(self): return _PDFNetPython2.GSChangesIterator_Next(self)
    def Current(self): return _PDFNetPython2.GSChangesIterator_Current(self)
    def HasNext(self): return _PDFNetPython2.GSChangesIterator_HasNext(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_GSChangesIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.GSChangesIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.GSChangesIterator_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.GSChangesIterator_mp_impl_get, _PDFNetPython2.GSChangesIterator_mp_impl_set)
GSChangesIterator_swigregister = _PDFNetPython2.GSChangesIterator_swigregister
GSChangesIterator_swigregister(GSChangesIterator)

class UInt32Iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Iterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_UInt32Iterator
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.UInt32Iterator_Destroy(self)
    def Next(self): return _PDFNetPython2.UInt32Iterator_Next(self)
    def Current(self): return _PDFNetPython2.UInt32Iterator_Current(self)
    def HasNext(self): return _PDFNetPython2.UInt32Iterator_HasNext(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_UInt32Iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.UInt32Iterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.UInt32Iterator_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.UInt32Iterator_mp_impl_get, _PDFNetPython2.UInt32Iterator_mp_impl_set)
UInt32Iterator_swigregister = _PDFNetPython2.UInt32Iterator_swigregister
UInt32Iterator_swigregister(UInt32Iterator)

class PageIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_PageIterator
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.PageIterator_Destroy(self)
    def Next(self): return _PDFNetPython2.PageIterator_Next(self)
    def Current(self): return _PDFNetPython2.PageIterator_Current(self)
    def HasNext(self): return _PDFNetPython2.PageIterator_HasNext(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PageIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.PageIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.PageIterator_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.PageIterator_mp_impl_get, _PDFNetPython2.PageIterator_mp_impl_set)
PageIterator_swigregister = _PDFNetPython2.PageIterator_swigregister
PageIterator_swigregister(PageIterator)

class FDFFieldIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDFFieldIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDFFieldIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_FDFFieldIterator
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.FDFFieldIterator_Destroy(self)
    def Next(self): return _PDFNetPython2.FDFFieldIterator_Next(self)
    def Current(self): return _PDFNetPython2.FDFFieldIterator_Current(self)
    def HasNext(self): return _PDFNetPython2.FDFFieldIterator_HasNext(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FDFFieldIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.FDFFieldIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.FDFFieldIterator_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.FDFFieldIterator_mp_impl_get, _PDFNetPython2.FDFFieldIterator_mp_impl_set)
FDFFieldIterator_swigregister = _PDFNetPython2.FDFFieldIterator_swigregister
FDFFieldIterator_swigregister(FDFFieldIterator)

class FieldIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_FieldIterator
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.FieldIterator_Destroy(self)
    def Next(self): return _PDFNetPython2.FieldIterator_Next(self)
    def Current(self): return _PDFNetPython2.FieldIterator_Current(self)
    def HasNext(self): return _PDFNetPython2.FieldIterator_HasNext(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FieldIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.FieldIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.FieldIterator_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.FieldIterator_mp_impl_get, _PDFNetPython2.FieldIterator_mp_impl_set)
FieldIterator_swigregister = _PDFNetPython2.FieldIterator_swigregister
FieldIterator_swigregister(FieldIterator)

class CharIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_CharIterator
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.CharIterator_Destroy(self)
    def Next(self): return _PDFNetPython2.CharIterator_Next(self)
    def Current(self): return _PDFNetPython2.CharIterator_Current(self)
    def HasNext(self): return _PDFNetPython2.CharIterator_HasNext(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_CharIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.CharIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.CharIterator_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.CharIterator_mp_impl_get, _PDFNetPython2.CharIterator_mp_impl_set)
CharIterator_swigregister = _PDFNetPython2.CharIterator_swigregister
CharIterator_swigregister(CharIterator)

class Appearance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Appearance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Appearance, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_Appearance()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["RedactionOverlay"] = _PDFNetPython2.Appearance_RedactionOverlay_set
    __swig_getmethods__["RedactionOverlay"] = _PDFNetPython2.Appearance_RedactionOverlay_get
    if _newclass:RedactionOverlay = _swig_property(_PDFNetPython2.Appearance_RedactionOverlay_get, _PDFNetPython2.Appearance_RedactionOverlay_set)
    __swig_setmethods__["PositiveOverlayColor"] = _PDFNetPython2.Appearance_PositiveOverlayColor_set
    __swig_getmethods__["PositiveOverlayColor"] = _PDFNetPython2.Appearance_PositiveOverlayColor_get
    if _newclass:PositiveOverlayColor = _swig_property(_PDFNetPython2.Appearance_PositiveOverlayColor_get, _PDFNetPython2.Appearance_PositiveOverlayColor_set)
    __swig_setmethods__["NegativeOverlayColor"] = _PDFNetPython2.Appearance_NegativeOverlayColor_set
    __swig_getmethods__["NegativeOverlayColor"] = _PDFNetPython2.Appearance_NegativeOverlayColor_get
    if _newclass:NegativeOverlayColor = _swig_property(_PDFNetPython2.Appearance_NegativeOverlayColor_get, _PDFNetPython2.Appearance_NegativeOverlayColor_set)
    __swig_setmethods__["Border"] = _PDFNetPython2.Appearance_Border_set
    __swig_getmethods__["Border"] = _PDFNetPython2.Appearance_Border_get
    if _newclass:Border = _swig_property(_PDFNetPython2.Appearance_Border_get, _PDFNetPython2.Appearance_Border_set)
    __swig_setmethods__["UseOverlayText"] = _PDFNetPython2.Appearance_UseOverlayText_set
    __swig_getmethods__["UseOverlayText"] = _PDFNetPython2.Appearance_UseOverlayText_get
    if _newclass:UseOverlayText = _swig_property(_PDFNetPython2.Appearance_UseOverlayText_get, _PDFNetPython2.Appearance_UseOverlayText_set)
    __swig_setmethods__["TextFont"] = _PDFNetPython2.Appearance_TextFont_set
    __swig_getmethods__["TextFont"] = _PDFNetPython2.Appearance_TextFont_get
    if _newclass:TextFont = _swig_property(_PDFNetPython2.Appearance_TextFont_get, _PDFNetPython2.Appearance_TextFont_set)
    __swig_setmethods__["MinFontSize"] = _PDFNetPython2.Appearance_MinFontSize_set
    __swig_getmethods__["MinFontSize"] = _PDFNetPython2.Appearance_MinFontSize_get
    if _newclass:MinFontSize = _swig_property(_PDFNetPython2.Appearance_MinFontSize_get, _PDFNetPython2.Appearance_MinFontSize_set)
    __swig_setmethods__["MaxFontSize"] = _PDFNetPython2.Appearance_MaxFontSize_set
    __swig_getmethods__["MaxFontSize"] = _PDFNetPython2.Appearance_MaxFontSize_get
    if _newclass:MaxFontSize = _swig_property(_PDFNetPython2.Appearance_MaxFontSize_get, _PDFNetPython2.Appearance_MaxFontSize_set)
    __swig_setmethods__["TextColor"] = _PDFNetPython2.Appearance_TextColor_set
    __swig_getmethods__["TextColor"] = _PDFNetPython2.Appearance_TextColor_get
    if _newclass:TextColor = _swig_property(_PDFNetPython2.Appearance_TextColor_get, _PDFNetPython2.Appearance_TextColor_set)
    __swig_setmethods__["HorizTextAlignment"] = _PDFNetPython2.Appearance_HorizTextAlignment_set
    __swig_getmethods__["HorizTextAlignment"] = _PDFNetPython2.Appearance_HorizTextAlignment_get
    if _newclass:HorizTextAlignment = _swig_property(_PDFNetPython2.Appearance_HorizTextAlignment_get, _PDFNetPython2.Appearance_HorizTextAlignment_set)
    __swig_setmethods__["VertTextAlignment"] = _PDFNetPython2.Appearance_VertTextAlignment_set
    __swig_getmethods__["VertTextAlignment"] = _PDFNetPython2.Appearance_VertTextAlignment_get
    if _newclass:VertTextAlignment = _swig_property(_PDFNetPython2.Appearance_VertTextAlignment_get, _PDFNetPython2.Appearance_VertTextAlignment_set)
    __swig_destroy__ = _PDFNetPython2.delete_Appearance
    __del__ = lambda self : None;
Appearance_swigregister = _PDFNetPython2.Appearance_swigregister
Appearance_swigregister(Appearance)

class Redaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Redaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Redaction, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_Redaction
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.Redaction_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Redaction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_imp"] = _PDFNetPython2.Redaction_mp_imp_set
    __swig_getmethods__["mp_imp"] = _PDFNetPython2.Redaction_mp_imp_get
    if _newclass:mp_imp = _swig_property(_PDFNetPython2.Redaction_mp_imp_get, _PDFNetPython2.Redaction_mp_imp_set)
Redaction_swigregister = _PDFNetPython2.Redaction_swigregister
Redaction_swigregister(Redaction)

class SVGOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVGOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVGOutputOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_SVGOutputOptions()
        try: self.this.append(this)
        except: self.this = this
    def SetEmbedImages(self, *args): return _PDFNetPython2.SVGOutputOptions_SetEmbedImages(self, *args)
    def SetNoFonts(self, *args): return _PDFNetPython2.SVGOutputOptions_SetNoFonts(self, *args)
    def SetNoUnicode(self, *args): return _PDFNetPython2.SVGOutputOptions_SetNoUnicode(self, *args)
    def SetIndividualCharPlacement(self, *args): return _PDFNetPython2.SVGOutputOptions_SetIndividualCharPlacement(self, *args)
    def SetRemoveCharPlacement(self, *args): return _PDFNetPython2.SVGOutputOptions_SetRemoveCharPlacement(self, *args)
    __swig_destroy__ = _PDFNetPython2.delete_SVGOutputOptions
    __del__ = lambda self : None;
SVGOutputOptions_swigregister = _PDFNetPython2.SVGOutputOptions_swigregister
SVGOutputOptions_swigregister(SVGOutputOptions)

class XPSOutputCommonOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XPSOutputCommonOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XPSOutputCommonOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_XPSOutputCommonOptions()
        try: self.this.append(this)
        except: self.this = this
    def SetPrintMode(self, *args): return _PDFNetPython2.XPSOutputCommonOptions_SetPrintMode(self, *args)
    def SetDPI(self, *args): return _PDFNetPython2.XPSOutputCommonOptions_SetDPI(self, *args)
    def SetRenderPages(self, *args): return _PDFNetPython2.XPSOutputCommonOptions_SetRenderPages(self, *args)
    def SetThickenLines(self, *args): return _PDFNetPython2.XPSOutputCommonOptions_SetThickenLines(self, *args)
    __swig_destroy__ = _PDFNetPython2.delete_XPSOutputCommonOptions
    __del__ = lambda self : None;
XPSOutputCommonOptions_swigregister = _PDFNetPython2.XPSOutputCommonOptions_swigregister
XPSOutputCommonOptions_swigregister(XPSOutputCommonOptions)

class XPSOutputOptions(XPSOutputCommonOptions):
    __swig_setmethods__ = {}
    for _s in [XPSOutputCommonOptions]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XPSOutputOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [XPSOutputCommonOptions]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XPSOutputOptions, name)
    __repr__ = _swig_repr
    def SetOpenXps(self, *args): return _PDFNetPython2.XPSOutputOptions_SetOpenXps(self, *args)
    def __init__(self): 
        this = _PDFNetPython2.new_XPSOutputOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_XPSOutputOptions
    __del__ = lambda self : None;
XPSOutputOptions_swigregister = _PDFNetPython2.XPSOutputOptions_swigregister
XPSOutputOptions_swigregister(XPSOutputOptions)

class XODOutputOptions(XPSOutputCommonOptions):
    __swig_setmethods__ = {}
    for _s in [XPSOutputCommonOptions]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XODOutputOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [XPSOutputCommonOptions]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XODOutputOptions, name)
    __repr__ = _swig_repr
    def SetOutputThumbnails(self, *args): return _PDFNetPython2.XODOutputOptions_SetOutputThumbnails(self, *args)
    def SetThumbnailSize(self, *args): return _PDFNetPython2.XODOutputOptions_SetThumbnailSize(self, *args)
    def SetElementLimit(self, *args): return _PDFNetPython2.XODOutputOptions_SetElementLimit(self, *args)
    def SetOpacityMaskWorkaround(self, *args): return _PDFNetPython2.XODOutputOptions_SetOpacityMaskWorkaround(self, *args)
    def SetMaximumImagePixels(self, *args): return _PDFNetPython2.XODOutputOptions_SetMaximumImagePixels(self, *args)
    def SetFlattenContent(self, *args): return _PDFNetPython2.XODOutputOptions_SetFlattenContent(self, *args)
    def SetPreferJPG(self, *args): return _PDFNetPython2.XODOutputOptions_SetPreferJPG(self, *args)
    def __init__(self): 
        this = _PDFNetPython2.new_XODOutputOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_XODOutputOptions
    __del__ = lambda self : None;
XODOutputOptions_swigregister = _PDFNetPython2.XODOutputOptions_swigregister
XODOutputOptions_swigregister(XODOutputOptions)

class Proxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Proxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Proxy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_Proxy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Proxy
    __del__ = lambda self : None;
    e_default = _PDFNetPython2.Proxy_e_default
    e_none = _PDFNetPython2.Proxy_e_none
    e_http = _PDFNetPython2.Proxy_e_http
    e_socks5 = _PDFNetPython2.Proxy_e_socks5
    def SetType(self, *args): return _PDFNetPython2.Proxy_SetType(self, *args)
    def SetHost(self, *args): return _PDFNetPython2.Proxy_SetHost(self, *args)
    def SetPort(self, *args): return _PDFNetPython2.Proxy_SetPort(self, *args)
    def SetUsername(self, *args): return _PDFNetPython2.Proxy_SetUsername(self, *args)
    def SetPassword(self, *args): return _PDFNetPython2.Proxy_SetPassword(self, *args)
    def Destroy(self): return _PDFNetPython2.Proxy_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.Proxy_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.Proxy_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.Proxy_mp_impl_get, _PDFNetPython2.Proxy_mp_impl_set)
Proxy_swigregister = _PDFNetPython2.Proxy_swigregister
Proxy_swigregister(Proxy)

class WebPageSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WebPageSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WebPageSettings, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_WebPageSettings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_WebPageSettings
    __del__ = lambda self : None;
    def SetPrintBackground(self, *args): return _PDFNetPython2.WebPageSettings_SetPrintBackground(self, *args)
    def SetLoadImages(self, *args): return _PDFNetPython2.WebPageSettings_SetLoadImages(self, *args)
    def SetAllowJavaScript(self, *args): return _PDFNetPython2.WebPageSettings_SetAllowJavaScript(self, *args)
    def SetSmartShrinking(self, *args): return _PDFNetPython2.WebPageSettings_SetSmartShrinking(self, *args)
    def SetMinimumFontSize(self, *args): return _PDFNetPython2.WebPageSettings_SetMinimumFontSize(self, *args)
    def SetDefaultEncoding(self, *args): return _PDFNetPython2.WebPageSettings_SetDefaultEncoding(self, *args)
    def SetUserStyleSheet(self, *args): return _PDFNetPython2.WebPageSettings_SetUserStyleSheet(self, *args)
    def SetAllowPlugins(self, *args): return _PDFNetPython2.WebPageSettings_SetAllowPlugins(self, *args)
    def SetPrintMediaType(self, *args): return _PDFNetPython2.WebPageSettings_SetPrintMediaType(self, *args)
    def SetIncludeInOutline(self, *args): return _PDFNetPython2.WebPageSettings_SetIncludeInOutline(self, *args)
    def SetUsername(self, *args): return _PDFNetPython2.WebPageSettings_SetUsername(self, *args)
    def SetPassword(self, *args): return _PDFNetPython2.WebPageSettings_SetPassword(self, *args)
    def SetJavaScriptDelay(self, *args): return _PDFNetPython2.WebPageSettings_SetJavaScriptDelay(self, *args)
    def SetZoom(self, *args): return _PDFNetPython2.WebPageSettings_SetZoom(self, *args)
    def SetBlockLocalFileAccess(self, *args): return _PDFNetPython2.WebPageSettings_SetBlockLocalFileAccess(self, *args)
    def SetStopSlowScripts(self, *args): return _PDFNetPython2.WebPageSettings_SetStopSlowScripts(self, *args)
    def SetDebugJavaScriptOutput(self, *args): return _PDFNetPython2.WebPageSettings_SetDebugJavaScriptOutput(self, *args)
    e_abort = _PDFNetPython2.WebPageSettings_e_abort
    e_skip = _PDFNetPython2.WebPageSettings_e_skip
    e_ignore = _PDFNetPython2.WebPageSettings_e_ignore
    def SetLoadErrorHandling(self, *args): return _PDFNetPython2.WebPageSettings_SetLoadErrorHandling(self, *args)
    def SetExternalLinks(self, *args): return _PDFNetPython2.WebPageSettings_SetExternalLinks(self, *args)
    def SetInternalLinks(self, *args): return _PDFNetPython2.WebPageSettings_SetInternalLinks(self, *args)
    def SetProduceForms(self, *args): return _PDFNetPython2.WebPageSettings_SetProduceForms(self, *args)
    def SetProxy(self, *args): return _PDFNetPython2.WebPageSettings_SetProxy(self, *args)
    def Destroy(self): return _PDFNetPython2.WebPageSettings_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.WebPageSettings_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.WebPageSettings_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.WebPageSettings_mp_impl_get, _PDFNetPython2.WebPageSettings_mp_impl_set)
WebPageSettings_swigregister = _PDFNetPython2.WebPageSettings_swigregister
WebPageSettings_swigregister(WebPageSettings)

class TOCSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOCSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOCSettings, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_TOCSettings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TOCSettings
    __del__ = lambda self : None;
    def SetDottedLines(self, *args): return _PDFNetPython2.TOCSettings_SetDottedLines(self, *args)
    def SetLinks(self, *args): return _PDFNetPython2.TOCSettings_SetLinks(self, *args)
    def SetCaptionText(self, *args): return _PDFNetPython2.TOCSettings_SetCaptionText(self, *args)
    def SetLevelIndentation(self, *args): return _PDFNetPython2.TOCSettings_SetLevelIndentation(self, *args)
    def SetTextSizeShrink(self, *args): return _PDFNetPython2.TOCSettings_SetTextSizeShrink(self, *args)
    def SetXsl(self, *args): return _PDFNetPython2.TOCSettings_SetXsl(self, *args)
    def Destroy(self): return _PDFNetPython2.TOCSettings_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.TOCSettings_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.TOCSettings_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.TOCSettings_mp_impl_get, _PDFNetPython2.TOCSettings_mp_impl_set)
TOCSettings_swigregister = _PDFNetPython2.TOCSettings_swigregister
TOCSettings_swigregister(TOCSettings)

class Printer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Printer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Printer, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Install"] = lambda x: _PDFNetPython2.Printer_Install
    if _newclass:Install = staticmethod(_PDFNetPython2.Printer_Install)
    __swig_getmethods__["Uninstall"] = lambda x: _PDFNetPython2.Printer_Uninstall
    if _newclass:Uninstall = staticmethod(_PDFNetPython2.Printer_Uninstall)
    __swig_getmethods__["GetPrinterName"] = lambda x: _PDFNetPython2.Printer_GetPrinterName
    if _newclass:GetPrinterName = staticmethod(_PDFNetPython2.Printer_GetPrinterName)
    __swig_getmethods__["SetPrinterName"] = lambda x: _PDFNetPython2.Printer_SetPrinterName
    if _newclass:SetPrinterName = staticmethod(_PDFNetPython2.Printer_SetPrinterName)
    __swig_getmethods__["IsInstalled"] = lambda x: _PDFNetPython2.Printer_IsInstalled
    if _newclass:IsInstalled = staticmethod(_PDFNetPython2.Printer_IsInstalled)
    def __init__(self): 
        this = _PDFNetPython2.new_Printer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Printer
    __del__ = lambda self : None;
Printer_swigregister = _PDFNetPython2.Printer_swigregister
Printer_swigregister(Printer)

def Printer_Install(in_printerName = "PDFTron PDFNet"):
  return _PDFNetPython2.Printer_Install(in_printerName)
Printer_Install = _PDFNetPython2.Printer_Install

def Printer_Uninstall():
  return _PDFNetPython2.Printer_Uninstall()
Printer_Uninstall = _PDFNetPython2.Printer_Uninstall

def Printer_GetPrinterName():
  return _PDFNetPython2.Printer_GetPrinterName()
Printer_GetPrinterName = _PDFNetPython2.Printer_GetPrinterName

def Printer_SetPrinterName(in_printerName = "PDFTron PDFNet"):
  return _PDFNetPython2.Printer_SetPrinterName(in_printerName)
Printer_SetPrinterName = _PDFNetPython2.Printer_SetPrinterName

def Printer_IsInstalled(in_printerName = "PDFTron PDFNet"):
  return _PDFNetPython2.Printer_IsInstalled(in_printerName)
Printer_IsInstalled = _PDFNetPython2.Printer_IsInstalled

class TextSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextSettings, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_TextSettings()
        try: self.this.append(this)
        except: self.this = this
    def SubsetFonts(self, *args): return _PDFNetPython2.TextSettings_SubsetFonts(self, *args)
    def EmbedFonts(self, *args): return _PDFNetPython2.TextSettings_EmbedFonts(self, *args)
    __swig_destroy__ = _PDFNetPython2.delete_TextSettings
    __del__ = lambda self : None;
TextSettings_swigregister = _PDFNetPython2.TextSettings_swigregister
TextSettings_swigregister(TextSettings)

class OptimizerSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizerSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizerSettings, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_OptimizerSettings()
        try: self.this.append(this)
        except: self.this = this
    def SetColorImageSettings(self, *args): return _PDFNetPython2.OptimizerSettings_SetColorImageSettings(self, *args)
    def SetGrayscaleImageSettings(self, *args): return _PDFNetPython2.OptimizerSettings_SetGrayscaleImageSettings(self, *args)
    def SetMonoImageSettings(self, *args): return _PDFNetPython2.OptimizerSettings_SetMonoImageSettings(self, *args)
    def SetTextSettings(self, *args): return _PDFNetPython2.OptimizerSettings_SetTextSettings(self, *args)
    __swig_setmethods__["m_color_image_settings"] = _PDFNetPython2.OptimizerSettings_m_color_image_settings_set
    __swig_getmethods__["m_color_image_settings"] = _PDFNetPython2.OptimizerSettings_m_color_image_settings_get
    if _newclass:m_color_image_settings = _swig_property(_PDFNetPython2.OptimizerSettings_m_color_image_settings_get, _PDFNetPython2.OptimizerSettings_m_color_image_settings_set)
    __swig_setmethods__["m_grayscale_image_settings"] = _PDFNetPython2.OptimizerSettings_m_grayscale_image_settings_set
    __swig_getmethods__["m_grayscale_image_settings"] = _PDFNetPython2.OptimizerSettings_m_grayscale_image_settings_get
    if _newclass:m_grayscale_image_settings = _swig_property(_PDFNetPython2.OptimizerSettings_m_grayscale_image_settings_get, _PDFNetPython2.OptimizerSettings_m_grayscale_image_settings_set)
    __swig_setmethods__["m_mono_image_settings"] = _PDFNetPython2.OptimizerSettings_m_mono_image_settings_set
    __swig_getmethods__["m_mono_image_settings"] = _PDFNetPython2.OptimizerSettings_m_mono_image_settings_get
    if _newclass:m_mono_image_settings = _swig_property(_PDFNetPython2.OptimizerSettings_m_mono_image_settings_get, _PDFNetPython2.OptimizerSettings_m_mono_image_settings_set)
    __swig_setmethods__["m_text_settings"] = _PDFNetPython2.OptimizerSettings_m_text_settings_set
    __swig_getmethods__["m_text_settings"] = _PDFNetPython2.OptimizerSettings_m_text_settings_get
    if _newclass:m_text_settings = _swig_property(_PDFNetPython2.OptimizerSettings_m_text_settings_get, _PDFNetPython2.OptimizerSettings_m_text_settings_set)
    __swig_destroy__ = _PDFNetPython2.delete_OptimizerSettings
    __del__ = lambda self : None;
OptimizerSettings_swigregister = _PDFNetPython2.OptimizerSettings_swigregister
OptimizerSettings_swigregister(OptimizerSettings)

class ImageSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSettings, name)
    __repr__ = _swig_repr
    e_retain = _PDFNetPython2.ImageSettings_e_retain
    e_flate = _PDFNetPython2.ImageSettings_e_flate
    e_jpeg = _PDFNetPython2.ImageSettings_e_jpeg
    e_jpeg2000 = _PDFNetPython2.ImageSettings_e_jpeg2000
    e_none = _PDFNetPython2.ImageSettings_e_none
    e_off = _PDFNetPython2.ImageSettings_e_off
    e_default = _PDFNetPython2.ImageSettings_e_default
    def __init__(self): 
        this = _PDFNetPython2.new_ImageSettings()
        try: self.this.append(this)
        except: self.this = this
    def SetImageDPI(self, *args): return _PDFNetPython2.ImageSettings_SetImageDPI(self, *args)
    def SetCompressionMode(self, *args): return _PDFNetPython2.ImageSettings_SetCompressionMode(self, *args)
    def SetDownsampleMode(self, *args): return _PDFNetPython2.ImageSettings_SetDownsampleMode(self, *args)
    def SetQuality(self, *args): return _PDFNetPython2.ImageSettings_SetQuality(self, *args)
    def ForceRecompression(self, *args): return _PDFNetPython2.ImageSettings_ForceRecompression(self, *args)
    def ForceChanges(self, *args): return _PDFNetPython2.ImageSettings_ForceChanges(self, *args)
    __swig_destroy__ = _PDFNetPython2.delete_ImageSettings
    __del__ = lambda self : None;
ImageSettings_swigregister = _PDFNetPython2.ImageSettings_swigregister
ImageSettings_swigregister(ImageSettings)

class MonoImageSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonoImageSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonoImageSettings, name)
    __repr__ = _swig_repr
    e_jbig2 = _PDFNetPython2.MonoImageSettings_e_jbig2
    e_flate = _PDFNetPython2.MonoImageSettings_e_flate
    e_none = _PDFNetPython2.MonoImageSettings_e_none
    e_off = _PDFNetPython2.MonoImageSettings_e_off
    e_default = _PDFNetPython2.MonoImageSettings_e_default
    def __init__(self): 
        this = _PDFNetPython2.new_MonoImageSettings()
        try: self.this.append(this)
        except: self.this = this
    def SetImageDPI(self, *args): return _PDFNetPython2.MonoImageSettings_SetImageDPI(self, *args)
    def SetCompressionMode(self, *args): return _PDFNetPython2.MonoImageSettings_SetCompressionMode(self, *args)
    def SetDownsampleMode(self, *args): return _PDFNetPython2.MonoImageSettings_SetDownsampleMode(self, *args)
    def ForceRecompression(self, *args): return _PDFNetPython2.MonoImageSettings_ForceRecompression(self, *args)
    def ForceChanges(self, *args): return _PDFNetPython2.MonoImageSettings_ForceChanges(self, *args)
    __swig_destroy__ = _PDFNetPython2.delete_MonoImageSettings
    __del__ = lambda self : None;
MonoImageSettings_swigregister = _PDFNetPython2.MonoImageSettings_swigregister
MonoImageSettings_swigregister(MonoImageSettings)

class Style(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Style, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Style, name)
    __repr__ = _swig_repr
    def GetFont(self): return _PDFNetPython2.Style_GetFont(self)
    def GetFontName(self): return _PDFNetPython2.Style_GetFontName(self)
    def GetFontSize(self): return _PDFNetPython2.Style_GetFontSize(self)
    def GetWeight(self): return _PDFNetPython2.Style_GetWeight(self)
    def IsItalic(self): return _PDFNetPython2.Style_IsItalic(self)
    def IsSerif(self): return _PDFNetPython2.Style_IsSerif(self)
    def GetColor(self): return _PDFNetPython2.Style_GetColor(self)
    def __eq__(self, *args): return _PDFNetPython2.Style___eq__(self, *args)
    def __ne__(self, *args): return _PDFNetPython2.Style___ne__(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Style(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_style"] = _PDFNetPython2.Style_mp_style_set
    __swig_getmethods__["mp_style"] = _PDFNetPython2.Style_mp_style_get
    if _newclass:mp_style = _swig_property(_PDFNetPython2.Style_mp_style_get, _PDFNetPython2.Style_mp_style_set)
    __swig_destroy__ = _PDFNetPython2.delete_Style
    __del__ = lambda self : None;
Style_swigregister = _PDFNetPython2.Style_swigregister
Style_swigregister(Style)

class Word(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Word, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Word, name)
    __repr__ = _swig_repr
    def GetNumGlyphs(self): return _PDFNetPython2.Word_GetNumGlyphs(self)
    def GetBBox(self): return _PDFNetPython2.Word_GetBBox(self)
    def GetQuad(self): return _PDFNetPython2.Word_GetQuad(self)
    def GetGlyphQuad(self, *args): return _PDFNetPython2.Word_GetGlyphQuad(self, *args)
    def GetCharStyle(self, *args): return _PDFNetPython2.Word_GetCharStyle(self, *args)
    def GetStyle(self): return _PDFNetPython2.Word_GetStyle(self)
    def GetStringLen(self): return _PDFNetPython2.Word_GetStringLen(self)
    def GetString(self): return _PDFNetPython2.Word_GetString(self)
    def GetNextWord(self): return _PDFNetPython2.Word_GetNextWord(self)
    def GetCurrentNum(self): return _PDFNetPython2.Word_GetCurrentNum(self)
    def IsValid(self): return _PDFNetPython2.Word_IsValid(self)
    def __eq__(self, *args): return _PDFNetPython2.Word___eq__(self, *args)
    def __ne__(self, *args): return _PDFNetPython2.Word___ne__(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Word(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_word"] = _PDFNetPython2.Word_mp_word_set
    __swig_getmethods__["mp_word"] = _PDFNetPython2.Word_mp_word_get
    if _newclass:mp_word = _swig_property(_PDFNetPython2.Word_mp_word_get, _PDFNetPython2.Word_mp_word_set)
    __swig_destroy__ = _PDFNetPython2.delete_Word
    __del__ = lambda self : None;
Word_swigregister = _PDFNetPython2.Word_swigregister
Word_swigregister(Word)

class Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr
    def GetNumWords(self): return _PDFNetPython2.Line_GetNumWords(self)
    def IsSimpleLine(self): return _PDFNetPython2.Line_IsSimpleLine(self)
    def GetBBox(self): return _PDFNetPython2.Line_GetBBox(self)
    def GetQuad(self): return _PDFNetPython2.Line_GetQuad(self)
    def GetFirstWord(self): return _PDFNetPython2.Line_GetFirstWord(self)
    def GetWord(self, *args): return _PDFNetPython2.Line_GetWord(self, *args)
    def GetNextLine(self): return _PDFNetPython2.Line_GetNextLine(self)
    def GetCurrentNum(self): return _PDFNetPython2.Line_GetCurrentNum(self)
    def GetStyle(self): return _PDFNetPython2.Line_GetStyle(self)
    def GetParagraphID(self): return _PDFNetPython2.Line_GetParagraphID(self)
    def GetFlowID(self): return _PDFNetPython2.Line_GetFlowID(self)
    def EndsWithHyphen(self): return _PDFNetPython2.Line_EndsWithHyphen(self)
    def IsValid(self): return _PDFNetPython2.Line_IsValid(self)
    def __eq__(self, *args): return _PDFNetPython2.Line___eq__(self, *args)
    def __ne__(self, *args): return _PDFNetPython2.Line___ne__(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Line(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_line"] = _PDFNetPython2.Line_mp_line_set
    __swig_getmethods__["mp_line"] = _PDFNetPython2.Line_mp_line_get
    if _newclass:mp_line = _swig_property(_PDFNetPython2.Line_mp_line_get, _PDFNetPython2.Line_mp_line_set)
    __swig_destroy__ = _PDFNetPython2.delete_Line
    __del__ = lambda self : None;
Line_swigregister = _PDFNetPython2.Line_swigregister
Line_swigregister(Line)

class Selection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Selection, name)
    __repr__ = _swig_repr
    def GetPageNum(self): return _PDFNetPython2.Selection_GetPageNum(self)
    def GetQuads(self): return _PDFNetPython2.Selection_GetQuads(self)
    def GetAsUnicode(self): return _PDFNetPython2.Selection_GetAsUnicode(self)
    def GetAsHtml(self): return _PDFNetPython2.Selection_GetAsHtml(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Selection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Selection
    __del__ = lambda self : None;
Selection_swigregister = _PDFNetPython2.Selection_swigregister
Selection_swigregister(Selection)

class Highlight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Highlight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Highlight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Highlight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["page_num"] = _PDFNetPython2.Highlight_page_num_set
    __swig_getmethods__["page_num"] = _PDFNetPython2.Highlight_page_num_get
    if _newclass:page_num = _swig_property(_PDFNetPython2.Highlight_page_num_get, _PDFNetPython2.Highlight_page_num_set)
    __swig_setmethods__["position"] = _PDFNetPython2.Highlight_position_set
    __swig_getmethods__["position"] = _PDFNetPython2.Highlight_position_get
    if _newclass:position = _swig_property(_PDFNetPython2.Highlight_position_get, _PDFNetPython2.Highlight_position_set)
    __swig_setmethods__["length"] = _PDFNetPython2.Highlight_length_set
    __swig_getmethods__["length"] = _PDFNetPython2.Highlight_length_get
    if _newclass:length = _swig_property(_PDFNetPython2.Highlight_length_get, _PDFNetPython2.Highlight_length_set)
    __swig_destroy__ = _PDFNetPython2.delete_Highlight
    __del__ = lambda self : None;
Highlight_swigregister = _PDFNetPython2.Highlight_swigregister
Highlight_swigregister(Highlight)

class BorderStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BorderStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BorderStyle, name)
    __repr__ = _swig_repr
    e_solid = _PDFNetPython2.BorderStyle_e_solid
    e_dashed = _PDFNetPython2.BorderStyle_e_dashed
    e_beveled = _PDFNetPython2.BorderStyle_e_beveled
    e_inset = _PDFNetPython2.BorderStyle_e_inset
    e_underline = _PDFNetPython2.BorderStyle_e_underline
    __swig_destroy__ = _PDFNetPython2.delete_BorderStyle
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.BorderStyle_Destroy(self)
    def GetStyle(self): return _PDFNetPython2.BorderStyle_GetStyle(self)
    def SetStyle(self, *args): return _PDFNetPython2.BorderStyle_SetStyle(self, *args)
    def GetHR(self): return _PDFNetPython2.BorderStyle_GetHR(self)
    def SetHR(self, *args): return _PDFNetPython2.BorderStyle_SetHR(self, *args)
    def GetVR(self): return _PDFNetPython2.BorderStyle_GetVR(self)
    def SetVR(self, *args): return _PDFNetPython2.BorderStyle_SetVR(self, *args)
    def GetWidth(self): return _PDFNetPython2.BorderStyle_GetWidth(self)
    def SetWidth(self, *args): return _PDFNetPython2.BorderStyle_SetWidth(self, *args)
    def GetDash(self): return _PDFNetPython2.BorderStyle_GetDash(self)
    def SetDash(self, *args): return _PDFNetPython2.BorderStyle_SetDash(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_BorderStyle(*args)
        try: self.this.append(this)
        except: self.this = this
BorderStyle_swigregister = _PDFNetPython2.BorderStyle_swigregister
BorderStyle_swigregister(BorderStyle)

class Filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_Filter
    __del__ = lambda self : None;
    def __nonzero__(self):
        return _PDFNetPython2.Filter___nonzero__(self)
    __bool__ = __nonzero__


    def AttachFilter(self, *args): return _PDFNetPython2.Filter_AttachFilter(self, *args)
    def ReleaseAttachedFilter(self): return _PDFNetPython2.Filter_ReleaseAttachedFilter(self)
    def GetAttachedFilter(self): return _PDFNetPython2.Filter_GetAttachedFilter(self)
    def GetSourceFilter(self): return _PDFNetPython2.Filter_GetSourceFilter(self)
    def GetName(self): return _PDFNetPython2.Filter_GetName(self)
    def GetDecodeName(self): return _PDFNetPython2.Filter_GetDecodeName(self)
    def Size(self): return _PDFNetPython2.Filter_Size(self)
    def Consume(self, *args): return _PDFNetPython2.Filter_Consume(self, *args)
    def Count(self): return _PDFNetPython2.Filter_Count(self)
    def SetCount(self, *args): return _PDFNetPython2.Filter_SetCount(self, *args)
    def SetStreamLength(self, *args): return _PDFNetPython2.Filter_SetStreamLength(self, *args)
    def Flush(self): return _PDFNetPython2.Filter_Flush(self)
    def FlushAll(self): return _PDFNetPython2.Filter_FlushAll(self)
    def IsInputFilter(self): return _PDFNetPython2.Filter_IsInputFilter(self)
    def CanSeek(self): return _PDFNetPython2.Filter_CanSeek(self)
    e_begin = _PDFNetPython2.Filter_e_begin
    e_end = _PDFNetPython2.Filter_e_end
    e_cur = _PDFNetPython2.Filter_e_cur
    def Seek(self, *args): return _PDFNetPython2.Filter_Seek(self, *args)
    def Tell(self): return _PDFNetPython2.Filter_Tell(self)
    def CreateInputIterator(self): return _PDFNetPython2.Filter_CreateInputIterator(self)
    def GetFilePath(self): return _PDFNetPython2.Filter_GetFilePath(self)
    def Destroy(self): return _PDFNetPython2.Filter_Destroy(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython2.Filter_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython2.Filter_m_impl_get
    if _newclass:m_impl = _swig_property(_PDFNetPython2.Filter_m_impl_get, _PDFNetPython2.Filter_m_impl_set)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Filter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_owner"] = _PDFNetPython2.Filter_m_owner_set
    __swig_getmethods__["m_owner"] = _PDFNetPython2.Filter_m_owner_get
    if _newclass:m_owner = _swig_property(_PDFNetPython2.Filter_m_owner_get, _PDFNetPython2.Filter_m_owner_set)
Filter_swigregister = _PDFNetPython2.Filter_swigregister
Filter_swigregister(Filter)

class ASCII85Encode(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASCII85Encode, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ASCII85Encode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_ASCII85Encode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_ASCII85Encode
    __del__ = lambda self : None;
ASCII85Encode_swigregister = _PDFNetPython2.ASCII85Encode_swigregister
ASCII85Encode_swigregister(ASCII85Encode)

class FilterReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FilterReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_FilterReader
    __del__ = lambda self : None;
    def Get(self): return _PDFNetPython2.FilterReader_Get(self)
    def Peek(self): return _PDFNetPython2.FilterReader_Peek(self)
    def Read(self, *args): return _PDFNetPython2.FilterReader_Read(self, *args)
    def AttachFilter(self, *args): return _PDFNetPython2.FilterReader_AttachFilter(self, *args)
    def GetAttachedFilter(self): return _PDFNetPython2.FilterReader_GetAttachedFilter(self)
    def Seek(self, *args): return _PDFNetPython2.FilterReader_Seek(self, *args)
    def Tell(self): return _PDFNetPython2.FilterReader_Tell(self)
    def Count(self): return _PDFNetPython2.FilterReader_Count(self)
    def Flush(self): return _PDFNetPython2.FilterReader_Flush(self)
    def FlushAll(self): return _PDFNetPython2.FilterReader_FlushAll(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython2.FilterReader_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython2.FilterReader_m_impl_get
    if _newclass:m_impl = _swig_property(_PDFNetPython2.FilterReader_m_impl_get, _PDFNetPython2.FilterReader_m_impl_set)
FilterReader_swigregister = _PDFNetPython2.FilterReader_swigregister
FilterReader_swigregister(FilterReader)

class FilterWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FilterWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_FilterWriter
    __del__ = lambda self : None;
    def WriteUChar(self, *args): return _PDFNetPython2.FilterWriter_WriteUChar(self, *args)
    def WriteInt16(self, *args): return _PDFNetPython2.FilterWriter_WriteInt16(self, *args)
    def WriteUInt16(self, *args): return _PDFNetPython2.FilterWriter_WriteUInt16(self, *args)
    def WriteInt32(self, *args): return _PDFNetPython2.FilterWriter_WriteInt32(self, *args)
    def WriteUInt32(self, *args): return _PDFNetPython2.FilterWriter_WriteUInt32(self, *args)
    def WriteInt64(self, *args): return _PDFNetPython2.FilterWriter_WriteInt64(self, *args)
    def WriteUInt64(self, *args): return _PDFNetPython2.FilterWriter_WriteUInt64(self, *args)
    def WriteString(self, *args): return _PDFNetPython2.FilterWriter_WriteString(self, *args)
    def WriteFilter(self, *args): return _PDFNetPython2.FilterWriter_WriteFilter(self, *args)
    def WriteLine(self, *args): return _PDFNetPython2.FilterWriter_WriteLine(self, *args)
    def WriteBuffer(self, *args): return _PDFNetPython2.FilterWriter_WriteBuffer(self, *args)
    def AttachFilter(self, *args): return _PDFNetPython2.FilterWriter_AttachFilter(self, *args)
    def GetAttachedFilter(self): return _PDFNetPython2.FilterWriter_GetAttachedFilter(self)
    def Seek(self, *args): return _PDFNetPython2.FilterWriter_Seek(self, *args)
    def Tell(self): return _PDFNetPython2.FilterWriter_Tell(self)
    def Count(self): return _PDFNetPython2.FilterWriter_Count(self)
    def Flush(self): return _PDFNetPython2.FilterWriter_Flush(self)
    def FlushAll(self): return _PDFNetPython2.FilterWriter_FlushAll(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython2.FilterWriter_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython2.FilterWriter_m_impl_get
    if _newclass:m_impl = _swig_property(_PDFNetPython2.FilterWriter_m_impl_get, _PDFNetPython2.FilterWriter_m_impl_set)
FilterWriter_swigregister = _PDFNetPython2.FilterWriter_swigregister
FilterWriter_swigregister(FilterWriter)

class FlateEncode(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlateEncode, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlateEncode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FlateEncode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_FlateEncode
    __del__ = lambda self : None;
FlateEncode_swigregister = _PDFNetPython2.FlateEncode_swigregister
FlateEncode_swigregister(FlateEncode)

class StdFile(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdFile, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StdFile, name)
    __repr__ = _swig_repr
    e_read_mode = _PDFNetPython2.StdFile_e_read_mode
    e_write_mode = _PDFNetPython2.StdFile_e_write_mode
    e_append_mode = _PDFNetPython2.StdFile_e_append_mode
    def __init__(self, *args): 
        this = _PDFNetPython2.new_StdFile(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _PDFNetPython2.StdFile___eq__(self, *args)
    __swig_getmethods__["Equivalent"] = lambda x: _PDFNetPython2.StdFile_Equivalent
    if _newclass:Equivalent = staticmethod(_PDFNetPython2.StdFile_Equivalent)
    def FileSize(self): return _PDFNetPython2.StdFile_FileSize(self)
    __swig_destroy__ = _PDFNetPython2.delete_StdFile
    __del__ = lambda self : None;
StdFile_swigregister = _PDFNetPython2.StdFile_swigregister
StdFile_swigregister(StdFile)

def StdFile_Equivalent(*args):
  return _PDFNetPython2.StdFile_Equivalent(*args)
StdFile_Equivalent = _PDFNetPython2.StdFile_Equivalent

class DictIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DictIterator, name)
    __repr__ = _swig_repr
    def Next(self): return _PDFNetPython2.DictIterator_Next(self)
    def Key(self): return _PDFNetPython2.DictIterator_Key(self)
    def Value(self): return _PDFNetPython2.DictIterator_Value(self)
    def HasNext(self): return _PDFNetPython2.DictIterator_HasNext(self)
    __swig_destroy__ = _PDFNetPython2.delete_DictIterator
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.DictIterator_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_DictIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.DictIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.DictIterator_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.DictIterator_mp_impl_get, _PDFNetPython2.DictIterator_mp_impl_set)
DictIterator_swigregister = _PDFNetPython2.DictIterator_swigregister
DictIterator_swigregister(DictIterator)

class SDFDoc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDFDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDFDoc, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_SDFDoc
    __del__ = lambda self : None;
    def Close(self): return _PDFNetPython2.SDFDoc_Close(self)
    def IsEncrypted(self): return _PDFNetPython2.SDFDoc_IsEncrypted(self)
    def InitSecurityHandler(self): return _PDFNetPython2.SDFDoc_InitSecurityHandler(self)
    def InitStdSecurityHandler(self, *args): return _PDFNetPython2.SDFDoc_InitStdSecurityHandler(self, *args)
    def IsModified(self): return _PDFNetPython2.SDFDoc_IsModified(self)
    def IsFullSaveRequired(self): return _PDFNetPython2.SDFDoc_IsFullSaveRequired(self)
    def GetTrailer(self): return _PDFNetPython2.SDFDoc_GetTrailer(self)
    def GetObj(self, *args): return _PDFNetPython2.SDFDoc_GetObj(self, *args)
    def ImportObj(self, *args): return _PDFNetPython2.SDFDoc_ImportObj(self, *args)
    def ImportObjs(self, *args): return _PDFNetPython2.SDFDoc_ImportObjs(self, *args)
    def XRefSize(self): return _PDFNetPython2.SDFDoc_XRefSize(self)
    def ClearMarks(self): return _PDFNetPython2.SDFDoc_ClearMarks(self)
    e_incremental = _PDFNetPython2.SDFDoc_e_incremental
    e_remove_unused = _PDFNetPython2.SDFDoc_e_remove_unused
    e_hex_strings = _PDFNetPython2.SDFDoc_e_hex_strings
    e_omit_xref = _PDFNetPython2.SDFDoc_e_omit_xref
    e_linearized = _PDFNetPython2.SDFDoc_e_linearized
    e_compatibility = _PDFNetPython2.SDFDoc_e_compatibility
    def Save(self, *args): return _PDFNetPython2.SDFDoc_Save(self, *args)
    def GetHeader(self): return _PDFNetPython2.SDFDoc_GetHeader(self)
    def GetSecurityHandler(self): return _PDFNetPython2.SDFDoc_GetSecurityHandler(self)
    def SetSecurityHandler(self, *args): return _PDFNetPython2.SDFDoc_SetSecurityHandler(self, *args)
    def RemoveSecurity(self): return _PDFNetPython2.SDFDoc_RemoveSecurity(self)
    def Swap(self, *args): return _PDFNetPython2.SDFDoc_Swap(self, *args)
    def CreateIndirectName(self, *args): return _PDFNetPython2.SDFDoc_CreateIndirectName(self, *args)
    def CreateIndirectArray(self): return _PDFNetPython2.SDFDoc_CreateIndirectArray(self)
    def CreateIndirectBool(self, *args): return _PDFNetPython2.SDFDoc_CreateIndirectBool(self, *args)
    def CreateIndirectDict(self): return _PDFNetPython2.SDFDoc_CreateIndirectDict(self)
    def CreateIndirectNull(self): return _PDFNetPython2.SDFDoc_CreateIndirectNull(self)
    def CreateIndirectNumber(self, *args): return _PDFNetPython2.SDFDoc_CreateIndirectNumber(self, *args)
    def CreateIndirectString(self, *args): return _PDFNetPython2.SDFDoc_CreateIndirectString(self, *args)
    def CreateIndirectStream(self, *args): return _PDFNetPython2.SDFDoc_CreateIndirectStream(self, *args)
    def IsLinearized(self): return _PDFNetPython2.SDFDoc_IsLinearized(self)
    def GetLinearizationDict(self): return _PDFNetPython2.SDFDoc_GetLinearizationDict(self)
    def GetHintStream(self): return _PDFNetPython2.SDFDoc_GetHintStream(self)
    def Lock(self): return _PDFNetPython2.SDFDoc_Lock(self)
    def Unlock(self): return _PDFNetPython2.SDFDoc_Unlock(self)
    def IsLocked(self): return _PDFNetPython2.SDFDoc_IsLocked(self)
    def TryLock(self, milliseconds = 0): return _PDFNetPython2.SDFDoc_TryLock(self, milliseconds)
    def GetFileName(self): return _PDFNetPython2.SDFDoc_GetFileName(self)
    def EnableDiskCaching(self, *args): return _PDFNetPython2.SDFDoc_EnableDiskCaching(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_SDFDoc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_doc"] = _PDFNetPython2.SDFDoc_mp_doc_set
    __swig_getmethods__["mp_doc"] = _PDFNetPython2.SDFDoc_mp_doc_get
    if _newclass:mp_doc = _swig_property(_PDFNetPython2.SDFDoc_mp_doc_get, _PDFNetPython2.SDFDoc_mp_doc_set)
SDFDoc_swigregister = _PDFNetPython2.SDFDoc_swigregister
SDFDoc_swigregister(SDFDoc)

class NameTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NameTree, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.NameTree_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.NameTree_Create)
    __swig_getmethods__["Find"] = lambda x: _PDFNetPython2.NameTree_Find
    if _newclass:Find = staticmethod(_PDFNetPython2.NameTree_Find)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_NameTree(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self): return _PDFNetPython2.NameTree_IsValid(self)
    def GetIterator(self, *args): return _PDFNetPython2.NameTree_GetIterator(self, *args)
    def GetValue(self, *args): return _PDFNetPython2.NameTree_GetValue(self, *args)
    def Put(self, *args): return _PDFNetPython2.NameTree_Put(self, *args)
    def Erase(self, *args): return _PDFNetPython2.NameTree_Erase(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.NameTree_GetSDFObj(self)
    __swig_destroy__ = _PDFNetPython2.delete_NameTree
    __del__ = lambda self : None;
NameTree_swigregister = _PDFNetPython2.NameTree_swigregister
NameTree_swigregister(NameTree)

def NameTree_Create(*args):
  return _PDFNetPython2.NameTree_Create(*args)
NameTree_Create = _PDFNetPython2.NameTree_Create

def NameTree_Find(*args):
  return _PDFNetPython2.NameTree_Find(*args)
NameTree_Find = _PDFNetPython2.NameTree_Find

class NumberTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumberTree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_NumberTree(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self): return _PDFNetPython2.NumberTree_IsValid(self)
    def GetIterator(self, *args): return _PDFNetPython2.NumberTree_GetIterator(self, *args)
    def GetValue(self, *args): return _PDFNetPython2.NumberTree_GetValue(self, *args)
    def Put(self, *args): return _PDFNetPython2.NumberTree_Put(self, *args)
    def Erase(self, *args): return _PDFNetPython2.NumberTree_Erase(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.NumberTree_GetSDFObj(self)
    __swig_destroy__ = _PDFNetPython2.delete_NumberTree
    __del__ = lambda self : None;
NumberTree_swigregister = _PDFNetPython2.NumberTree_swigregister
NumberTree_swigregister(NumberTree)

class Obj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Obj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Obj, name)
    __repr__ = _swig_repr
    e_null = _PDFNetPython2.Obj_e_null
    e_bool = _PDFNetPython2.Obj_e_bool
    e_number = _PDFNetPython2.Obj_e_number
    e_name = _PDFNetPython2.Obj_e_name
    e_string = _PDFNetPython2.Obj_e_string
    e_dict = _PDFNetPython2.Obj_e_dict
    e_array = _PDFNetPython2.Obj_e_array
    e_stream = _PDFNetPython2.Obj_e_stream
    def GetType(self): return _PDFNetPython2.Obj_GetType(self)
    def IsBool(self): return _PDFNetPython2.Obj_IsBool(self)
    def IsNumber(self): return _PDFNetPython2.Obj_IsNumber(self)
    def IsNull(self): return _PDFNetPython2.Obj_IsNull(self)
    def IsString(self): return _PDFNetPython2.Obj_IsString(self)
    def IsName(self): return _PDFNetPython2.Obj_IsName(self)
    def IsIndirect(self): return _PDFNetPython2.Obj_IsIndirect(self)
    def IsContainer(self): return _PDFNetPython2.Obj_IsContainer(self)
    def IsDict(self): return _PDFNetPython2.Obj_IsDict(self)
    def IsArray(self): return _PDFNetPython2.Obj_IsArray(self)
    def IsStream(self): return _PDFNetPython2.Obj_IsStream(self)
    def GetDoc(self): return _PDFNetPython2.Obj_GetDoc(self)
    def Write(self, *args): return _PDFNetPython2.Obj_Write(self, *args)
    def Size(self): return _PDFNetPython2.Obj_Size(self)
    def GetObjNum(self): return _PDFNetPython2.Obj_GetObjNum(self)
    def GetGenNum(self): return _PDFNetPython2.Obj_GetGenNum(self)
    def GetOffset(self): return _PDFNetPython2.Obj_GetOffset(self)
    def IsFree(self): return _PDFNetPython2.Obj_IsFree(self)
    def SetMark(self, *args): return _PDFNetPython2.Obj_SetMark(self, *args)
    def IsMarked(self): return _PDFNetPython2.Obj_IsMarked(self)
    def IsLoaded(self): return _PDFNetPython2.Obj_IsLoaded(self)
    def GetBool(self): return _PDFNetPython2.Obj_GetBool(self)
    def SetBool(self, *args): return _PDFNetPython2.Obj_SetBool(self, *args)
    def GetNumber(self): return _PDFNetPython2.Obj_GetNumber(self)
    def SetNumber(self, *args): return _PDFNetPython2.Obj_SetNumber(self, *args)
    def GetBuffer(self): return _PDFNetPython2.Obj_GetBuffer(self)
    def GetAsPDFText(self): return _PDFNetPython2.Obj_GetAsPDFText(self)
    def SetString(self, *args): return _PDFNetPython2.Obj_SetString(self, *args)
    def GetName(self): return _PDFNetPython2.Obj_GetName(self)
    def SetName(self, *args): return _PDFNetPython2.Obj_SetName(self, *args)
    def GetDictIterator(self): return _PDFNetPython2.Obj_GetDictIterator(self)
    def Find(self, *args): return _PDFNetPython2.Obj_Find(self, *args)
    def FindObj(self, *args): return _PDFNetPython2.Obj_FindObj(self, *args)
    def Get(self, *args): return _PDFNetPython2.Obj_Get(self, *args)
    def PutName(self, *args): return _PDFNetPython2.Obj_PutName(self, *args)
    def PutArray(self, *args): return _PDFNetPython2.Obj_PutArray(self, *args)
    def PutBool(self, *args): return _PDFNetPython2.Obj_PutBool(self, *args)
    def PutDict(self, *args): return _PDFNetPython2.Obj_PutDict(self, *args)
    def PutNumber(self, *args): return _PDFNetPython2.Obj_PutNumber(self, *args)
    def PutString(self, *args): return _PDFNetPython2.Obj_PutString(self, *args)
    def PutText(self, *args): return _PDFNetPython2.Obj_PutText(self, *args)
    def PutNull(self, *args): return _PDFNetPython2.Obj_PutNull(self, *args)
    def Put(self, *args): return _PDFNetPython2.Obj_Put(self, *args)
    def PutRect(self, *args): return _PDFNetPython2.Obj_PutRect(self, *args)
    def PutMatrix(self, *args): return _PDFNetPython2.Obj_PutMatrix(self, *args)
    def Erase(self, *args): return _PDFNetPython2.Obj_Erase(self, *args)
    def Rename(self, *args): return _PDFNetPython2.Obj_Rename(self, *args)
    def GetAt(self, *args): return _PDFNetPython2.Obj_GetAt(self, *args)
    def InsertName(self, *args): return _PDFNetPython2.Obj_InsertName(self, *args)
    def InsertArray(self, *args): return _PDFNetPython2.Obj_InsertArray(self, *args)
    def InsertBool(self, *args): return _PDFNetPython2.Obj_InsertBool(self, *args)
    def InsertDict(self, *args): return _PDFNetPython2.Obj_InsertDict(self, *args)
    def InsertNumber(self, *args): return _PDFNetPython2.Obj_InsertNumber(self, *args)
    def InsertString(self, *args): return _PDFNetPython2.Obj_InsertString(self, *args)
    def InsertText(self, *args): return _PDFNetPython2.Obj_InsertText(self, *args)
    def InsertNull(self, *args): return _PDFNetPython2.Obj_InsertNull(self, *args)
    def Insert(self, *args): return _PDFNetPython2.Obj_Insert(self, *args)
    def InsertRect(self, *args): return _PDFNetPython2.Obj_InsertRect(self, *args)
    def InsertMatrix(self, *args): return _PDFNetPython2.Obj_InsertMatrix(self, *args)
    def PushBackName(self, *args): return _PDFNetPython2.Obj_PushBackName(self, *args)
    def PushBackArray(self): return _PDFNetPython2.Obj_PushBackArray(self)
    def PushBackBool(self, *args): return _PDFNetPython2.Obj_PushBackBool(self, *args)
    def PushBackDict(self): return _PDFNetPython2.Obj_PushBackDict(self)
    def PushBackNumber(self, *args): return _PDFNetPython2.Obj_PushBackNumber(self, *args)
    def PushBackString(self, *args): return _PDFNetPython2.Obj_PushBackString(self, *args)
    def PushBackText(self, *args): return _PDFNetPython2.Obj_PushBackText(self, *args)
    def PushBackNull(self): return _PDFNetPython2.Obj_PushBackNull(self)
    def PushBack(self, *args): return _PDFNetPython2.Obj_PushBack(self, *args)
    def PushBackRect(self, *args): return _PDFNetPython2.Obj_PushBackRect(self, *args)
    def PushBackMatrix(self, *args): return _PDFNetPython2.Obj_PushBackMatrix(self, *args)
    def EraseAt(self, *args): return _PDFNetPython2.Obj_EraseAt(self, *args)
    def GetRawStreamLength(self): return _PDFNetPython2.Obj_GetRawStreamLength(self)
    def GetRawStream(self, *args): return _PDFNetPython2.Obj_GetRawStream(self, *args)
    def GetDecodedStream(self): return _PDFNetPython2.Obj_GetDecodedStream(self)
    def SetStreamData(self, *args): return _PDFNetPython2.Obj_SetStreamData(self, *args)
    def __nonzero__(self):
        return _PDFNetPython2.Obj___nonzero__(self)
    __bool__ = __nonzero__


    def IsEqual(self, *args): return _PDFNetPython2.Obj_IsEqual(self, *args)
    def __eq__(self, *args): return _PDFNetPython2.Obj___eq__(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Obj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython2.Obj_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython2.Obj_mp_obj_get
    if _newclass:mp_obj = _swig_property(_PDFNetPython2.Obj_mp_obj_get, _PDFNetPython2.Obj_mp_obj_set)
    __swig_destroy__ = _PDFNetPython2.delete_Obj
    __del__ = lambda self : None;
Obj_swigregister = _PDFNetPython2.Obj_swigregister
Obj_swigregister(Obj)

class ObjSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_ObjSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_ObjSet
    __del__ = lambda self : None;
    def CreateName(self, *args): return _PDFNetPython2.ObjSet_CreateName(self, *args)
    def CreateArray(self): return _PDFNetPython2.ObjSet_CreateArray(self)
    def CreateBool(self, *args): return _PDFNetPython2.ObjSet_CreateBool(self, *args)
    def CreateDict(self): return _PDFNetPython2.ObjSet_CreateDict(self)
    def CreateNull(self): return _PDFNetPython2.ObjSet_CreateNull(self)
    def CreateNumber(self, *args): return _PDFNetPython2.ObjSet_CreateNumber(self, *args)
    def CreateString(self, *args): return _PDFNetPython2.ObjSet_CreateString(self, *args)
    def Destroy(self): return _PDFNetPython2.ObjSet_Destroy(self)
ObjSet_swigregister = _PDFNetPython2.ObjSet_swigregister
ObjSet_swigregister(ObjSet)

class SecurityHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityHandler, name)
    __repr__ = _swig_repr
    e_owner = _PDFNetPython2.SecurityHandler_e_owner
    e_doc_open = _PDFNetPython2.SecurityHandler_e_doc_open
    e_doc_modify = _PDFNetPython2.SecurityHandler_e_doc_modify
    e_print = _PDFNetPython2.SecurityHandler_e_print
    e_print_high = _PDFNetPython2.SecurityHandler_e_print_high
    e_extract_content = _PDFNetPython2.SecurityHandler_e_extract_content
    e_mod_annot = _PDFNetPython2.SecurityHandler_e_mod_annot
    e_fill_forms = _PDFNetPython2.SecurityHandler_e_fill_forms
    e_access_support = _PDFNetPython2.SecurityHandler_e_access_support
    e_assemble_doc = _PDFNetPython2.SecurityHandler_e_assemble_doc
    def GetPermission(self, *args): return _PDFNetPython2.SecurityHandler_GetPermission(self, *args)
    def GetKeyLength(self): return _PDFNetPython2.SecurityHandler_GetKeyLength(self)
    def GetEncryptionAlgorithmID(self): return _PDFNetPython2.SecurityHandler_GetEncryptionAlgorithmID(self)
    def GetHandlerDocName(self): return _PDFNetPython2.SecurityHandler_GetHandlerDocName(self)
    def IsModified(self): return _PDFNetPython2.SecurityHandler_IsModified(self)
    def SetModified(self, is_modified = True): return _PDFNetPython2.SecurityHandler_SetModified(self, is_modified)
    e_RC4_40 = _PDFNetPython2.SecurityHandler_e_RC4_40
    e_RC4_128 = _PDFNetPython2.SecurityHandler_e_RC4_128
    e_AES = _PDFNetPython2.SecurityHandler_e_AES
    __swig_destroy__ = _PDFNetPython2.delete_SecurityHandler
    __del__ = lambda self : None;
    def ChangeUserPassword(self, *args): return _PDFNetPython2.SecurityHandler_ChangeUserPassword(self, *args)
    def GetUserPassword(self): return _PDFNetPython2.SecurityHandler_GetUserPassword(self)
    def GetUserPasswordSize(self): return _PDFNetPython2.SecurityHandler_GetUserPasswordSize(self)
    def ChangeMasterPassword(self, *args): return _PDFNetPython2.SecurityHandler_ChangeMasterPassword(self, *args)
    def GetMasterPassword(self): return _PDFNetPython2.SecurityHandler_GetMasterPassword(self)
    def GetMasterPasswordSize(self): return _PDFNetPython2.SecurityHandler_GetMasterPasswordSize(self)
    def SetPermission(self, *args): return _PDFNetPython2.SecurityHandler_SetPermission(self, *args)
    def ChangeRevisionNumber(self, *args): return _PDFNetPython2.SecurityHandler_ChangeRevisionNumber(self, *args)
    def SetEncryptMetadata(self, *args): return _PDFNetPython2.SecurityHandler_SetEncryptMetadata(self, *args)
    def GetRevisionNumber(self): return _PDFNetPython2.SecurityHandler_GetRevisionNumber(self)
    def IsUserPasswordRequired(self): return _PDFNetPython2.SecurityHandler_IsUserPasswordRequired(self)
    def IsMasterPasswordRequired(self): return _PDFNetPython2.SecurityHandler_IsMasterPasswordRequired(self)
    def IsAES(self, *args): return _PDFNetPython2.SecurityHandler_IsAES(self, *args)
    def IsRC4(self): return _PDFNetPython2.SecurityHandler_IsRC4(self)
    def __nonzero__(self):
        return _PDFNetPython2.SecurityHandler___nonzero__(self)
    __bool__ = __nonzero__


    def AuthorizeFailed(self): return _PDFNetPython2.SecurityHandler_AuthorizeFailed(self)
    def Authorize(self, *args): return _PDFNetPython2.SecurityHandler_Authorize(self, *args)
    def GetAuthorizationData(self, *args): return _PDFNetPython2.SecurityHandler_GetAuthorizationData(self, *args)
    def EditSecurityData(self, *args): return _PDFNetPython2.SecurityHandler_EditSecurityData(self, *args)
    def FillEncryptDict(self, *args): return _PDFNetPython2.SecurityHandler_FillEncryptDict(self, *args)
    def Clone(self, *args): return _PDFNetPython2.SecurityHandler_Clone(self, *args)
    def InitPassword(self, *args): return _PDFNetPython2.SecurityHandler_InitPassword(self, *args)
    has_CloneProc = _PDFNetPython2.SecurityHandler_has_CloneProc
    has_AuthProc = _PDFNetPython2.SecurityHandler_has_AuthProc
    has_AuthFailedProc = _PDFNetPython2.SecurityHandler_has_AuthFailedProc
    has_GetAuthDataProc = _PDFNetPython2.SecurityHandler_has_GetAuthDataProc
    has_EditSecurDataProc = _PDFNetPython2.SecurityHandler_has_EditSecurDataProc
    has_FillEncDictProc = _PDFNetPython2.SecurityHandler_has_FillEncDictProc
    def SetDerived(self, *args): return _PDFNetPython2.SecurityHandler_SetDerived(self, *args)
    def GetDerived(self): return _PDFNetPython2.SecurityHandler_GetDerived(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_SecurityHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_handler"] = _PDFNetPython2.SecurityHandler_mp_handler_set
    __swig_getmethods__["mp_handler"] = _PDFNetPython2.SecurityHandler_mp_handler_get
    if _newclass:mp_handler = _swig_property(_PDFNetPython2.SecurityHandler_mp_handler_get, _PDFNetPython2.SecurityHandler_mp_handler_set)
    __swig_setmethods__["m_owner"] = _PDFNetPython2.SecurityHandler_m_owner_set
    __swig_getmethods__["m_owner"] = _PDFNetPython2.SecurityHandler_m_owner_get
    if _newclass:m_owner = _swig_property(_PDFNetPython2.SecurityHandler_m_owner_get, _PDFNetPython2.SecurityHandler_m_owner_set)
    __swig_setmethods__["m_derived_procs"] = _PDFNetPython2.SecurityHandler_m_derived_procs_set
    __swig_getmethods__["m_derived_procs"] = _PDFNetPython2.SecurityHandler_m_derived_procs_get
    if _newclass:m_derived_procs = _swig_property(_PDFNetPython2.SecurityHandler_m_derived_procs_get, _PDFNetPython2.SecurityHandler_m_derived_procs_set)
SecurityHandler_swigregister = _PDFNetPython2.SecurityHandler_swigregister
SecurityHandler_swigregister(SecurityHandler)

class Point(TRN_point):
    __swig_setmethods__ = {}
    for _s in [TRN_point]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_point]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Point
    __del__ = lambda self : None;
Point_swigregister = _PDFNetPython2.Point_swigregister
Point_swigregister(Point)

class Function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_Function
    __del__ = lambda self : None;
    e_sampled = _PDFNetPython2.Function_e_sampled
    e_exponential = _PDFNetPython2.Function_e_exponential
    e_stitching = _PDFNetPython2.Function_e_stitching
    e_postscript = _PDFNetPython2.Function_e_postscript
    def GetType(self): return _PDFNetPython2.Function_GetType(self)
    def GetInputCardinality(self): return _PDFNetPython2.Function_GetInputCardinality(self)
    def GetOutputCardinality(self): return _PDFNetPython2.Function_GetOutputCardinality(self)
    def Eval(self, *args): return _PDFNetPython2.Function_Eval(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.Function_GetSDFObj(self)
    def Destroy(self): return _PDFNetPython2.Function_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Function(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_func"] = _PDFNetPython2.Function_mp_func_set
    __swig_getmethods__["mp_func"] = _PDFNetPython2.Function_mp_func_get
    if _newclass:mp_func = _swig_property(_PDFNetPython2.Function_mp_func_get, _PDFNetPython2.Function_mp_func_set)
Function_swigregister = _PDFNetPython2.Function_swigregister
Function_swigregister(Function)

class ColorPt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorPt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorPt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_ColorPt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_ColorPt
    __del__ = lambda self : None;
    def __eq__(self, *args): return _PDFNetPython2.ColorPt___eq__(self, *args)
    def Set(self, *args): return _PDFNetPython2.ColorPt_Set(self, *args)
    def Get(self, *args): return _PDFNetPython2.ColorPt_Get(self, *args)
    def SetColorantNum(self, *args): return _PDFNetPython2.ColorPt_SetColorantNum(self, *args)
    def Destroy(self): return _PDFNetPython2.ColorPt_Destroy(self)
    __swig_setmethods__["m_c"] = _PDFNetPython2.ColorPt_m_c_set
    __swig_getmethods__["m_c"] = _PDFNetPython2.ColorPt_m_c_get
    if _newclass:m_c = _swig_property(_PDFNetPython2.ColorPt_m_c_get, _PDFNetPython2.ColorPt_m_c_set)
ColorPt_swigregister = _PDFNetPython2.ColorPt_swigregister
ColorPt_swigregister(ColorPt)

class ColorSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorSpace, name)
    __repr__ = _swig_repr
    __swig_getmethods__["CreateDeviceGray"] = lambda x: _PDFNetPython2.ColorSpace_CreateDeviceGray
    if _newclass:CreateDeviceGray = staticmethod(_PDFNetPython2.ColorSpace_CreateDeviceGray)
    __swig_getmethods__["CreateDeviceRGB"] = lambda x: _PDFNetPython2.ColorSpace_CreateDeviceRGB
    if _newclass:CreateDeviceRGB = staticmethod(_PDFNetPython2.ColorSpace_CreateDeviceRGB)
    __swig_getmethods__["CreateDeviceCMYK"] = lambda x: _PDFNetPython2.ColorSpace_CreateDeviceCMYK
    if _newclass:CreateDeviceCMYK = staticmethod(_PDFNetPython2.ColorSpace_CreateDeviceCMYK)
    __swig_getmethods__["CreatePattern"] = lambda x: _PDFNetPython2.ColorSpace_CreatePattern
    if _newclass:CreatePattern = staticmethod(_PDFNetPython2.ColorSpace_CreatePattern)
    __swig_getmethods__["CreateICC"] = lambda x: _PDFNetPython2.ColorSpace_CreateICC
    if _newclass:CreateICC = staticmethod(_PDFNetPython2.ColorSpace_CreateICC)
    __swig_destroy__ = _PDFNetPython2.delete_ColorSpace
    __del__ = lambda self : None;
    e_device_gray = _PDFNetPython2.ColorSpace_e_device_gray
    e_device_rgb = _PDFNetPython2.ColorSpace_e_device_rgb
    e_device_cmyk = _PDFNetPython2.ColorSpace_e_device_cmyk
    e_cal_gray = _PDFNetPython2.ColorSpace_e_cal_gray
    e_cal_rgb = _PDFNetPython2.ColorSpace_e_cal_rgb
    e_lab = _PDFNetPython2.ColorSpace_e_lab
    e_icc = _PDFNetPython2.ColorSpace_e_icc
    e_indexed = _PDFNetPython2.ColorSpace_e_indexed
    e_pattern = _PDFNetPython2.ColorSpace_e_pattern
    e_separation = _PDFNetPython2.ColorSpace_e_separation
    e_device_n = _PDFNetPython2.ColorSpace_e_device_n
    e_null = _PDFNetPython2.ColorSpace_e_null
    def GetType(self): return _PDFNetPython2.ColorSpace_GetType(self)
    def GetSDFObj(self): return _PDFNetPython2.ColorSpace_GetSDFObj(self)
    def GetComponentNum(self): return _PDFNetPython2.ColorSpace_GetComponentNum(self)
    def InitColor(self, *args): return _PDFNetPython2.ColorSpace_InitColor(self, *args)
    def InitComponentRanges(self, *args): return _PDFNetPython2.ColorSpace_InitComponentRanges(self, *args)
    def Convert2Gray(self, *args): return _PDFNetPython2.ColorSpace_Convert2Gray(self, *args)
    def Convert2RGB(self, *args): return _PDFNetPython2.ColorSpace_Convert2RGB(self, *args)
    def Convert2CMYK(self, *args): return _PDFNetPython2.ColorSpace_Convert2CMYK(self, *args)
    def GetAlternateColorSpace(self): return _PDFNetPython2.ColorSpace_GetAlternateColorSpace(self)
    def GetBaseColorSpace(self): return _PDFNetPython2.ColorSpace_GetBaseColorSpace(self)
    def GetHighVal(self): return _PDFNetPython2.ColorSpace_GetHighVal(self)
    def GetBaseColor(self, *args): return _PDFNetPython2.ColorSpace_GetBaseColor(self, *args)
    def IsNone(self): return _PDFNetPython2.ColorSpace_IsNone(self)
    def IsAll(self): return _PDFNetPython2.ColorSpace_IsAll(self)
    def GetTintFunction(self): return _PDFNetPython2.ColorSpace_GetTintFunction(self)
    def Destroy(self): return _PDFNetPython2.ColorSpace_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_ColorSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_cs"] = _PDFNetPython2.ColorSpace_mp_cs_set
    __swig_getmethods__["mp_cs"] = _PDFNetPython2.ColorSpace_mp_cs_get
    if _newclass:mp_cs = _swig_property(_PDFNetPython2.ColorSpace_mp_cs_get, _PDFNetPython2.ColorSpace_mp_cs_set)
ColorSpace_swigregister = _PDFNetPython2.ColorSpace_swigregister
ColorSpace_swigregister(ColorSpace)

def ColorSpace_CreateDeviceGray():
  return _PDFNetPython2.ColorSpace_CreateDeviceGray()
ColorSpace_CreateDeviceGray = _PDFNetPython2.ColorSpace_CreateDeviceGray

def ColorSpace_CreateDeviceRGB():
  return _PDFNetPython2.ColorSpace_CreateDeviceRGB()
ColorSpace_CreateDeviceRGB = _PDFNetPython2.ColorSpace_CreateDeviceRGB

def ColorSpace_CreateDeviceCMYK():
  return _PDFNetPython2.ColorSpace_CreateDeviceCMYK()
ColorSpace_CreateDeviceCMYK = _PDFNetPython2.ColorSpace_CreateDeviceCMYK

def ColorSpace_CreatePattern():
  return _PDFNetPython2.ColorSpace_CreatePattern()
ColorSpace_CreatePattern = _PDFNetPython2.ColorSpace_CreatePattern

def ColorSpace_CreateICC(*args):
  return _PDFNetPython2.ColorSpace_CreateICC(*args)
ColorSpace_CreateICC = _PDFNetPython2.ColorSpace_CreateICC

class Rect(TRN_rect):
    __swig_setmethods__ = {}
    for _s in [TRN_rect]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_rect]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Rect(*args)
        try: self.this.append(this)
        except: self.this = this
    def Attach(self, *args): return _PDFNetPython2.Rect_Attach(self, *args)
    def Update(self, *args): return _PDFNetPython2.Rect_Update(self, *args)
    def Set(self, *args): return _PDFNetPython2.Rect_Set(self, *args)
    def Width(self): return _PDFNetPython2.Rect_Width(self)
    def Height(self): return _PDFNetPython2.Rect_Height(self)
    def Contains(self, *args): return _PDFNetPython2.Rect_Contains(self, *args)
    def IntersectRect(self, *args): return _PDFNetPython2.Rect_IntersectRect(self, *args)
    def Normalize(self): return _PDFNetPython2.Rect_Normalize(self)
    def Inflate(self, *args): return _PDFNetPython2.Rect_Inflate(self, *args)
    def GetX1(self): return _PDFNetPython2.Rect_GetX1(self)
    def GetY1(self): return _PDFNetPython2.Rect_GetY1(self)
    def GetX2(self): return _PDFNetPython2.Rect_GetX2(self)
    def GetY2(self): return _PDFNetPython2.Rect_GetY2(self)
    def SetX1(self, *args): return _PDFNetPython2.Rect_SetX1(self, *args)
    def SetY1(self, *args): return _PDFNetPython2.Rect_SetY1(self, *args)
    def SetX2(self, *args): return _PDFNetPython2.Rect_SetX2(self, *args)
    def SetY2(self, *args): return _PDFNetPython2.Rect_SetY2(self, *args)
    __swig_destroy__ = _PDFNetPython2.delete_Rect
    __del__ = lambda self : None;
Rect_swigregister = _PDFNetPython2.Rect_swigregister
Rect_swigregister(Rect)

class Page(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Page, name)
    __repr__ = _swig_repr
    def IsValid(self): return _PDFNetPython2.Page_IsValid(self)
    def GetIndex(self): return _PDFNetPython2.Page_GetIndex(self)
    e_media = _PDFNetPython2.Page_e_media
    e_crop = _PDFNetPython2.Page_e_crop
    e_bleed = _PDFNetPython2.Page_e_bleed
    e_trim = _PDFNetPython2.Page_e_trim
    e_art = _PDFNetPython2.Page_e_art
    def GetBox(self, *args): return _PDFNetPython2.Page_GetBox(self, *args)
    def SetBox(self, *args): return _PDFNetPython2.Page_SetBox(self, *args)
    def GetCropBox(self): return _PDFNetPython2.Page_GetCropBox(self)
    def SetCropBox(self, *args): return _PDFNetPython2.Page_SetCropBox(self, *args)
    def GetMediaBox(self): return _PDFNetPython2.Page_GetMediaBox(self)
    def SetMediaBox(self, *args): return _PDFNetPython2.Page_SetMediaBox(self, *args)
    def GetVisibleContentBox(self): return _PDFNetPython2.Page_GetVisibleContentBox(self)
    e_0 = _PDFNetPython2.Page_e_0
    e_90 = _PDFNetPython2.Page_e_90
    e_180 = _PDFNetPython2.Page_e_180
    e_270 = _PDFNetPython2.Page_e_270
    def GetRotation(self): return _PDFNetPython2.Page_GetRotation(self)
    def SetRotation(self, *args): return _PDFNetPython2.Page_SetRotation(self, *args)
    def GetPageWidth(self, *args): return _PDFNetPython2.Page_GetPageWidth(self, *args)
    def GetPageHeight(self, *args): return _PDFNetPython2.Page_GetPageHeight(self, *args)
    def GetDefaultMatrix(self, *args): return _PDFNetPython2.Page_GetDefaultMatrix(self, *args)
    def GetAnnots(self): return _PDFNetPython2.Page_GetAnnots(self)
    def GetNumAnnots(self): return _PDFNetPython2.Page_GetNumAnnots(self)
    def GetAnnot(self, *args): return _PDFNetPython2.Page_GetAnnot(self, *args)
    def AnnotInsert(self, *args): return _PDFNetPython2.Page_AnnotInsert(self, *args)
    def AnnotPushBack(self, *args): return _PDFNetPython2.Page_AnnotPushBack(self, *args)
    def AnnotPushFront(self, *args): return _PDFNetPython2.Page_AnnotPushFront(self, *args)
    def AnnotRemove(self, *args): return _PDFNetPython2.Page_AnnotRemove(self, *args)
    def Scale(self, *args): return _PDFNetPython2.Page_Scale(self, *args)
    def FlattenField(self, *args): return _PDFNetPython2.Page_FlattenField(self, *args)
    def HasTransition(self): return _PDFNetPython2.Page_HasTransition(self)
    def GetUserUnitSize(self): return _PDFNetPython2.Page_GetUserUnitSize(self)
    def SetUserUnitSize(self, *args): return _PDFNetPython2.Page_SetUserUnitSize(self, *args)
    def GetResourceDict(self): return _PDFNetPython2.Page_GetResourceDict(self)
    def GetContents(self): return _PDFNetPython2.Page_GetContents(self)
    def GetSDFObj(self): return _PDFNetPython2.Page_GetSDFObj(self)
    def FindInheritedAttribute(self, *args): return _PDFNetPython2.Page_FindInheritedAttribute(self, *args)
    def __nonzero__(self):
        return _PDFNetPython2.Page___nonzero__(self)
    __bool__ = __nonzero__


    def GetThumb(self): return _PDFNetPython2.Page_GetThumb(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Page(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_page"] = _PDFNetPython2.Page_mp_page_set
    __swig_getmethods__["mp_page"] = _PDFNetPython2.Page_mp_page_get
    if _newclass:mp_page = _swig_property(_PDFNetPython2.Page_mp_page_get, _PDFNetPython2.Page_mp_page_set)
    __swig_destroy__ = _PDFNetPython2.delete_Page
    __del__ = lambda self : None;
Page_swigregister = _PDFNetPython2.Page_swigregister
Page_swigregister(Page)

class Date(TRN_date):
    __swig_setmethods__ = {}
    for _s in [TRN_date]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_date]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Date(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self): return _PDFNetPython2.Date_IsValid(self)
    def SetCurrentTime(self): return _PDFNetPython2.Date_SetCurrentTime(self)
    def Attach(self, *args): return _PDFNetPython2.Date_Attach(self, *args)
    def Update(self, d = None): return _PDFNetPython2.Date_Update(self, d)
    def GetYear(self): return _PDFNetPython2.Date_GetYear(self)
    def GetMonth(self): return _PDFNetPython2.Date_GetMonth(self)
    def GetDay(self): return _PDFNetPython2.Date_GetDay(self)
    def GetHour(self): return _PDFNetPython2.Date_GetHour(self)
    def GetMinute(self): return _PDFNetPython2.Date_GetMinute(self)
    def GetSecond(self): return _PDFNetPython2.Date_GetSecond(self)
    def GetUT(self): return _PDFNetPython2.Date_GetUT(self)
    def GetUTHour(self): return _PDFNetPython2.Date_GetUTHour(self)
    def GetUTMin(self): return _PDFNetPython2.Date_GetUTMin(self)
    __swig_destroy__ = _PDFNetPython2.delete_Date
    __del__ = lambda self : None;
Date_swigregister = _PDFNetPython2.Date_swigregister
Date_swigregister(Date)

class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_Field
    __del__ = lambda self : None;
    def IsValid(self): return _PDFNetPython2.Field_IsValid(self)
    e_button = _PDFNetPython2.Field_e_button
    e_check = _PDFNetPython2.Field_e_check
    e_radio = _PDFNetPython2.Field_e_radio
    e_text = _PDFNetPython2.Field_e_text
    e_choice = _PDFNetPython2.Field_e_choice
    e_signature = _PDFNetPython2.Field_e_signature
    e_null = _PDFNetPython2.Field_e_null
    def GetType(self): return _PDFNetPython2.Field_GetType(self)
    def GetValue(self): return _PDFNetPython2.Field_GetValue(self)
    def GetValueAsString(self): return _PDFNetPython2.Field_GetValueAsString(self)
    def GetValueAsBool(self): return _PDFNetPython2.Field_GetValueAsBool(self)
    def SetValue(self, *args): return _PDFNetPython2.Field_SetValue(self, *args)
    def RefreshAppearance(self): return _PDFNetPython2.Field_RefreshAppearance(self)
    def EraseAppearance(self): return _PDFNetPython2.Field_EraseAppearance(self)
    def GetDefaultValue(self): return _PDFNetPython2.Field_GetDefaultValue(self)
    def GetDefaultValueAsString(self): return _PDFNetPython2.Field_GetDefaultValueAsString(self)
    def GetName(self): return _PDFNetPython2.Field_GetName(self)
    def GetPartialName(self): return _PDFNetPython2.Field_GetPartialName(self)
    def Rename(self, *args): return _PDFNetPython2.Field_Rename(self, *args)
    def IsAnnot(self): return _PDFNetPython2.Field_IsAnnot(self)
    e_read_only = _PDFNetPython2.Field_e_read_only
    e_required = _PDFNetPython2.Field_e_required
    e_no_export = _PDFNetPython2.Field_e_no_export
    e_pushbutton_flag = _PDFNetPython2.Field_e_pushbutton_flag
    e_radio_flag = _PDFNetPython2.Field_e_radio_flag
    e_toggle_to_off = _PDFNetPython2.Field_e_toggle_to_off
    e_radios_in_unison = _PDFNetPython2.Field_e_radios_in_unison
    e_multiline = _PDFNetPython2.Field_e_multiline
    e_password = _PDFNetPython2.Field_e_password
    e_file_select = _PDFNetPython2.Field_e_file_select
    e_no_spellcheck = _PDFNetPython2.Field_e_no_spellcheck
    e_no_scroll = _PDFNetPython2.Field_e_no_scroll
    e_comb = _PDFNetPython2.Field_e_comb
    e_rich_text = _PDFNetPython2.Field_e_rich_text
    e_combo = _PDFNetPython2.Field_e_combo
    e_edit = _PDFNetPython2.Field_e_edit
    e_sort = _PDFNetPython2.Field_e_sort
    e_multiselect = _PDFNetPython2.Field_e_multiselect
    e_commit_on_sel_change = _PDFNetPython2.Field_e_commit_on_sel_change
    def GetFlag(self, *args): return _PDFNetPython2.Field_GetFlag(self, *args)
    def SetFlag(self, *args): return _PDFNetPython2.Field_SetFlag(self, *args)
    e_left_justified = _PDFNetPython2.Field_e_left_justified
    e_centered = _PDFNetPython2.Field_e_centered
    e_right_justified = _PDFNetPython2.Field_e_right_justified
    def GetJustification(self): return _PDFNetPython2.Field_GetJustification(self)
    def SetJustification(self, *args): return _PDFNetPython2.Field_SetJustification(self, *args)
    def SetMaxLen(self, *args): return _PDFNetPython2.Field_SetMaxLen(self, *args)
    def GetMaxLen(self): return _PDFNetPython2.Field_GetMaxLen(self)
    def GetDefaultAppearance(self): return _PDFNetPython2.Field_GetDefaultAppearance(self)
    def Flatten(self, *args): return _PDFNetPython2.Field_Flatten(self, *args)
    def GetUpdateRect(self): return _PDFNetPython2.Field_GetUpdateRect(self)
    def FindInheritedAttribute(self, *args): return _PDFNetPython2.Field_FindInheritedAttribute(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.Field_GetSDFObj(self)
    def __nonzero__(self):
        return _PDFNetPython2.Field___nonzero__(self)
    __bool__ = __nonzero__


    def Destroy(self): return _PDFNetPython2.Field_Destroy(self)
    def UseSignatureHandler(self, *args): return _PDFNetPython2.Field_UseSignatureHandler(self, *args)
    __swig_setmethods__["mp_field"] = _PDFNetPython2.Field_mp_field_set
    __swig_getmethods__["mp_field"] = _PDFNetPython2.Field_mp_field_get
    if _newclass:mp_field = _swig_property(_PDFNetPython2.Field_mp_field_get, _PDFNetPython2.Field_mp_field_set)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Field(*args)
        try: self.this.append(this)
        except: self.this = this
Field_swigregister = _PDFNetPython2.Field_swigregister
Field_swigregister(Field)

class FileSpec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSpec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileSpec, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.FileSpec_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.FileSpec_Create)
    __swig_getmethods__["CreateURL"] = lambda x: _PDFNetPython2.FileSpec_CreateURL
    if _newclass:CreateURL = staticmethod(_PDFNetPython2.FileSpec_CreateURL)
    def __eq__(self, *args): return _PDFNetPython2.FileSpec___eq__(self, *args)
    def IsValid(self): return _PDFNetPython2.FileSpec_IsValid(self)
    def Export(self, save_as = ""): return _PDFNetPython2.FileSpec_Export(self, save_as)
    def GetFileData(self): return _PDFNetPython2.FileSpec_GetFileData(self)
    def GetFilePath(self): return _PDFNetPython2.FileSpec_GetFilePath(self)
    def SetDesc(self, *args): return _PDFNetPython2.FileSpec_SetDesc(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.FileSpec_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FileSpec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.FileSpec_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.FileSpec_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.FileSpec_mp_impl_get, _PDFNetPython2.FileSpec_mp_impl_set)
    __swig_destroy__ = _PDFNetPython2.delete_FileSpec
    __del__ = lambda self : None;
FileSpec_swigregister = _PDFNetPython2.FileSpec_swigregister
FileSpec_swigregister(FileSpec)

def FileSpec_Create(*args):
  return _PDFNetPython2.FileSpec_Create(*args)
FileSpec_Create = _PDFNetPython2.FileSpec_Create

def FileSpec_CreateURL(*args):
  return _PDFNetPython2.FileSpec_CreateURL(*args)
FileSpec_CreateURL = _PDFNetPython2.FileSpec_CreateURL

class Annot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Annot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Annot, name)
    __repr__ = _swig_repr
    e_Text = _PDFNetPython2.Annot_e_Text
    e_Link = _PDFNetPython2.Annot_e_Link
    e_FreeText = _PDFNetPython2.Annot_e_FreeText
    e_Line = _PDFNetPython2.Annot_e_Line
    e_Square = _PDFNetPython2.Annot_e_Square
    e_Circle = _PDFNetPython2.Annot_e_Circle
    e_Polygon = _PDFNetPython2.Annot_e_Polygon
    e_Polyline = _PDFNetPython2.Annot_e_Polyline
    e_Highlight = _PDFNetPython2.Annot_e_Highlight
    e_Underline = _PDFNetPython2.Annot_e_Underline
    e_Squiggly = _PDFNetPython2.Annot_e_Squiggly
    e_StrikeOut = _PDFNetPython2.Annot_e_StrikeOut
    e_Stamp = _PDFNetPython2.Annot_e_Stamp
    e_Caret = _PDFNetPython2.Annot_e_Caret
    e_Ink = _PDFNetPython2.Annot_e_Ink
    e_Popup = _PDFNetPython2.Annot_e_Popup
    e_FileAttachment = _PDFNetPython2.Annot_e_FileAttachment
    e_Sound = _PDFNetPython2.Annot_e_Sound
    e_Movie = _PDFNetPython2.Annot_e_Movie
    e_Widget = _PDFNetPython2.Annot_e_Widget
    e_Screen = _PDFNetPython2.Annot_e_Screen
    e_PrinterMark = _PDFNetPython2.Annot_e_PrinterMark
    e_TrapNet = _PDFNetPython2.Annot_e_TrapNet
    e_Watermark = _PDFNetPython2.Annot_e_Watermark
    e_3D = _PDFNetPython2.Annot_e_3D
    e_Redact = _PDFNetPython2.Annot_e_Redact
    e_Projection = _PDFNetPython2.Annot_e_Projection
    e_RichMedia = _PDFNetPython2.Annot_e_RichMedia
    e_Unknown = _PDFNetPython2.Annot_e_Unknown
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Annot_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Annot_Create)
    def __eq__(self, *args): return _PDFNetPython2.Annot___eq__(self, *args)
    def IsValid(self): return _PDFNetPython2.Annot_IsValid(self)
    def GetSDFObj(self): return _PDFNetPython2.Annot_GetSDFObj(self)
    def GetType(self): return _PDFNetPython2.Annot_GetType(self)
    def GetRect(self): return _PDFNetPython2.Annot_GetRect(self)
    def IsMarkup(self): return _PDFNetPython2.Annot_IsMarkup(self)
    def SetRect(self, *args): return _PDFNetPython2.Annot_SetRect(self, *args)
    def GetPage(self): return _PDFNetPython2.Annot_GetPage(self)
    def SetPage(self, *args): return _PDFNetPython2.Annot_SetPage(self, *args)
    def GetUniqueID(self): return _PDFNetPython2.Annot_GetUniqueID(self)
    def SetUniqueID(self, *args): return _PDFNetPython2.Annot_SetUniqueID(self, *args)
    def GetDate(self): return _PDFNetPython2.Annot_GetDate(self)
    def SetDate(self, *args): return _PDFNetPython2.Annot_SetDate(self, *args)
    e_invisible = _PDFNetPython2.Annot_e_invisible
    e_hidden = _PDFNetPython2.Annot_e_hidden
    e_print = _PDFNetPython2.Annot_e_print
    e_no_zoom = _PDFNetPython2.Annot_e_no_zoom
    e_no_rotate = _PDFNetPython2.Annot_e_no_rotate
    e_no_view = _PDFNetPython2.Annot_e_no_view
    e_read_only = _PDFNetPython2.Annot_e_read_only
    e_locked = _PDFNetPython2.Annot_e_locked
    e_toggle_no_view = _PDFNetPython2.Annot_e_toggle_no_view
    e_locked_contents = _PDFNetPython2.Annot_e_locked_contents
    def GetFlag(self, *args): return _PDFNetPython2.Annot_GetFlag(self, *args)
    def SetFlag(self, *args): return _PDFNetPython2.Annot_SetFlag(self, *args)
    def GetBorderStyle(self): return _PDFNetPython2.Annot_GetBorderStyle(self)
    def SetBorderStyle(self, *args): return _PDFNetPython2.Annot_SetBorderStyle(self, *args)
    e_normal = _PDFNetPython2.Annot_e_normal
    e_rollover = _PDFNetPython2.Annot_e_rollover
    e_down = _PDFNetPython2.Annot_e_down
    def GetAppearance(self, *args): return _PDFNetPython2.Annot_GetAppearance(self, *args)
    def SetAppearance(self, *args): return _PDFNetPython2.Annot_SetAppearance(self, *args)
    def RemoveAppearance(self, *args): return _PDFNetPython2.Annot_RemoveAppearance(self, *args)
    def Flatten(self, *args): return _PDFNetPython2.Annot_Flatten(self, *args)
    def GetActiveAppearanceState(self): return _PDFNetPython2.Annot_GetActiveAppearanceState(self)
    def SetActiveAppearanceState(self, *args): return _PDFNetPython2.Annot_SetActiveAppearanceState(self, *args)
    def GetColorAsRGB(self): return _PDFNetPython2.Annot_GetColorAsRGB(self)
    def GetColorAsCMYK(self): return _PDFNetPython2.Annot_GetColorAsCMYK(self)
    def GetColorAsGray(self): return _PDFNetPython2.Annot_GetColorAsGray(self)
    def GetColorCompNum(self): return _PDFNetPython2.Annot_GetColorCompNum(self)
    def SetColor(self, *args): return _PDFNetPython2.Annot_SetColor(self, *args)
    def GetStructParent(self): return _PDFNetPython2.Annot_GetStructParent(self)
    def SetStructParent(self, *args): return _PDFNetPython2.Annot_SetStructParent(self, *args)
    def GetOptionalContent(self): return _PDFNetPython2.Annot_GetOptionalContent(self)
    def SetOptionalContent(self, *args): return _PDFNetPython2.Annot_SetOptionalContent(self, *args)
    def SetContents(self, *args): return _PDFNetPython2.Annot_SetContents(self, *args)
    def GetContents(self): return _PDFNetPython2.Annot_GetContents(self)
    def RefreshAppearance(self): return _PDFNetPython2.Annot_RefreshAppearance(self)
    def Resize(self, *args): return _PDFNetPython2.Annot_Resize(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Annot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_annot"] = _PDFNetPython2.Annot_mp_annot_set
    __swig_getmethods__["mp_annot"] = _PDFNetPython2.Annot_mp_annot_get
    if _newclass:mp_annot = _swig_property(_PDFNetPython2.Annot_mp_annot_get, _PDFNetPython2.Annot_mp_annot_set)
    __swig_destroy__ = _PDFNetPython2.delete_Annot
    __del__ = lambda self : None;
Annot_swigregister = _PDFNetPython2.Annot_swigregister
Annot_swigregister(Annot)

def Annot_Create(*args):
  return _PDFNetPython2.Annot_Create(*args)
Annot_Create = _PDFNetPython2.Annot_Create

class Popup(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Popup, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Popup, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Popup_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Popup_Create)
    def GetParent(self): return _PDFNetPython2.Popup_GetParent(self)
    def SetParent(self, *args): return _PDFNetPython2.Popup_SetParent(self, *args)
    def IsOpen(self): return _PDFNetPython2.Popup_IsOpen(self)
    def SetOpen(self, *args): return _PDFNetPython2.Popup_SetOpen(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Popup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Popup
    __del__ = lambda self : None;
Popup_swigregister = _PDFNetPython2.Popup_swigregister
Popup_swigregister(Popup)

def Popup_Create(*args):
  return _PDFNetPython2.Popup_Create(*args)
Popup_Create = _PDFNetPython2.Popup_Create

class Markup(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Markup, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Markup, name)
    __repr__ = _swig_repr
    def GetTitle(self): return _PDFNetPython2.Markup_GetTitle(self)
    def SetTitle(self, *args): return _PDFNetPython2.Markup_SetTitle(self, *args)
    def GetPopup(self): return _PDFNetPython2.Markup_GetPopup(self)
    def SetPopup(self, *args): return _PDFNetPython2.Markup_SetPopup(self, *args)
    def GetOpacity(self): return _PDFNetPython2.Markup_GetOpacity(self)
    def SetOpacity(self, *args): return _PDFNetPython2.Markup_SetOpacity(self, *args)
    def GetSubject(self): return _PDFNetPython2.Markup_GetSubject(self)
    def SetSubject(self, *args): return _PDFNetPython2.Markup_SetSubject(self, *args)
    def GetCreationDates(self): return _PDFNetPython2.Markup_GetCreationDates(self)
    def SetCreationDates(self, *args): return _PDFNetPython2.Markup_SetCreationDates(self, *args)
    e_None = _PDFNetPython2.Markup_e_None
    e_Cloudy = _PDFNetPython2.Markup_e_Cloudy
    def GetBorderEffect(self): return _PDFNetPython2.Markup_GetBorderEffect(self)
    def SetBorderEffect(self, *args): return _PDFNetPython2.Markup_SetBorderEffect(self, *args)
    def GetBorderEffectIntensity(self): return _PDFNetPython2.Markup_GetBorderEffectIntensity(self)
    def SetBorderEffectIntensity(self, intensity = 0): return _PDFNetPython2.Markup_SetBorderEffectIntensity(self, intensity)
    def GetInteriorColor(self): return _PDFNetPython2.Markup_GetInteriorColor(self)
    def GetInteriorColorCompNum(self): return _PDFNetPython2.Markup_GetInteriorColorCompNum(self)
    def SetInteriorColor(self, *args): return _PDFNetPython2.Markup_SetInteriorColor(self, *args)
    def GetContentRect(self): return _PDFNetPython2.Markup_GetContentRect(self)
    def SetContentRect(self, *args): return _PDFNetPython2.Markup_SetContentRect(self, *args)
    def GetPadding(self): return _PDFNetPython2.Markup_GetPadding(self)
    def SetPadding(self, *args): return _PDFNetPython2.Markup_SetPadding(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Markup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Markup
    __del__ = lambda self : None;
Markup_swigregister = _PDFNetPython2.Markup_swigregister
Markup_swigregister(Markup)

class FileAttachment(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileAttachment, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileAttachment, name)
    __repr__ = _swig_repr
    e_Graph = _PDFNetPython2.FileAttachment_e_Graph
    e_PushPin = _PDFNetPython2.FileAttachment_e_PushPin
    e_Paperclip = _PDFNetPython2.FileAttachment_e_Paperclip
    e_Tag = _PDFNetPython2.FileAttachment_e_Tag
    e_Unknown = _PDFNetPython2.FileAttachment_e_Unknown
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.FileAttachment_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.FileAttachment_Create)
    def GetFileSpec(self): return _PDFNetPython2.FileAttachment_GetFileSpec(self)
    def SetFileSpec(self, *args): return _PDFNetPython2.FileAttachment_SetFileSpec(self, *args)
    def Export(self, save_as = ""): return _PDFNetPython2.FileAttachment_Export(self, save_as)
    def GetIcon(self): return _PDFNetPython2.FileAttachment_GetIcon(self)
    def SetIcon(self, *args): return _PDFNetPython2.FileAttachment_SetIcon(self, *args)
    def GetIconName(self): return _PDFNetPython2.FileAttachment_GetIconName(self)
    def SetIconName(self, *args): return _PDFNetPython2.FileAttachment_SetIconName(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FileAttachment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_FileAttachment
    __del__ = lambda self : None;
FileAttachment_swigregister = _PDFNetPython2.FileAttachment_swigregister
FileAttachment_swigregister(FileAttachment)

def FileAttachment_Create(*args):
  return _PDFNetPython2.FileAttachment_Create(*args)
FileAttachment_Create = _PDFNetPython2.FileAttachment_Create

class QuadPoint(TRN_quadpoint):
    __swig_setmethods__ = {}
    for _s in [TRN_quadpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_quadpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_QuadPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_QuadPoint
    __del__ = lambda self : None;
QuadPoint_swigregister = _PDFNetPython2.QuadPoint_swigregister
QuadPoint_swigregister(QuadPoint)

class TextMarkup(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextMarkup, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextMarkup, name)
    __repr__ = _swig_repr
    def GetQuadPointCount(self): return _PDFNetPython2.TextMarkup_GetQuadPointCount(self)
    def GetQuadPoint(self, *args): return _PDFNetPython2.TextMarkup_GetQuadPoint(self, *args)
    def SetQuadPoint(self, *args): return _PDFNetPython2.TextMarkup_SetQuadPoint(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_TextMarkup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TextMarkup
    __del__ = lambda self : None;
TextMarkup_swigregister = _PDFNetPython2.TextMarkup_swigregister
TextMarkup_swigregister(TextMarkup)

class Ink(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ink, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ink, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Ink_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Ink_Create)
    def GetPathCount(self): return _PDFNetPython2.Ink_GetPathCount(self)
    def GetPointCount(self, *args): return _PDFNetPython2.Ink_GetPointCount(self, *args)
    def GetPoint(self, *args): return _PDFNetPython2.Ink_GetPoint(self, *args)
    def SetPoint(self, *args): return _PDFNetPython2.Ink_SetPoint(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Ink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Ink
    __del__ = lambda self : None;
Ink_swigregister = _PDFNetPython2.Ink_swigregister
Ink_swigregister(Ink)

def Ink_Create(*args):
  return _PDFNetPython2.Ink_Create(*args)
Ink_Create = _PDFNetPython2.Ink_Create

class Destination(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Destination, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Destination, name)
    __repr__ = _swig_repr
    e_XYZ = _PDFNetPython2.Destination_e_XYZ
    e_Fit = _PDFNetPython2.Destination_e_Fit
    e_FitH = _PDFNetPython2.Destination_e_FitH
    e_FitV = _PDFNetPython2.Destination_e_FitV
    e_FitR = _PDFNetPython2.Destination_e_FitR
    e_FitB = _PDFNetPython2.Destination_e_FitB
    e_FitBH = _PDFNetPython2.Destination_e_FitBH
    e_FitBV = _PDFNetPython2.Destination_e_FitBV
    __swig_getmethods__["CreateXYZ"] = lambda x: _PDFNetPython2.Destination_CreateXYZ
    if _newclass:CreateXYZ = staticmethod(_PDFNetPython2.Destination_CreateXYZ)
    __swig_getmethods__["CreateFit"] = lambda x: _PDFNetPython2.Destination_CreateFit
    if _newclass:CreateFit = staticmethod(_PDFNetPython2.Destination_CreateFit)
    __swig_getmethods__["CreateFitH"] = lambda x: _PDFNetPython2.Destination_CreateFitH
    if _newclass:CreateFitH = staticmethod(_PDFNetPython2.Destination_CreateFitH)
    __swig_getmethods__["CreateFitV"] = lambda x: _PDFNetPython2.Destination_CreateFitV
    if _newclass:CreateFitV = staticmethod(_PDFNetPython2.Destination_CreateFitV)
    __swig_getmethods__["CreateFitR"] = lambda x: _PDFNetPython2.Destination_CreateFitR
    if _newclass:CreateFitR = staticmethod(_PDFNetPython2.Destination_CreateFitR)
    __swig_getmethods__["CreateFitB"] = lambda x: _PDFNetPython2.Destination_CreateFitB
    if _newclass:CreateFitB = staticmethod(_PDFNetPython2.Destination_CreateFitB)
    __swig_getmethods__["CreateFitBH"] = lambda x: _PDFNetPython2.Destination_CreateFitBH
    if _newclass:CreateFitBH = staticmethod(_PDFNetPython2.Destination_CreateFitBH)
    __swig_getmethods__["CreateFitBV"] = lambda x: _PDFNetPython2.Destination_CreateFitBV
    if _newclass:CreateFitBV = staticmethod(_PDFNetPython2.Destination_CreateFitBV)
    def IsValid(self): return _PDFNetPython2.Destination_IsValid(self)
    def GetFitType(self): return _PDFNetPython2.Destination_GetFitType(self)
    def GetPage(self): return _PDFNetPython2.Destination_GetPage(self)
    def SetPage(self, *args): return _PDFNetPython2.Destination_SetPage(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.Destination_GetSDFObj(self)
    def GetExplicitDestObj(self): return _PDFNetPython2.Destination_GetExplicitDestObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Destination(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_dest"] = _PDFNetPython2.Destination_mp_dest_set
    __swig_getmethods__["mp_dest"] = _PDFNetPython2.Destination_mp_dest_get
    if _newclass:mp_dest = _swig_property(_PDFNetPython2.Destination_mp_dest_get, _PDFNetPython2.Destination_mp_dest_set)
    __swig_destroy__ = _PDFNetPython2.delete_Destination
    __del__ = lambda self : None;
Destination_swigregister = _PDFNetPython2.Destination_swigregister
Destination_swigregister(Destination)

def Destination_CreateXYZ(*args):
  return _PDFNetPython2.Destination_CreateXYZ(*args)
Destination_CreateXYZ = _PDFNetPython2.Destination_CreateXYZ

def Destination_CreateFit(*args):
  return _PDFNetPython2.Destination_CreateFit(*args)
Destination_CreateFit = _PDFNetPython2.Destination_CreateFit

def Destination_CreateFitH(*args):
  return _PDFNetPython2.Destination_CreateFitH(*args)
Destination_CreateFitH = _PDFNetPython2.Destination_CreateFitH

def Destination_CreateFitV(*args):
  return _PDFNetPython2.Destination_CreateFitV(*args)
Destination_CreateFitV = _PDFNetPython2.Destination_CreateFitV

def Destination_CreateFitR(*args):
  return _PDFNetPython2.Destination_CreateFitR(*args)
Destination_CreateFitR = _PDFNetPython2.Destination_CreateFitR

def Destination_CreateFitB(*args):
  return _PDFNetPython2.Destination_CreateFitB(*args)
Destination_CreateFitB = _PDFNetPython2.Destination_CreateFitB

def Destination_CreateFitBH(*args):
  return _PDFNetPython2.Destination_CreateFitBH(*args)
Destination_CreateFitBH = _PDFNetPython2.Destination_CreateFitBH

def Destination_CreateFitBV(*args):
  return _PDFNetPython2.Destination_CreateFitBV(*args)
Destination_CreateFitBV = _PDFNetPython2.Destination_CreateFitBV

class Action(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    __swig_getmethods__["CreateGoto"] = lambda x: _PDFNetPython2.Action_CreateGoto
    if _newclass:CreateGoto = staticmethod(_PDFNetPython2.Action_CreateGoto)
    __swig_getmethods__["CreateGotoRemote"] = lambda x: _PDFNetPython2.Action_CreateGotoRemote
    if _newclass:CreateGotoRemote = staticmethod(_PDFNetPython2.Action_CreateGotoRemote)
    __swig_getmethods__["CreateURI"] = lambda x: _PDFNetPython2.Action_CreateURI
    if _newclass:CreateURI = staticmethod(_PDFNetPython2.Action_CreateURI)
    __swig_getmethods__["CreateSubmitForm"] = lambda x: _PDFNetPython2.Action_CreateSubmitForm
    if _newclass:CreateSubmitForm = staticmethod(_PDFNetPython2.Action_CreateSubmitForm)
    __swig_getmethods__["CreateLaunch"] = lambda x: _PDFNetPython2.Action_CreateLaunch
    if _newclass:CreateLaunch = staticmethod(_PDFNetPython2.Action_CreateLaunch)
    __swig_getmethods__["CreateHideField"] = lambda x: _PDFNetPython2.Action_CreateHideField
    if _newclass:CreateHideField = staticmethod(_PDFNetPython2.Action_CreateHideField)
    __swig_getmethods__["CreateImportData"] = lambda x: _PDFNetPython2.Action_CreateImportData
    if _newclass:CreateImportData = staticmethod(_PDFNetPython2.Action_CreateImportData)
    __swig_getmethods__["CreateResetForm"] = lambda x: _PDFNetPython2.Action_CreateResetForm
    if _newclass:CreateResetForm = staticmethod(_PDFNetPython2.Action_CreateResetForm)
    __swig_getmethods__["CreateJavaScript"] = lambda x: _PDFNetPython2.Action_CreateJavaScript
    if _newclass:CreateJavaScript = staticmethod(_PDFNetPython2.Action_CreateJavaScript)
    def __eq__(self, *args): return _PDFNetPython2.Action___eq__(self, *args)
    def IsValid(self): return _PDFNetPython2.Action_IsValid(self)
    e_GoTo = _PDFNetPython2.Action_e_GoTo
    e_GoToR = _PDFNetPython2.Action_e_GoToR
    e_GoToE = _PDFNetPython2.Action_e_GoToE
    e_Launch = _PDFNetPython2.Action_e_Launch
    e_Thread = _PDFNetPython2.Action_e_Thread
    e_URI = _PDFNetPython2.Action_e_URI
    e_Sound = _PDFNetPython2.Action_e_Sound
    e_Movie = _PDFNetPython2.Action_e_Movie
    e_Hide = _PDFNetPython2.Action_e_Hide
    e_Named = _PDFNetPython2.Action_e_Named
    e_SubmitForm = _PDFNetPython2.Action_e_SubmitForm
    e_ResetForm = _PDFNetPython2.Action_e_ResetForm
    e_ImportData = _PDFNetPython2.Action_e_ImportData
    e_JavaScript = _PDFNetPython2.Action_e_JavaScript
    e_SetOCGState = _PDFNetPython2.Action_e_SetOCGState
    e_Rendition = _PDFNetPython2.Action_e_Rendition
    e_Trans = _PDFNetPython2.Action_e_Trans
    e_GoTo3DView = _PDFNetPython2.Action_e_GoTo3DView
    e_RichMediaExecute = _PDFNetPython2.Action_e_RichMediaExecute
    e_Unknown = _PDFNetPython2.Action_e_Unknown
    def GetType(self): return _PDFNetPython2.Action_GetType(self)
    def Execute(self): return _PDFNetPython2.Action_Execute(self)
    def GetNext(self): return _PDFNetPython2.Action_GetNext(self)
    def GetDest(self): return _PDFNetPython2.Action_GetDest(self)
    e_exclude = _PDFNetPython2.Action_e_exclude
    e_include_no_value_fields = _PDFNetPython2.Action_e_include_no_value_fields
    e_export_format = _PDFNetPython2.Action_e_export_format
    e_get_method = _PDFNetPython2.Action_e_get_method
    e_submit_coordinates = _PDFNetPython2.Action_e_submit_coordinates
    e_xfdf = _PDFNetPython2.Action_e_xfdf
    e_include_append_saves = _PDFNetPython2.Action_e_include_append_saves
    e_include_annotations = _PDFNetPython2.Action_e_include_annotations
    e_submit_pdf = _PDFNetPython2.Action_e_submit_pdf
    e_canonical_format = _PDFNetPython2.Action_e_canonical_format
    e_excl_non_user_annots = _PDFNetPython2.Action_e_excl_non_user_annots
    e_excl_F_key = _PDFNetPython2.Action_e_excl_F_key
    e_embed_form = _PDFNetPython2.Action_e_embed_form
    def GetFormActionFlag(self, *args): return _PDFNetPython2.Action_GetFormActionFlag(self, *args)
    def SetFormActionFlag(self, *args): return _PDFNetPython2.Action_SetFormActionFlag(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.Action_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Action(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_action"] = _PDFNetPython2.Action_mp_action_set
    __swig_getmethods__["mp_action"] = _PDFNetPython2.Action_mp_action_get
    if _newclass:mp_action = _swig_property(_PDFNetPython2.Action_mp_action_get, _PDFNetPython2.Action_mp_action_set)
    __swig_destroy__ = _PDFNetPython2.delete_Action
    __del__ = lambda self : None;
Action_swigregister = _PDFNetPython2.Action_swigregister
Action_swigregister(Action)

def Action_CreateGoto(*args):
  return _PDFNetPython2.Action_CreateGoto(*args)
Action_CreateGoto = _PDFNetPython2.Action_CreateGoto

def Action_CreateGotoRemote(*args):
  return _PDFNetPython2.Action_CreateGotoRemote(*args)
Action_CreateGotoRemote = _PDFNetPython2.Action_CreateGotoRemote

def Action_CreateURI(*args):
  return _PDFNetPython2.Action_CreateURI(*args)
Action_CreateURI = _PDFNetPython2.Action_CreateURI

def Action_CreateSubmitForm(*args):
  return _PDFNetPython2.Action_CreateSubmitForm(*args)
Action_CreateSubmitForm = _PDFNetPython2.Action_CreateSubmitForm

def Action_CreateLaunch(*args):
  return _PDFNetPython2.Action_CreateLaunch(*args)
Action_CreateLaunch = _PDFNetPython2.Action_CreateLaunch

def Action_CreateHideField(*args):
  return _PDFNetPython2.Action_CreateHideField(*args)
Action_CreateHideField = _PDFNetPython2.Action_CreateHideField

def Action_CreateImportData(*args):
  return _PDFNetPython2.Action_CreateImportData(*args)
Action_CreateImportData = _PDFNetPython2.Action_CreateImportData

def Action_CreateResetForm(*args):
  return _PDFNetPython2.Action_CreateResetForm(*args)
Action_CreateResetForm = _PDFNetPython2.Action_CreateResetForm

def Action_CreateJavaScript(*args):
  return _PDFNetPython2.Action_CreateJavaScript(*args)
Action_CreateJavaScript = _PDFNetPython2.Action_CreateJavaScript

class FDFField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDFField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDFField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FDFField(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetValue(self): return _PDFNetPython2.FDFField_GetValue(self)
    def SetValue(self, *args): return _PDFNetPython2.FDFField_SetValue(self, *args)
    def GetName(self): return _PDFNetPython2.FDFField_GetName(self)
    def GetPartialName(self): return _PDFNetPython2.FDFField_GetPartialName(self)
    def GetSDFObj(self): return _PDFNetPython2.FDFField_GetSDFObj(self)
    def FindAttribute(self, *args): return _PDFNetPython2.FDFField_FindAttribute(self, *args)
    def __nonzero__(self):
        return _PDFNetPython2.FDFField___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _PDFNetPython2.delete_FDFField
    __del__ = lambda self : None;
FDFField_swigregister = _PDFNetPython2.FDFField_swigregister
FDFField_swigregister(FDFField)

class FDFDoc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDFDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDFDoc, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_FDFDoc
    __del__ = lambda self : None;
    def Close(self): return _PDFNetPython2.FDFDoc_Close(self)
    def IsModified(self): return _PDFNetPython2.FDFDoc_IsModified(self)
    def Save(self, *args): return _PDFNetPython2.FDFDoc_Save(self, *args)
    def GetTrailer(self): return _PDFNetPython2.FDFDoc_GetTrailer(self)
    def GetRoot(self): return _PDFNetPython2.FDFDoc_GetRoot(self)
    def GetFDF(self): return _PDFNetPython2.FDFDoc_GetFDF(self)
    def GetPDFFileName(self): return _PDFNetPython2.FDFDoc_GetPDFFileName(self)
    def SetPDFFileName(self, *args): return _PDFNetPython2.FDFDoc_SetPDFFileName(self, *args)
    def GetID(self): return _PDFNetPython2.FDFDoc_GetID(self)
    def SetID(self, *args): return _PDFNetPython2.FDFDoc_SetID(self, *args)
    def GetFieldIterator(self, *args): return _PDFNetPython2.FDFDoc_GetFieldIterator(self, *args)
    def GetField(self, *args): return _PDFNetPython2.FDFDoc_GetField(self, *args)
    def FieldCreate(self, *args): return _PDFNetPython2.FDFDoc_FieldCreate(self, *args)
    def GetSDFDoc(self): return _PDFNetPython2.FDFDoc_GetSDFDoc(self)
    __swig_getmethods__["CreateFromXFDF"] = lambda x: _PDFNetPython2.FDFDoc_CreateFromXFDF
    if _newclass:CreateFromXFDF = staticmethod(_PDFNetPython2.FDFDoc_CreateFromXFDF)
    def SaveAsXFDF(self, *args): return _PDFNetPython2.FDFDoc_SaveAsXFDF(self, *args)
    def MergeAnnots(self, *args): return _PDFNetPython2.FDFDoc_MergeAnnots(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FDFDoc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_doc"] = _PDFNetPython2.FDFDoc_mp_doc_set
    __swig_getmethods__["mp_doc"] = _PDFNetPython2.FDFDoc_mp_doc_get
    if _newclass:mp_doc = _swig_property(_PDFNetPython2.FDFDoc_mp_doc_get, _PDFNetPython2.FDFDoc_mp_doc_set)
FDFDoc_swigregister = _PDFNetPython2.FDFDoc_swigregister
FDFDoc_swigregister(FDFDoc)

def FDFDoc_CreateFromXFDF(*args):
  return _PDFNetPython2.FDFDoc_CreateFromXFDF(*args)
FDFDoc_CreateFromXFDF = _PDFNetPython2.FDFDoc_CreateFromXFDF

class Caret(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Caret, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Caret, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Caret_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Caret_Create)
    def GetSymbol(self): return _PDFNetPython2.Caret_GetSymbol(self)
    def SetSymbol(self, *args): return _PDFNetPython2.Caret_SetSymbol(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Caret(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Caret
    __del__ = lambda self : None;
Caret_swigregister = _PDFNetPython2.Caret_swigregister
Caret_swigregister(Caret)

def Caret_Create(*args):
  return _PDFNetPython2.Caret_Create(*args)
Caret_Create = _PDFNetPython2.Caret_Create

class Circle(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Circle_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Circle_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Circle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Circle
    __del__ = lambda self : None;
Circle_swigregister = _PDFNetPython2.Circle_swigregister
Circle_swigregister(Circle)

def Circle_Create(*args):
  return _PDFNetPython2.Circle_Create(*args)
Circle_Create = _PDFNetPython2.Circle_Create

class HighlightAnnot(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighlightAnnot, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighlightAnnot, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.HighlightAnnot_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.HighlightAnnot_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_HighlightAnnot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_HighlightAnnot
    __del__ = lambda self : None;
HighlightAnnot_swigregister = _PDFNetPython2.HighlightAnnot_swigregister
HighlightAnnot_swigregister(HighlightAnnot)

def HighlightAnnot_Create(*args):
  return _PDFNetPython2.HighlightAnnot_Create(*args)
HighlightAnnot_Create = _PDFNetPython2.HighlightAnnot_Create

class LineAnnot(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineAnnot, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineAnnot, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.LineAnnot_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.LineAnnot_Create)
    def GetStartPoint(self): return _PDFNetPython2.LineAnnot_GetStartPoint(self)
    def SetStartPoint(self, *args): return _PDFNetPython2.LineAnnot_SetStartPoint(self, *args)
    def GetEndPoint(self): return _PDFNetPython2.LineAnnot_GetEndPoint(self)
    def SetEndPoint(self, *args): return _PDFNetPython2.LineAnnot_SetEndPoint(self, *args)
    e_Square = _PDFNetPython2.LineAnnot_e_Square
    e_Circle = _PDFNetPython2.LineAnnot_e_Circle
    e_Diamond = _PDFNetPython2.LineAnnot_e_Diamond
    e_OpenArrow = _PDFNetPython2.LineAnnot_e_OpenArrow
    e_ClosedArrow = _PDFNetPython2.LineAnnot_e_ClosedArrow
    e_Butt = _PDFNetPython2.LineAnnot_e_Butt
    e_ROpenArrow = _PDFNetPython2.LineAnnot_e_ROpenArrow
    e_RClosedArrow = _PDFNetPython2.LineAnnot_e_RClosedArrow
    e_Slash = _PDFNetPython2.LineAnnot_e_Slash
    e_None = _PDFNetPython2.LineAnnot_e_None
    e_Unknown = _PDFNetPython2.LineAnnot_e_Unknown
    def GetStartStyle(self): return _PDFNetPython2.LineAnnot_GetStartStyle(self)
    def SetStartStyle(self, *args): return _PDFNetPython2.LineAnnot_SetStartStyle(self, *args)
    def GetEndStyle(self): return _PDFNetPython2.LineAnnot_GetEndStyle(self)
    def SetEndStyle(self, *args): return _PDFNetPython2.LineAnnot_SetEndStyle(self, *args)
    def GetLeaderLineLength(self): return _PDFNetPython2.LineAnnot_GetLeaderLineLength(self)
    def SetLeaderLineLength(self, *args): return _PDFNetPython2.LineAnnot_SetLeaderLineLength(self, *args)
    def GetLeaderLineExtensionLength(self): return _PDFNetPython2.LineAnnot_GetLeaderLineExtensionLength(self)
    def SetLeaderLineExtensionLength(self, *args): return _PDFNetPython2.LineAnnot_SetLeaderLineExtensionLength(self, *args)
    def GetShowCaption(self): return _PDFNetPython2.LineAnnot_GetShowCaption(self)
    def SetShowCaption(self, *args): return _PDFNetPython2.LineAnnot_SetShowCaption(self, *args)
    e_LineArrow = _PDFNetPython2.LineAnnot_e_LineArrow
    e_LineDimension = _PDFNetPython2.LineAnnot_e_LineDimension
    e_null = _PDFNetPython2.LineAnnot_e_null
    def GetIntentType(self): return _PDFNetPython2.LineAnnot_GetIntentType(self)
    def SetIntentType(self, *args): return _PDFNetPython2.LineAnnot_SetIntentType(self, *args)
    def GetLeaderLineOffset(self): return _PDFNetPython2.LineAnnot_GetLeaderLineOffset(self)
    def SetLeaderLineOffset(self, *args): return _PDFNetPython2.LineAnnot_SetLeaderLineOffset(self, *args)
    e_Inline = _PDFNetPython2.LineAnnot_e_Inline
    e_Top = _PDFNetPython2.LineAnnot_e_Top
    def GetCaptionPosition(self): return _PDFNetPython2.LineAnnot_GetCaptionPosition(self)
    def SetCaptionPosition(self, *args): return _PDFNetPython2.LineAnnot_SetCaptionPosition(self, *args)
    def GetTextHOffset(self): return _PDFNetPython2.LineAnnot_GetTextHOffset(self)
    def SetTextHOffset(self, *args): return _PDFNetPython2.LineAnnot_SetTextHOffset(self, *args)
    def GetTextVOffset(self): return _PDFNetPython2.LineAnnot_GetTextVOffset(self)
    def SetTextVOffset(self, *args): return _PDFNetPython2.LineAnnot_SetTextVOffset(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_LineAnnot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_LineAnnot
    __del__ = lambda self : None;
LineAnnot_swigregister = _PDFNetPython2.LineAnnot_swigregister
LineAnnot_swigregister(LineAnnot)

def LineAnnot_Create(*args):
  return _PDFNetPython2.LineAnnot_Create(*args)
LineAnnot_Create = _PDFNetPython2.LineAnnot_Create

class FreeText(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreeText, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreeText, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.FreeText_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.FreeText_Create)
    def GetDefaultAppearance(self): return _PDFNetPython2.FreeText_GetDefaultAppearance(self)
    def SetDefaultAppearance(self, *args): return _PDFNetPython2.FreeText_SetDefaultAppearance(self, *args)
    def GetQuaddingFormat(self): return _PDFNetPython2.FreeText_GetQuaddingFormat(self)
    def SetQuaddingFormat(self, *args): return _PDFNetPython2.FreeText_SetQuaddingFormat(self, *args)
    def GetCalloutLinePoint1(self): return _PDFNetPython2.FreeText_GetCalloutLinePoint1(self)
    def GetCalloutLinePoint2(self): return _PDFNetPython2.FreeText_GetCalloutLinePoint2(self)
    def GetCalloutLinePoint3(self): return _PDFNetPython2.FreeText_GetCalloutLinePoint3(self)
    def SetCalloutLinePoints(self, *args): return _PDFNetPython2.FreeText_SetCalloutLinePoints(self, *args)
    e_FreeText = _PDFNetPython2.FreeText_e_FreeText
    e_FreeTextCallout = _PDFNetPython2.FreeText_e_FreeTextCallout
    e_FreeTextTypeWriter = _PDFNetPython2.FreeText_e_FreeTextTypeWriter
    e_Unknown = _PDFNetPython2.FreeText_e_Unknown
    def GetIntentName(self): return _PDFNetPython2.FreeText_GetIntentName(self)
    def SetIntentName(self, *args): return _PDFNetPython2.FreeText_SetIntentName(self, *args)
    def GetEndingStyle(self): return _PDFNetPython2.FreeText_GetEndingStyle(self)
    def SetEndingStyle(self, *args): return _PDFNetPython2.FreeText_SetEndingStyle(self, *args)
    def SetTextColor(self, *args): return _PDFNetPython2.FreeText_SetTextColor(self, *args)
    def GetTextColor(self): return _PDFNetPython2.FreeText_GetTextColor(self)
    def GetTextColorCompNum(self): return _PDFNetPython2.FreeText_GetTextColorCompNum(self)
    def SetLineColor(self, *args): return _PDFNetPython2.FreeText_SetLineColor(self, *args)
    def GetLineColor(self): return _PDFNetPython2.FreeText_GetLineColor(self)
    def GetLineColorCompNum(self): return _PDFNetPython2.FreeText_GetLineColorCompNum(self)
    def SetFontSize(self, *args): return _PDFNetPython2.FreeText_SetFontSize(self, *args)
    def GetFontSize(self): return _PDFNetPython2.FreeText_GetFontSize(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_FreeText(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_FreeText
    __del__ = lambda self : None;
FreeText_swigregister = _PDFNetPython2.FreeText_swigregister
FreeText_swigregister(FreeText)

def FreeText_Create(*args):
  return _PDFNetPython2.FreeText_Create(*args)
FreeText_Create = _PDFNetPython2.FreeText_Create

class Link(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Link, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Link, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Link_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Link_Create)
    def RemoveAction(self): return _PDFNetPython2.Link_RemoveAction(self)
    def GetAction(self): return _PDFNetPython2.Link_GetAction(self)
    def SetAction(self, *args): return _PDFNetPython2.Link_SetAction(self, *args)
    e_none = _PDFNetPython2.Link_e_none
    e_invert = _PDFNetPython2.Link_e_invert
    e_outline = _PDFNetPython2.Link_e_outline
    e_push = _PDFNetPython2.Link_e_push
    def GetHighlightingMode(self): return _PDFNetPython2.Link_GetHighlightingMode(self)
    def SetHighlightingMode(self, *args): return _PDFNetPython2.Link_SetHighlightingMode(self, *args)
    def GetQuadPointCount(self): return _PDFNetPython2.Link_GetQuadPointCount(self)
    def GetQuadPoint(self, *args): return _PDFNetPython2.Link_GetQuadPoint(self, *args)
    def SetQuadPoint(self, *args): return _PDFNetPython2.Link_SetQuadPoint(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Link(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Link
    __del__ = lambda self : None;
Link_swigregister = _PDFNetPython2.Link_swigregister
Link_swigregister(Link)

def Link_Create(*args):
  return _PDFNetPython2.Link_Create(*args)
Link_Create = _PDFNetPython2.Link_Create

class Movie(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Movie, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Movie, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Movie_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Movie_Create)
    def GetTitle(self): return _PDFNetPython2.Movie_GetTitle(self)
    def SetTitle(self, *args): return _PDFNetPython2.Movie_SetTitle(self, *args)
    def IsToBePlayed(self): return _PDFNetPython2.Movie_IsToBePlayed(self)
    def SetToBePlayed(self, isplay = True): return _PDFNetPython2.Movie_SetToBePlayed(self, isplay)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Movie(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Movie
    __del__ = lambda self : None;
Movie_swigregister = _PDFNetPython2.Movie_swigregister
Movie_swigregister(Movie)

def Movie_Create(*args):
  return _PDFNetPython2.Movie_Create(*args)
Movie_Create = _PDFNetPython2.Movie_Create

class PolyLine(LineAnnot):
    __swig_setmethods__ = {}
    for _s in [LineAnnot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyLine, name, value)
    __swig_getmethods__ = {}
    for _s in [LineAnnot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyLine, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.PolyLine_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.PolyLine_Create)
    def GetVertexCount(self): return _PDFNetPython2.PolyLine_GetVertexCount(self)
    def GetVertex(self, *args): return _PDFNetPython2.PolyLine_GetVertex(self, *args)
    def SetVertex(self, *args): return _PDFNetPython2.PolyLine_SetVertex(self, *args)
    e_PolygonCloud = _PDFNetPython2.PolyLine_e_PolygonCloud
    e_PolyLineDimension = _PDFNetPython2.PolyLine_e_PolyLineDimension
    e_PolygonDimension = _PDFNetPython2.PolyLine_e_PolygonDimension
    e_Unknown = _PDFNetPython2.PolyLine_e_Unknown
    def GetIntentName(self): return _PDFNetPython2.PolyLine_GetIntentName(self)
    def SetIntentName(self, *args): return _PDFNetPython2.PolyLine_SetIntentName(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PolyLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PolyLine
    __del__ = lambda self : None;
PolyLine_swigregister = _PDFNetPython2.PolyLine_swigregister
PolyLine_swigregister(PolyLine)

def PolyLine_Create(*args):
  return _PDFNetPython2.PolyLine_Create(*args)
PolyLine_Create = _PDFNetPython2.PolyLine_Create

class Polygon(PolyLine):
    __swig_setmethods__ = {}
    for _s in [PolyLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [PolyLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Polygon_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Polygon_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Polygon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Polygon
    __del__ = lambda self : None;
Polygon_swigregister = _PDFNetPython2.Polygon_swigregister
Polygon_swigregister(Polygon)

def Polygon_Create(*args):
  return _PDFNetPython2.Polygon_Create(*args)
Polygon_Create = _PDFNetPython2.Polygon_Create

class RedactionAnnot(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RedactionAnnot, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RedactionAnnot, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.RedactionAnnot_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.RedactionAnnot_Create)
    def GetQuadPointCount(self): return _PDFNetPython2.RedactionAnnot_GetQuadPointCount(self)
    def GetQuadPoint(self, *args): return _PDFNetPython2.RedactionAnnot_GetQuadPoint(self, *args)
    def SetQuadPoint(self, *args): return _PDFNetPython2.RedactionAnnot_SetQuadPoint(self, *args)
    def GetAppFormXO(self): return _PDFNetPython2.RedactionAnnot_GetAppFormXO(self)
    def SetAppFormXO(self, *args): return _PDFNetPython2.RedactionAnnot_SetAppFormXO(self, *args)
    def GetOverlayText(self): return _PDFNetPython2.RedactionAnnot_GetOverlayText(self)
    def SetOverlayText(self, *args): return _PDFNetPython2.RedactionAnnot_SetOverlayText(self, *args)
    def GetUseRepeat(self): return _PDFNetPython2.RedactionAnnot_GetUseRepeat(self)
    def SetUseRepeat(self, repeat = False): return _PDFNetPython2.RedactionAnnot_SetUseRepeat(self, repeat)
    def GetOverlayTextAppearance(self): return _PDFNetPython2.RedactionAnnot_GetOverlayTextAppearance(self)
    def SetOverlayTextAppearance(self, *args): return _PDFNetPython2.RedactionAnnot_SetOverlayTextAppearance(self, *args)
    e_LeftJustified = _PDFNetPython2.RedactionAnnot_e_LeftJustified
    e_Centered = _PDFNetPython2.RedactionAnnot_e_Centered
    e_RightJustified = _PDFNetPython2.RedactionAnnot_e_RightJustified
    e_None = _PDFNetPython2.RedactionAnnot_e_None
    def GetQuadForm(self): return _PDFNetPython2.RedactionAnnot_GetQuadForm(self)
    def SetQuadForm(self, *args): return _PDFNetPython2.RedactionAnnot_SetQuadForm(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_RedactionAnnot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_RedactionAnnot
    __del__ = lambda self : None;
RedactionAnnot_swigregister = _PDFNetPython2.RedactionAnnot_swigregister
RedactionAnnot_swigregister(RedactionAnnot)

def RedactionAnnot_Create(*args):
  return _PDFNetPython2.RedactionAnnot_Create(*args)
RedactionAnnot_Create = _PDFNetPython2.RedactionAnnot_Create

class RubberStamp(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RubberStamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RubberStamp, name)
    __repr__ = _swig_repr
    e_Approved = _PDFNetPython2.RubberStamp_e_Approved
    e_Experimental = _PDFNetPython2.RubberStamp_e_Experimental
    e_NotApproved = _PDFNetPython2.RubberStamp_e_NotApproved
    e_AsIs = _PDFNetPython2.RubberStamp_e_AsIs
    e_Expired = _PDFNetPython2.RubberStamp_e_Expired
    e_NotForPublicRelease = _PDFNetPython2.RubberStamp_e_NotForPublicRelease
    e_Confidential = _PDFNetPython2.RubberStamp_e_Confidential
    e_Final = _PDFNetPython2.RubberStamp_e_Final
    e_Sold = _PDFNetPython2.RubberStamp_e_Sold
    e_Departmental = _PDFNetPython2.RubberStamp_e_Departmental
    e_ForComment = _PDFNetPython2.RubberStamp_e_ForComment
    e_TopSecret = _PDFNetPython2.RubberStamp_e_TopSecret
    e_ForPublicRelease = _PDFNetPython2.RubberStamp_e_ForPublicRelease
    e_Draft = _PDFNetPython2.RubberStamp_e_Draft
    e_Unknown = _PDFNetPython2.RubberStamp_e_Unknown
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.RubberStamp_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.RubberStamp_Create)
    def GetIcon(self): return _PDFNetPython2.RubberStamp_GetIcon(self)
    def GetIconName(self): return _PDFNetPython2.RubberStamp_GetIconName(self)
    def SetIcon(self, *args): return _PDFNetPython2.RubberStamp_SetIcon(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_RubberStamp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_RubberStamp
    __del__ = lambda self : None;
RubberStamp_swigregister = _PDFNetPython2.RubberStamp_swigregister
RubberStamp_swigregister(RubberStamp)

def RubberStamp_Create(*args):
  return _PDFNetPython2.RubberStamp_Create(*args)
RubberStamp_Create = _PDFNetPython2.RubberStamp_Create

class Screen(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Screen, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Screen, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Screen_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Screen_Create)
    def GetTitle(self): return _PDFNetPython2.Screen_GetTitle(self)
    def SetTitle(self, *args): return _PDFNetPython2.Screen_SetTitle(self, *args)
    def GetAction(self): return _PDFNetPython2.Screen_GetAction(self)
    def SetAction(self, *args): return _PDFNetPython2.Screen_SetAction(self, *args)
    def GetTriggerAction(self): return _PDFNetPython2.Screen_GetTriggerAction(self)
    def SetTriggerAction(self, *args): return _PDFNetPython2.Screen_SetTriggerAction(self, *args)
    def GetRotation(self): return _PDFNetPython2.Screen_GetRotation(self)
    def SetRotation(self, *args): return _PDFNetPython2.Screen_SetRotation(self, *args)
    def GetBorderColorCompNum(self): return _PDFNetPython2.Screen_GetBorderColorCompNum(self)
    def GetBorderColor(self): return _PDFNetPython2.Screen_GetBorderColor(self)
    def SetBorderColor(self, *args): return _PDFNetPython2.Screen_SetBorderColor(self, *args)
    def GetBackgroundColorCompNum(self): return _PDFNetPython2.Screen_GetBackgroundColorCompNum(self)
    def GetBackgroundColor(self): return _PDFNetPython2.Screen_GetBackgroundColor(self)
    def SetBackgroundColor(self, *args): return _PDFNetPython2.Screen_SetBackgroundColor(self, *args)
    def GetStaticCaptionText(self): return _PDFNetPython2.Screen_GetStaticCaptionText(self)
    def SetStaticCaptionText(self, *args): return _PDFNetPython2.Screen_SetStaticCaptionText(self, *args)
    def GetRolloverCaptionText(self): return _PDFNetPython2.Screen_GetRolloverCaptionText(self)
    def SetRolloverCaptionText(self, *args): return _PDFNetPython2.Screen_SetRolloverCaptionText(self, *args)
    def GetMouseDownCaptionText(self): return _PDFNetPython2.Screen_GetMouseDownCaptionText(self)
    def SetMouseDownCaptionText(self, *args): return _PDFNetPython2.Screen_SetMouseDownCaptionText(self, *args)
    def GetStaticIcon(self): return _PDFNetPython2.Screen_GetStaticIcon(self)
    def SetStaticIcon(self, *args): return _PDFNetPython2.Screen_SetStaticIcon(self, *args)
    def GetRolloverIcon(self): return _PDFNetPython2.Screen_GetRolloverIcon(self)
    def SetRolloverIcon(self, *args): return _PDFNetPython2.Screen_SetRolloverIcon(self, *args)
    def GetMouseDownIcon(self): return _PDFNetPython2.Screen_GetMouseDownIcon(self)
    def SetMouseDownIcon(self, *args): return _PDFNetPython2.Screen_SetMouseDownIcon(self, *args)
    e_NoIcon = _PDFNetPython2.Screen_e_NoIcon
    e_NoCaption = _PDFNetPython2.Screen_e_NoCaption
    e_CBelowI = _PDFNetPython2.Screen_e_CBelowI
    e_CAboveI = _PDFNetPython2.Screen_e_CAboveI
    e_CRightILeft = _PDFNetPython2.Screen_e_CRightILeft
    e_CLeftIRight = _PDFNetPython2.Screen_e_CLeftIRight
    e_COverlayI = _PDFNetPython2.Screen_e_COverlayI
    def GetIconCaptionRelation(self): return _PDFNetPython2.Screen_GetIconCaptionRelation(self)
    def SetIconCaptionRelation(self, *args): return _PDFNetPython2.Screen_SetIconCaptionRelation(self, *args)
    e_Always = _PDFNetPython2.Screen_e_Always
    e_WhenBigger = _PDFNetPython2.Screen_e_WhenBigger
    e_WhenSmaller = _PDFNetPython2.Screen_e_WhenSmaller
    e_Never = _PDFNetPython2.Screen_e_Never
    def GetScaleCondition(self): return _PDFNetPython2.Screen_GetScaleCondition(self)
    def SetScaleCondition(self, *args): return _PDFNetPython2.Screen_SetScaleCondition(self, *args)
    e_Anamorphic = _PDFNetPython2.Screen_e_Anamorphic
    e_Proportional = _PDFNetPython2.Screen_e_Proportional
    def GetScaleType(self): return _PDFNetPython2.Screen_GetScaleType(self)
    def SetScaleType(self, *args): return _PDFNetPython2.Screen_SetScaleType(self, *args)
    def GetHIconLeftOver(self): return _PDFNetPython2.Screen_GetHIconLeftOver(self)
    def SetHIconLeftOver(self, *args): return _PDFNetPython2.Screen_SetHIconLeftOver(self, *args)
    def GetVIconLeftOver(self): return _PDFNetPython2.Screen_GetVIconLeftOver(self)
    def SetVIconLeftOver(self, *args): return _PDFNetPython2.Screen_SetVIconLeftOver(self, *args)
    def GetFitFull(self): return _PDFNetPython2.Screen_GetFitFull(self)
    def SetFitFull(self, *args): return _PDFNetPython2.Screen_SetFitFull(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Screen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Screen
    __del__ = lambda self : None;
Screen_swigregister = _PDFNetPython2.Screen_swigregister
Screen_swigregister(Screen)

def Screen_Create(*args):
  return _PDFNetPython2.Screen_Create(*args)
Screen_Create = _PDFNetPython2.Screen_Create

class Sound(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sound, name)
    __repr__ = _swig_repr
    e_Speaker = _PDFNetPython2.Sound_e_Speaker
    e_Mic = _PDFNetPython2.Sound_e_Mic
    e_Unknown = _PDFNetPython2.Sound_e_Unknown
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Sound_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Sound_Create)
    def GetSoundStream(self): return _PDFNetPython2.Sound_GetSoundStream(self)
    def SetSoundStream(self, *args): return _PDFNetPython2.Sound_SetSoundStream(self, *args)
    def GetIcon(self): return _PDFNetPython2.Sound_GetIcon(self)
    def GetIconName(self): return _PDFNetPython2.Sound_GetIconName(self)
    def SetIcon(self, *args): return _PDFNetPython2.Sound_SetIcon(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Sound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Sound
    __del__ = lambda self : None;
Sound_swigregister = _PDFNetPython2.Sound_swigregister
Sound_swigregister(Sound)

def Sound_Create(*args):
  return _PDFNetPython2.Sound_Create(*args)
Sound_Create = _PDFNetPython2.Sound_Create

class Square(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Square, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Square, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Square_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Square_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Square(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Square
    __del__ = lambda self : None;
Square_swigregister = _PDFNetPython2.Square_swigregister
Square_swigregister(Square)

def Square_Create(*args):
  return _PDFNetPython2.Square_Create(*args)
Square_Create = _PDFNetPython2.Square_Create

class Squiggly(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Squiggly, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Squiggly, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Squiggly_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Squiggly_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Squiggly(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Squiggly
    __del__ = lambda self : None;
Squiggly_swigregister = _PDFNetPython2.Squiggly_swigregister
Squiggly_swigregister(Squiggly)

def Squiggly_Create(*args):
  return _PDFNetPython2.Squiggly_Create(*args)
Squiggly_Create = _PDFNetPython2.Squiggly_Create

class StrikeOut(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeOut, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeOut, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.StrikeOut_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.StrikeOut_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_StrikeOut(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_StrikeOut
    __del__ = lambda self : None;
StrikeOut_swigregister = _PDFNetPython2.StrikeOut_swigregister
StrikeOut_swigregister(StrikeOut)

def StrikeOut_Create(*args):
  return _PDFNetPython2.StrikeOut_Create(*args)
StrikeOut_Create = _PDFNetPython2.StrikeOut_Create

class Text(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Text_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Text_Create)
    def IsOpen(self): return _PDFNetPython2.Text_IsOpen(self)
    def SetOpen(self, *args): return _PDFNetPython2.Text_SetOpen(self, *args)
    e_Comment = _PDFNetPython2.Text_e_Comment
    e_Key = _PDFNetPython2.Text_e_Key
    e_Help = _PDFNetPython2.Text_e_Help
    e_NewParagraph = _PDFNetPython2.Text_e_NewParagraph
    e_Paragraph = _PDFNetPython2.Text_e_Paragraph
    e_Insert = _PDFNetPython2.Text_e_Insert
    e_Note = _PDFNetPython2.Text_e_Note
    e_Unknown = _PDFNetPython2.Text_e_Unknown
    def GetIcon(self): return _PDFNetPython2.Text_GetIcon(self)
    def GetIconName(self): return _PDFNetPython2.Text_GetIconName(self)
    def SetIcon(self, *args): return _PDFNetPython2.Text_SetIcon(self, *args)
    def GetState(self): return _PDFNetPython2.Text_GetState(self)
    def SetState(self, state = ""): return _PDFNetPython2.Text_SetState(self, state)
    def GetStateModel(self): return _PDFNetPython2.Text_GetStateModel(self)
    def SetStateModel(self, *args): return _PDFNetPython2.Text_SetStateModel(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Text
    __del__ = lambda self : None;
Text_swigregister = _PDFNetPython2.Text_swigregister
Text_swigregister(Text)

def Text_Create(*args):
  return _PDFNetPython2.Text_Create(*args)
Text_Create = _PDFNetPython2.Text_Create

class Underline(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Underline, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Underline, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Underline_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Underline_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Underline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Underline
    __del__ = lambda self : None;
Underline_swigregister = _PDFNetPython2.Underline_swigregister
Underline_swigregister(Underline)

def Underline_Create(*args):
  return _PDFNetPython2.Underline_Create(*args)
Underline_Create = _PDFNetPython2.Underline_Create

class Watermark(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Watermark, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Watermark, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Watermark_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Watermark_Create)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Watermark(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Watermark
    __del__ = lambda self : None;
Watermark_swigregister = _PDFNetPython2.Watermark_swigregister
Watermark_swigregister(Watermark)

def Watermark_Create(*args):
  return _PDFNetPython2.Watermark_Create(*args)
Watermark_Create = _PDFNetPython2.Watermark_Create

class Widget(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Widget, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Widget, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Widget_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Widget_Create)
    def GetField(self): return _PDFNetPython2.Widget_GetField(self)
    e_none = _PDFNetPython2.Widget_e_none
    e_invert = _PDFNetPython2.Widget_e_invert
    e_outline = _PDFNetPython2.Widget_e_outline
    e_push = _PDFNetPython2.Widget_e_push
    e_toggle = _PDFNetPython2.Widget_e_toggle
    def GetHighlightingMode(self): return _PDFNetPython2.Widget_GetHighlightingMode(self)
    def SetHighlightingMode(self, *args): return _PDFNetPython2.Widget_SetHighlightingMode(self, *args)
    def GetAction(self): return _PDFNetPython2.Widget_GetAction(self)
    def SetAction(self, *args): return _PDFNetPython2.Widget_SetAction(self, *args)
    def GetTriggerAction(self): return _PDFNetPython2.Widget_GetTriggerAction(self)
    def SetTriggerAction(self, *args): return _PDFNetPython2.Widget_SetTriggerAction(self, *args)
    def GetRotation(self): return _PDFNetPython2.Widget_GetRotation(self)
    def SetRotation(self, *args): return _PDFNetPython2.Widget_SetRotation(self, *args)
    def GetBorderColorCompNum(self): return _PDFNetPython2.Widget_GetBorderColorCompNum(self)
    def GetBorderColor(self): return _PDFNetPython2.Widget_GetBorderColor(self)
    def SetBorderColor(self, *args): return _PDFNetPython2.Widget_SetBorderColor(self, *args)
    def GetBackgroundColorCompNum(self): return _PDFNetPython2.Widget_GetBackgroundColorCompNum(self)
    def GetBackgroundColor(self): return _PDFNetPython2.Widget_GetBackgroundColor(self)
    def SetBackgroundColor(self, *args): return _PDFNetPython2.Widget_SetBackgroundColor(self, *args)
    def GetStaticCaptionText(self): return _PDFNetPython2.Widget_GetStaticCaptionText(self)
    def SetStaticCaptionText(self, *args): return _PDFNetPython2.Widget_SetStaticCaptionText(self, *args)
    def GetRolloverCaptionText(self): return _PDFNetPython2.Widget_GetRolloverCaptionText(self)
    def SetRolloverCaptionText(self, *args): return _PDFNetPython2.Widget_SetRolloverCaptionText(self, *args)
    def GetMouseDownCaptionText(self): return _PDFNetPython2.Widget_GetMouseDownCaptionText(self)
    def SetMouseDownCaptionText(self, *args): return _PDFNetPython2.Widget_SetMouseDownCaptionText(self, *args)
    def GetStaticIcon(self): return _PDFNetPython2.Widget_GetStaticIcon(self)
    def SetStaticIcon(self, *args): return _PDFNetPython2.Widget_SetStaticIcon(self, *args)
    def GetRolloverIcon(self): return _PDFNetPython2.Widget_GetRolloverIcon(self)
    def SetRolloverIcon(self, *args): return _PDFNetPython2.Widget_SetRolloverIcon(self, *args)
    def GetMouseDownIcon(self): return _PDFNetPython2.Widget_GetMouseDownIcon(self)
    def SetMouseDownIcon(self, *args): return _PDFNetPython2.Widget_SetMouseDownIcon(self, *args)
    e_NoIcon = _PDFNetPython2.Widget_e_NoIcon
    e_NoCaption = _PDFNetPython2.Widget_e_NoCaption
    e_CBelowI = _PDFNetPython2.Widget_e_CBelowI
    e_CAboveI = _PDFNetPython2.Widget_e_CAboveI
    e_CRightILeft = _PDFNetPython2.Widget_e_CRightILeft
    e_CLeftIRight = _PDFNetPython2.Widget_e_CLeftIRight
    e_COverlayI = _PDFNetPython2.Widget_e_COverlayI
    def GetIconCaptionRelation(self): return _PDFNetPython2.Widget_GetIconCaptionRelation(self)
    def SetIconCaptionRelation(self, *args): return _PDFNetPython2.Widget_SetIconCaptionRelation(self, *args)
    e_Always = _PDFNetPython2.Widget_e_Always
    e_WhenBigger = _PDFNetPython2.Widget_e_WhenBigger
    e_WhenSmaller = _PDFNetPython2.Widget_e_WhenSmaller
    e_Never = _PDFNetPython2.Widget_e_Never
    def GetScaleCondition(self): return _PDFNetPython2.Widget_GetScaleCondition(self)
    def SetScaleCondition(self, *args): return _PDFNetPython2.Widget_SetScaleCondition(self, *args)
    e_Anamorphic = _PDFNetPython2.Widget_e_Anamorphic
    e_Proportional = _PDFNetPython2.Widget_e_Proportional
    def GetScaleType(self): return _PDFNetPython2.Widget_GetScaleType(self)
    def SetScaleType(self, *args): return _PDFNetPython2.Widget_SetScaleType(self, *args)
    def GetHIconLeftOver(self): return _PDFNetPython2.Widget_GetHIconLeftOver(self)
    def SetHIconLeftOver(self, *args): return _PDFNetPython2.Widget_SetHIconLeftOver(self, *args)
    def GetVIconLeftOver(self): return _PDFNetPython2.Widget_GetVIconLeftOver(self)
    def SetVIconLeftOver(self, *args): return _PDFNetPython2.Widget_SetVIconLeftOver(self, *args)
    def GetFitFull(self): return _PDFNetPython2.Widget_GetFitFull(self)
    def SetFitFull(self, *args): return _PDFNetPython2.Widget_SetFitFull(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Widget(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Widget
    __del__ = lambda self : None;
Widget_swigregister = _PDFNetPython2.Widget_swigregister
Widget_swigregister(Widget)

def Widget_Create(*args):
  return _PDFNetPython2.Widget_Create(*args)
Widget_Create = _PDFNetPython2.Widget_Create

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Config_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Config_Create)
    def IsValid(self): return _PDFNetPython2.Config_IsValid(self)
    def GetOrder(self): return _PDFNetPython2.Config_GetOrder(self)
    def SetOrder(self, *args): return _PDFNetPython2.Config_SetOrder(self, *args)
    def GetName(self): return _PDFNetPython2.Config_GetName(self)
    def SetName(self, *args): return _PDFNetPython2.Config_SetName(self, *args)
    def GetCreator(self): return _PDFNetPython2.Config_GetCreator(self)
    def SetCreator(self, *args): return _PDFNetPython2.Config_SetCreator(self, *args)
    def GetInitBaseState(self): return _PDFNetPython2.Config_GetInitBaseState(self)
    def GetInitOnStates(self): return _PDFNetPython2.Config_GetInitOnStates(self)
    def GetInitOffStates(self): return _PDFNetPython2.Config_GetInitOffStates(self)
    def SetInitBaseState(self, state = "ON"): return _PDFNetPython2.Config_SetInitBaseState(self, state)
    def SetInitOnStates(self, *args): return _PDFNetPython2.Config_SetInitOnStates(self, *args)
    def SetInitOffStates(self, *args): return _PDFNetPython2.Config_SetInitOffStates(self, *args)
    def GetIntent(self): return _PDFNetPython2.Config_GetIntent(self)
    def SetIntent(self, *args): return _PDFNetPython2.Config_SetIntent(self, *args)
    def GetLockedOCGs(self): return _PDFNetPython2.Config_GetLockedOCGs(self)
    def SetLockedOCGs(self, *args): return _PDFNetPython2.Config_SetLockedOCGs(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.Config_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython2.Config_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython2.Config_mp_obj_get
    if _newclass:mp_obj = _swig_property(_PDFNetPython2.Config_mp_obj_get, _PDFNetPython2.Config_mp_obj_set)
    __swig_destroy__ = _PDFNetPython2.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _PDFNetPython2.Config_swigregister
Config_swigregister(Config)

def Config_Create(*args):
  return _PDFNetPython2.Config_Create(*args)
Config_Create = _PDFNetPython2.Config_Create

class Group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Group_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Group_Create)
    def IsValid(self): return _PDFNetPython2.Group_IsValid(self)
    def GetName(self): return _PDFNetPython2.Group_GetName(self)
    def SetName(self, *args): return _PDFNetPython2.Group_SetName(self, *args)
    def GetCurrentState(self, *args): return _PDFNetPython2.Group_GetCurrentState(self, *args)
    def SetCurrentState(self, *args): return _PDFNetPython2.Group_SetCurrentState(self, *args)
    def GetInitialState(self, *args): return _PDFNetPython2.Group_GetInitialState(self, *args)
    def SetInitialState(self, *args): return _PDFNetPython2.Group_SetInitialState(self, *args)
    def GetIntent(self): return _PDFNetPython2.Group_GetIntent(self)
    def SetIntent(self, *args): return _PDFNetPython2.Group_SetIntent(self, *args)
    def IsLocked(self, *args): return _PDFNetPython2.Group_IsLocked(self, *args)
    def SetLocked(self, *args): return _PDFNetPython2.Group_SetLocked(self, *args)
    def HasUsage(self): return _PDFNetPython2.Group_HasUsage(self)
    def GetUsage(self, *args): return _PDFNetPython2.Group_GetUsage(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.Group_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython2.Group_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython2.Group_mp_obj_get
    if _newclass:mp_obj = _swig_property(_PDFNetPython2.Group_mp_obj_get, _PDFNetPython2.Group_mp_obj_set)
    __swig_destroy__ = _PDFNetPython2.delete_Group
    __del__ = lambda self : None;
Group_swigregister = _PDFNetPython2.Group_swigregister
Group_swigregister(Group)

def Group_Create(*args):
  return _PDFNetPython2.Group_Create(*args)
Group_Create = _PDFNetPython2.Group_Create

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_Context
    __del__ = lambda self : None;
    def IsValid(self): return _PDFNetPython2.Context_IsValid(self)
    def GetState(self, *args): return _PDFNetPython2.Context_GetState(self, *args)
    def SetState(self, *args): return _PDFNetPython2.Context_SetState(self, *args)
    def ResetStates(self, *args): return _PDFNetPython2.Context_ResetStates(self, *args)
    def SetNonOCDrawing(self, *args): return _PDFNetPython2.Context_SetNonOCDrawing(self, *args)
    def GetNonOCDrawing(self): return _PDFNetPython2.Context_GetNonOCDrawing(self)
    e_VisibleOC = _PDFNetPython2.Context_e_VisibleOC
    e_AllOC = _PDFNetPython2.Context_e_AllOC
    e_NoOC = _PDFNetPython2.Context_e_NoOC
    def SetOCDrawMode(self, *args): return _PDFNetPython2.Context_SetOCDrawMode(self, *args)
    def GetOCMode(self): return _PDFNetPython2.Context_GetOCMode(self)
    def Destroy(self): return _PDFNetPython2.Context_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Context(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython2.Context_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython2.Context_mp_obj_get
    if _newclass:mp_obj = _swig_property(_PDFNetPython2.Context_mp_obj_get, _PDFNetPython2.Context_mp_obj_set)
Context_swigregister = _PDFNetPython2.Context_swigregister
Context_swigregister(Context)

class OCMD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OCMD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OCMD, name)
    __repr__ = _swig_repr
    e_AllOn = _PDFNetPython2.OCMD_e_AllOn
    e_AnyOn = _PDFNetPython2.OCMD_e_AnyOn
    e_AnyOff = _PDFNetPython2.OCMD_e_AnyOff
    e_AllOff = _PDFNetPython2.OCMD_e_AllOff
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.OCMD_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.OCMD_Create)
    def IsValid(self): return _PDFNetPython2.OCMD_IsValid(self)
    def GetOCGs(self): return _PDFNetPython2.OCMD_GetOCGs(self)
    def GetVisibilityPolicy(self): return _PDFNetPython2.OCMD_GetVisibilityPolicy(self)
    def SetVisibilityPolicy(self, *args): return _PDFNetPython2.OCMD_SetVisibilityPolicy(self, *args)
    def GetVisibilityExpression(self): return _PDFNetPython2.OCMD_GetVisibilityExpression(self)
    def IsCurrentlyVisible(self, *args): return _PDFNetPython2.OCMD_IsCurrentlyVisible(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.OCMD_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_OCMD(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython2.OCMD_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython2.OCMD_mp_obj_get
    if _newclass:mp_obj = _swig_property(_PDFNetPython2.OCMD_mp_obj_get, _PDFNetPython2.OCMD_mp_obj_set)
    __swig_destroy__ = _PDFNetPython2.delete_OCMD
    __del__ = lambda self : None;
OCMD_swigregister = _PDFNetPython2.OCMD_swigregister
OCMD_swigregister(OCMD)

def OCMD_Create(*args):
  return _PDFNetPython2.OCMD_Create(*args)
OCMD_Create = _PDFNetPython2.OCMD_Create

class PDFACompliance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFACompliance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFACompliance, name)
    __repr__ = _swig_repr
    e_NoConformance = _PDFNetPython2.PDFACompliance_e_NoConformance
    e_Level1A = _PDFNetPython2.PDFACompliance_e_Level1A
    e_Level1B = _PDFNetPython2.PDFACompliance_e_Level1B
    e_Level2A = _PDFNetPython2.PDFACompliance_e_Level2A
    e_Level2B = _PDFNetPython2.PDFACompliance_e_Level2B
    e_Level2U = _PDFNetPython2.PDFACompliance_e_Level2U
    e_Level3A = _PDFNetPython2.PDFACompliance_e_Level3A
    e_Level3B = _PDFNetPython2.PDFACompliance_e_Level3B
    e_Level3U = _PDFNetPython2.PDFACompliance_e_Level3U
    e_PDFA0_1_1 = _PDFNetPython2.PDFACompliance_e_PDFA0_1_1
    e_PDFA0_1_2 = _PDFNetPython2.PDFACompliance_e_PDFA0_1_2
    e_PDFA0_1_3 = _PDFNetPython2.PDFACompliance_e_PDFA0_1_3
    e_PDFA0_1_4 = _PDFNetPython2.PDFACompliance_e_PDFA0_1_4
    e_PDFA0_1_5 = _PDFNetPython2.PDFACompliance_e_PDFA0_1_5
    e_PDFA1_2_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_2_1
    e_PDFA1_2_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_2_2
    e_PDFA1_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_3_1
    e_PDFA1_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_3_2
    e_PDFA1_3_3 = _PDFNetPython2.PDFACompliance_e_PDFA1_3_3
    e_PDFA1_3_4 = _PDFNetPython2.PDFACompliance_e_PDFA1_3_4
    e_PDFA1_4_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_4_1
    e_PDFA1_4_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_4_2
    e_PDFA1_6_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_6_1
    e_PDFA1_7_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_7_1
    e_PDFA1_7_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_7_2
    e_PDFA1_7_3 = _PDFNetPython2.PDFACompliance_e_PDFA1_7_3
    e_PDFA1_7_4 = _PDFNetPython2.PDFACompliance_e_PDFA1_7_4
    e_PDFA1_8_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_8_1
    e_PDFA1_8_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_8_2
    e_PDFA1_8_3 = _PDFNetPython2.PDFACompliance_e_PDFA1_8_3
    e_PDFA1_8_4 = _PDFNetPython2.PDFACompliance_e_PDFA1_8_4
    e_PDFA1_8_5 = _PDFNetPython2.PDFACompliance_e_PDFA1_8_5
    e_PDFA1_8_6 = _PDFNetPython2.PDFACompliance_e_PDFA1_8_6
    e_PDFA1_10_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_10_1
    e_PDFA1_11_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_11_1
    e_PDFA1_11_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_11_2
    e_PDFA1_12_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_12_1
    e_PDFA1_12_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_12_2
    e_PDFA1_12_3 = _PDFNetPython2.PDFACompliance_e_PDFA1_12_3
    e_PDFA1_12_4 = _PDFNetPython2.PDFACompliance_e_PDFA1_12_4
    e_PDFA1_12_5 = _PDFNetPython2.PDFACompliance_e_PDFA1_12_5
    e_PDFA1_12_6 = _PDFNetPython2.PDFACompliance_e_PDFA1_12_6
    e_PDFA1_13_1 = _PDFNetPython2.PDFACompliance_e_PDFA1_13_1
    e_PDFA2_2_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_2_1
    e_PDFA2_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA2_3_2
    e_PDFA2_3_3 = _PDFNetPython2.PDFACompliance_e_PDFA2_3_3
    e_PDFA2_3_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_3_3_1
    e_PDFA2_3_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA2_3_3_2
    e_PDFA2_3_4_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_3_4_1
    e_PDFA2_4_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_1
    e_PDFA2_4_2 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_2
    e_PDFA2_4_3 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_3
    e_PDFA2_4_4 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_4
    e_PDFA2_5_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_5_1
    e_PDFA2_5_2 = _PDFNetPython2.PDFACompliance_e_PDFA2_5_2
    e_PDFA2_6_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_6_1
    e_PDFA2_7_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_7_1
    e_PDFA2_8_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_8_1
    e_PDFA2_9_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_9_1
    e_PDFA2_10_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_10_1
    e_PDFA3_2_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_2_1
    e_PDFA3_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_3_1
    e_PDFA3_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA3_3_2
    e_PDFA3_3_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_3_3_1
    e_PDFA3_3_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA3_3_3_2
    e_PDFA3_4_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_4_1
    e_PDFA3_5_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_5_1
    e_PDFA3_5_2 = _PDFNetPython2.PDFACompliance_e_PDFA3_5_2
    e_PDFA3_5_3 = _PDFNetPython2.PDFACompliance_e_PDFA3_5_3
    e_PDFA3_5_4 = _PDFNetPython2.PDFACompliance_e_PDFA3_5_4
    e_PDFA3_5_5 = _PDFNetPython2.PDFACompliance_e_PDFA3_5_5
    e_PDFA3_5_6 = _PDFNetPython2.PDFACompliance_e_PDFA3_5_6
    e_PDFA3_6_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_6_1
    e_PDFA3_7_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_7_1
    e_PDFA3_7_2 = _PDFNetPython2.PDFACompliance_e_PDFA3_7_2
    e_PDFA3_7_3 = _PDFNetPython2.PDFACompliance_e_PDFA3_7_3
    e_PDFA4_1 = _PDFNetPython2.PDFACompliance_e_PDFA4_1
    e_PDFA4_2 = _PDFNetPython2.PDFACompliance_e_PDFA4_2
    e_PDFA4_3 = _PDFNetPython2.PDFACompliance_e_PDFA4_3
    e_PDFA4_4 = _PDFNetPython2.PDFACompliance_e_PDFA4_4
    e_PDFA4_5 = _PDFNetPython2.PDFACompliance_e_PDFA4_5
    e_PDFA4_6 = _PDFNetPython2.PDFACompliance_e_PDFA4_6
    e_PDFA5_2_1 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_1
    e_PDFA5_2_2 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_2
    e_PDFA5_2_3 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_3
    e_PDFA5_2_4 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_4
    e_PDFA5_2_5 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_5
    e_PDFA5_2_6 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_6
    e_PDFA5_2_7 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_7
    e_PDFA5_2_8 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_8
    e_PDFA5_2_9 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_9
    e_PDFA5_2_10 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_10
    e_PDFA5_2_11 = _PDFNetPython2.PDFACompliance_e_PDFA5_2_11
    e_PDFA5_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_1
    e_PDFA5_3_2_1 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_2_1
    e_PDFA5_3_2_2 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_2_2
    e_PDFA5_3_2_3 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_2_3
    e_PDFA5_3_2_4 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_2_4
    e_PDFA5_3_2_5 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_2_5
    e_PDFA5_3_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_3_1
    e_PDFA5_3_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_3_2
    e_PDFA5_3_3_3 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_3_3
    e_PDFA5_3_3_4 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_3_4
    e_PDFA5_3_4_0 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_4_0
    e_PDFA5_3_4_1 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_4_1
    e_PDFA5_3_4_2 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_4_2
    e_PDFA5_3_4_3 = _PDFNetPython2.PDFACompliance_e_PDFA5_3_4_3
    e_PDFA6_1_1 = _PDFNetPython2.PDFACompliance_e_PDFA6_1_1
    e_PDFA6_1_2 = _PDFNetPython2.PDFACompliance_e_PDFA6_1_2
    e_PDFA6_2_1 = _PDFNetPython2.PDFACompliance_e_PDFA6_2_1
    e_PDFA6_2_2 = _PDFNetPython2.PDFACompliance_e_PDFA6_2_2
    e_PDFA6_2_3 = _PDFNetPython2.PDFACompliance_e_PDFA6_2_3
    e_PDFA7_2_1 = _PDFNetPython2.PDFACompliance_e_PDFA7_2_1
    e_PDFA7_2_2 = _PDFNetPython2.PDFACompliance_e_PDFA7_2_2
    e_PDFA7_2_3 = _PDFNetPython2.PDFACompliance_e_PDFA7_2_3
    e_PDFA7_2_4 = _PDFNetPython2.PDFACompliance_e_PDFA7_2_4
    e_PDFA7_2_5 = _PDFNetPython2.PDFACompliance_e_PDFA7_2_5
    e_PDFA7_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_1
    e_PDFA7_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_2
    e_PDFA7_3_3 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_3
    e_PDFA7_3_4 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_4
    e_PDFA7_3_5 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_5
    e_PDFA7_3_6 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_6
    e_PDFA7_3_7 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_7
    e_PDFA7_3_8 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_8
    e_PDFA7_3_9 = _PDFNetPython2.PDFACompliance_e_PDFA7_3_9
    e_PDFA7_5_1 = _PDFNetPython2.PDFACompliance_e_PDFA7_5_1
    e_PDFA7_8_1 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_1
    e_PDFA7_8_2 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_2
    e_PDFA7_8_3 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_3
    e_PDFA7_8_4 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_4
    e_PDFA7_8_5 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_5
    e_PDFA7_8_6 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_6
    e_PDFA7_8_7 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_7
    e_PDFA7_8_8 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_8
    e_PDFA7_8_9 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_9
    e_PDFA7_8_10 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_10
    e_PDFA7_8_11 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_11
    e_PDFA7_8_12 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_12
    e_PDFA7_8_13 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_13
    e_PDFA7_8_14 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_14
    e_PDFA7_8_15 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_15
    e_PDFA7_8_16 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_16
    e_PDFA7_8_17 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_17
    e_PDFA7_8_18 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_18
    e_PDFA7_8_19 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_19
    e_PDFA7_8_20 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_20
    e_PDFA7_8_21 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_21
    e_PDFA7_8_22 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_22
    e_PDFA7_8_23 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_23
    e_PDFA7_8_24 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_24
    e_PDFA7_8_25 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_25
    e_PDFA7_8_26 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_26
    e_PDFA7_8_27 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_27
    e_PDFA7_8_28 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_28
    e_PDFA7_8_29 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_29
    e_PDFA7_8_30 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_30
    e_PDFA7_8_31 = _PDFNetPython2.PDFACompliance_e_PDFA7_8_31
    e_PDFA7_11_1 = _PDFNetPython2.PDFACompliance_e_PDFA7_11_1
    e_PDFA7_11_2 = _PDFNetPython2.PDFACompliance_e_PDFA7_11_2
    e_PDFA7_11_3 = _PDFNetPython2.PDFACompliance_e_PDFA7_11_3
    e_PDFA7_11_4 = _PDFNetPython2.PDFACompliance_e_PDFA7_11_4
    e_PDFA7_11_5 = _PDFNetPython2.PDFACompliance_e_PDFA7_11_5
    e_PDFA9_1 = _PDFNetPython2.PDFACompliance_e_PDFA9_1
    e_PDFA9_2 = _PDFNetPython2.PDFACompliance_e_PDFA9_2
    e_PDFA9_3 = _PDFNetPython2.PDFACompliance_e_PDFA9_3
    e_PDFA9_4 = _PDFNetPython2.PDFACompliance_e_PDFA9_4
    e_PDFA3_8_1 = _PDFNetPython2.PDFACompliance_e_PDFA3_8_1
    e_PDFA8_2_2 = _PDFNetPython2.PDFACompliance_e_PDFA8_2_2
    e_PDFA8_3_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA8_3_3_1
    e_PDFA8_3_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA8_3_3_2
    e_PDFA8_3_4_1 = _PDFNetPython2.PDFACompliance_e_PDFA8_3_4_1
    e_PDFA1_2_3 = _PDFNetPython2.PDFACompliance_e_PDFA1_2_3
    e_PDFA1_10_2 = _PDFNetPython2.PDFACompliance_e_PDFA1_10_2
    e_PDFA1_10_3 = _PDFNetPython2.PDFACompliance_e_PDFA1_10_3
    e_PDFA1_12_10 = _PDFNetPython2.PDFACompliance_e_PDFA1_12_10
    e_PDFA1_13_5 = _PDFNetPython2.PDFACompliance_e_PDFA1_13_5
    e_PDFA2_3_10 = _PDFNetPython2.PDFACompliance_e_PDFA2_3_10
    e_PDFA2_4_2_10 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_2_10
    e_PDFA2_4_2_11 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_2_11
    e_PDFA2_4_2_12 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_2_12
    e_PDFA2_4_2_13 = _PDFNetPython2.PDFACompliance_e_PDFA2_4_2_13
    e_PDFA2_5_10 = _PDFNetPython2.PDFACompliance_e_PDFA2_5_10
    e_PDFA2_5_11 = _PDFNetPython2.PDFACompliance_e_PDFA2_5_11
    e_PDFA2_5_12 = _PDFNetPython2.PDFACompliance_e_PDFA2_5_12
    e_PDFA2_8_3_1 = _PDFNetPython2.PDFACompliance_e_PDFA2_8_3_1
    e_PDFA2_8_3_2 = _PDFNetPython2.PDFACompliance_e_PDFA2_8_3_2
    e_PDFA2_8_3_3 = _PDFNetPython2.PDFACompliance_e_PDFA2_8_3_3
    e_PDFA2_8_3_4 = _PDFNetPython2.PDFACompliance_e_PDFA2_8_3_4
    e_PDFA2_8_3_5 = _PDFNetPython2.PDFACompliance_e_PDFA2_8_3_5
    e_PDFA2_10_20 = _PDFNetPython2.PDFACompliance_e_PDFA2_10_20
    e_PDFA2_10_21 = _PDFNetPython2.PDFACompliance_e_PDFA2_10_21
    e_PDFA11_0_0 = _PDFNetPython2.PDFACompliance_e_PDFA11_0_0
    e_PDFA6_2_11_8 = _PDFNetPython2.PDFACompliance_e_PDFA6_2_11_8
    e_PDFA_LAST = _PDFNetPython2.PDFACompliance_e_PDFA_LAST
    def SaveAs(self, *args): return _PDFNetPython2.PDFACompliance_SaveAs(self, *args)
    def GetErrorCount(self): return _PDFNetPython2.PDFACompliance_GetErrorCount(self)
    def GetError(self, *args): return _PDFNetPython2.PDFACompliance_GetError(self, *args)
    def GetRefObjCount(self, *args): return _PDFNetPython2.PDFACompliance_GetRefObjCount(self, *args)
    def GetRefObj(self, *args): return _PDFNetPython2.PDFACompliance_GetRefObj(self, *args)
    __swig_getmethods__["GetPDFAErrorMessage"] = lambda x: _PDFNetPython2.PDFACompliance_GetPDFAErrorMessage
    if _newclass:GetPDFAErrorMessage = staticmethod(_PDFNetPython2.PDFACompliance_GetPDFAErrorMessage)
    __swig_destroy__ = _PDFNetPython2.delete_PDFACompliance
    __del__ = lambda self : None;
    def Destroy(self): return _PDFNetPython2.PDFACompliance_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PDFACompliance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_pdfac"] = _PDFNetPython2.PDFACompliance_mp_pdfac_set
    __swig_getmethods__["mp_pdfac"] = _PDFNetPython2.PDFACompliance_mp_pdfac_get
    if _newclass:mp_pdfac = _swig_property(_PDFNetPython2.PDFACompliance_mp_pdfac_get, _PDFNetPython2.PDFACompliance_mp_pdfac_set)
PDFACompliance_swigregister = _PDFNetPython2.PDFACompliance_swigregister
PDFACompliance_swigregister(PDFACompliance)

def PDFACompliance_GetPDFAErrorMessage(*args):
  return _PDFNetPython2.PDFACompliance_GetPDFAErrorMessage(*args)
PDFACompliance_GetPDFAErrorMessage = _PDFNetPython2.PDFACompliance_GetPDFAErrorMessage

class AttrObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttrObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttrObj, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_AttrObj(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetOwner(self): return _PDFNetPython2.AttrObj_GetOwner(self)
    def GetSDFObj(self): return _PDFNetPython2.AttrObj_GetSDFObj(self)
    __swig_destroy__ = _PDFNetPython2.delete_AttrObj
    __del__ = lambda self : None;
AttrObj_swigregister = _PDFNetPython2.AttrObj_swigregister
AttrObj_swigregister(AttrObj)

class ClassMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassMap, name)
    __repr__ = _swig_repr
    def IsValid(self): return _PDFNetPython2.ClassMap_IsValid(self)
    def GetSDFObj(self): return _PDFNetPython2.ClassMap_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_ClassMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_ClassMap
    __del__ = lambda self : None;
ClassMap_swigregister = _PDFNetPython2.ClassMap_swigregister
ClassMap_swigregister(ClassMap)

class ContentItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContentItem, name)
    __repr__ = _swig_repr
    e_MCR = _PDFNetPython2.ContentItem_e_MCR
    e_MCID = _PDFNetPython2.ContentItem_e_MCID
    e_OBJR = _PDFNetPython2.ContentItem_e_OBJR
    e_Unknown = _PDFNetPython2.ContentItem_e_Unknown
    def GetType(self): return _PDFNetPython2.ContentItem_GetType(self)
    def GetParent(self): return _PDFNetPython2.ContentItem_GetParent(self)
    def GetPage(self): return _PDFNetPython2.ContentItem_GetPage(self)
    def GetSDFObj(self): return _PDFNetPython2.ContentItem_GetSDFObj(self)
    def GetMCID(self): return _PDFNetPython2.ContentItem_GetMCID(self)
    def GetContainingStm(self): return _PDFNetPython2.ContentItem_GetContainingStm(self)
    def GetStmOwner(self): return _PDFNetPython2.ContentItem_GetStmOwner(self)
    def GetRefObj(self): return _PDFNetPython2.ContentItem_GetRefObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_ContentItem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_item"] = _PDFNetPython2.ContentItem_mp_item_set
    __swig_getmethods__["mp_item"] = _PDFNetPython2.ContentItem_mp_item_get
    if _newclass:mp_item = _swig_property(_PDFNetPython2.ContentItem_mp_item_get, _PDFNetPython2.ContentItem_mp_item_set)
    __swig_destroy__ = _PDFNetPython2.delete_ContentItem
    __del__ = lambda self : None;
ContentItem_swigregister = _PDFNetPython2.ContentItem_swigregister
ContentItem_swigregister(ContentItem)

class RoleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoleMap, name)
    __repr__ = _swig_repr
    def IsValid(self): return _PDFNetPython2.RoleMap_IsValid(self)
    def GetDirectMap(self, *args): return _PDFNetPython2.RoleMap_GetDirectMap(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.RoleMap_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_RoleMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_RoleMap
    __del__ = lambda self : None;
RoleMap_swigregister = _PDFNetPython2.RoleMap_swigregister
RoleMap_swigregister(RoleMap)

class STree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STree, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.STree_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.STree_Create)
    def Insert(self, *args): return _PDFNetPython2.STree_Insert(self, *args)
    def IsValid(self): return _PDFNetPython2.STree_IsValid(self)
    def GetNumKids(self): return _PDFNetPython2.STree_GetNumKids(self)
    def GetKid(self, *args): return _PDFNetPython2.STree_GetKid(self, *args)
    def GetElement(self, *args): return _PDFNetPython2.STree_GetElement(self, *args)
    def GetRoleMap(self): return _PDFNetPython2.STree_GetRoleMap(self)
    def GetClassMap(self): return _PDFNetPython2.STree_GetClassMap(self)
    def GetSDFObj(self): return _PDFNetPython2.STree_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_STree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_STree
    __del__ = lambda self : None;
STree_swigregister = _PDFNetPython2.STree_swigregister
STree_swigregister(STree)

def STree_Create(*args):
  return _PDFNetPython2.STree_Create(*args)
STree_Create = _PDFNetPython2.STree_Create

class SElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SElement, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.SElement_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.SElement_Create)
    def Insert(self, *args): return _PDFNetPython2.SElement_Insert(self, *args)
    def CreateContentItem(self, *args): return _PDFNetPython2.SElement_CreateContentItem(self, *args)
    def IsValid(self): return _PDFNetPython2.SElement_IsValid(self)
    def GetType(self): return _PDFNetPython2.SElement_GetType(self)
    def GetNumKids(self): return _PDFNetPython2.SElement_GetNumKids(self)
    def IsContentItem(self, *args): return _PDFNetPython2.SElement_IsContentItem(self, *args)
    def GetAsContentItem(self, *args): return _PDFNetPython2.SElement_GetAsContentItem(self, *args)
    def GetAsStructElem(self, *args): return _PDFNetPython2.SElement_GetAsStructElem(self, *args)
    def GetParent(self): return _PDFNetPython2.SElement_GetParent(self)
    def GetStructTreeRoot(self): return _PDFNetPython2.SElement_GetStructTreeRoot(self)
    def HasTitle(self): return _PDFNetPython2.SElement_HasTitle(self)
    def GetTitle(self): return _PDFNetPython2.SElement_GetTitle(self)
    def GetID(self): return _PDFNetPython2.SElement_GetID(self)
    def HasActualText(self): return _PDFNetPython2.SElement_HasActualText(self)
    def GetActualText(self): return _PDFNetPython2.SElement_GetActualText(self)
    def HasAlt(self): return _PDFNetPython2.SElement_HasAlt(self)
    def GetAlt(self): return _PDFNetPython2.SElement_GetAlt(self)
    def GetSDFObj(self): return _PDFNetPython2.SElement_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_SElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_elem"] = _PDFNetPython2.SElement_mp_elem_set
    __swig_getmethods__["mp_elem"] = _PDFNetPython2.SElement_mp_elem_get
    if _newclass:mp_elem = _swig_property(_PDFNetPython2.SElement_mp_elem_get, _PDFNetPython2.SElement_mp_elem_set)
    __swig_destroy__ = _PDFNetPython2.delete_SElement
    __del__ = lambda self : None;
SElement_swigregister = _PDFNetPython2.SElement_swigregister
SElement_swigregister(SElement)

def SElement_Create(*args):
  return _PDFNetPython2.SElement_Create(*args)
SElement_Create = _PDFNetPython2.SElement_Create

class Bookmark(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bookmark, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bookmark, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Bookmark_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Bookmark_Create)
    def __eq__(self, *args): return _PDFNetPython2.Bookmark___eq__(self, *args)
    def IsValid(self): return _PDFNetPython2.Bookmark_IsValid(self)
    def HasChildren(self): return _PDFNetPython2.Bookmark_HasChildren(self)
    def GetNext(self): return _PDFNetPython2.Bookmark_GetNext(self)
    def GetPrev(self): return _PDFNetPython2.Bookmark_GetPrev(self)
    def GetFirstChild(self): return _PDFNetPython2.Bookmark_GetFirstChild(self)
    def GetLastChild(self): return _PDFNetPython2.Bookmark_GetLastChild(self)
    def GetParent(self): return _PDFNetPython2.Bookmark_GetParent(self)
    def Find(self, *args): return _PDFNetPython2.Bookmark_Find(self, *args)
    def AddChild(self, *args): return _PDFNetPython2.Bookmark_AddChild(self, *args)
    def AddNext(self, *args): return _PDFNetPython2.Bookmark_AddNext(self, *args)
    def AddPrev(self, *args): return _PDFNetPython2.Bookmark_AddPrev(self, *args)
    def Delete(self): return _PDFNetPython2.Bookmark_Delete(self)
    def Unlink(self): return _PDFNetPython2.Bookmark_Unlink(self)
    def GetIndent(self): return _PDFNetPython2.Bookmark_GetIndent(self)
    def IsOpen(self): return _PDFNetPython2.Bookmark_IsOpen(self)
    def SetOpen(self, *args): return _PDFNetPython2.Bookmark_SetOpen(self, *args)
    def GetOpenCount(self): return _PDFNetPython2.Bookmark_GetOpenCount(self)
    def GetTitle(self): return _PDFNetPython2.Bookmark_GetTitle(self)
    def GetTitleObj(self): return _PDFNetPython2.Bookmark_GetTitleObj(self)
    def SetTitle(self, *args): return _PDFNetPython2.Bookmark_SetTitle(self, *args)
    def GetAction(self): return _PDFNetPython2.Bookmark_GetAction(self)
    def SetAction(self, *args): return _PDFNetPython2.Bookmark_SetAction(self, *args)
    def RemoveAction(self): return _PDFNetPython2.Bookmark_RemoveAction(self)
    def GetFlags(self): return _PDFNetPython2.Bookmark_GetFlags(self)
    def SetFlags(self, *args): return _PDFNetPython2.Bookmark_SetFlags(self, *args)
    def GetColor(self): return _PDFNetPython2.Bookmark_GetColor(self)
    def SetColor(self, in_r = 0.0, in_g = 0.0, in_b = 0.0): return _PDFNetPython2.Bookmark_SetColor(self, in_r, in_g, in_b)
    def GetSDFObj(self): return _PDFNetPython2.Bookmark_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Bookmark(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython2.Bookmark_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython2.Bookmark_mp_obj_get
    if _newclass:mp_obj = _swig_property(_PDFNetPython2.Bookmark_mp_obj_get, _PDFNetPython2.Bookmark_mp_obj_set)
    __swig_destroy__ = _PDFNetPython2.delete_Bookmark
    __del__ = lambda self : None;
Bookmark_swigregister = _PDFNetPython2.Bookmark_swigregister
Bookmark_swigregister(Bookmark)

def Bookmark_Create(*args):
  return _PDFNetPython2.Bookmark_Create(*args)
Bookmark_Create = _PDFNetPython2.Bookmark_Create

class ContentReplacer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentReplacer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContentReplacer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_ContentReplacer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_ContentReplacer
    __del__ = lambda self : None;
    def AddImage(self, *args): return _PDFNetPython2.ContentReplacer_AddImage(self, *args)
    def AddText(self, *args): return _PDFNetPython2.ContentReplacer_AddText(self, *args)
    def AddString(self, *args): return _PDFNetPython2.ContentReplacer_AddString(self, *args)
    def Process(self, *args): return _PDFNetPython2.ContentReplacer_Process(self, *args)
    def Destroy(self): return _PDFNetPython2.ContentReplacer_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.ContentReplacer_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.ContentReplacer_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.ContentReplacer_mp_impl_get, _PDFNetPython2.ContentReplacer_mp_impl_set)
ContentReplacer_swigregister = _PDFNetPython2.ContentReplacer_swigregister
ContentReplacer_swigregister(ContentReplacer)

class Convert(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Convert, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["FromXps"] = lambda x: _PDFNetPython2.Convert_FromXps
    if _newclass:FromXps = staticmethod(_PDFNetPython2.Convert_FromXps)
    __swig_getmethods__["FromEmf"] = lambda x: _PDFNetPython2.Convert_FromEmf
    if _newclass:FromEmf = staticmethod(_PDFNetPython2.Convert_FromEmf)
    __swig_getmethods__["ToEmf"] = lambda x: _PDFNetPython2.Convert_ToEmf
    if _newclass:ToEmf = staticmethod(_PDFNetPython2.Convert_ToEmf)
    __swig_getmethods__["ToSvg"] = lambda x: _PDFNetPython2.Convert_ToSvg
    if _newclass:ToSvg = staticmethod(_PDFNetPython2.Convert_ToSvg)
    __swig_getmethods__["ToXps"] = lambda x: _PDFNetPython2.Convert_ToXps
    if _newclass:ToXps = staticmethod(_PDFNetPython2.Convert_ToXps)
    __swig_getmethods__["ToXod"] = lambda x: _PDFNetPython2.Convert_ToXod
    if _newclass:ToXod = staticmethod(_PDFNetPython2.Convert_ToXod)
    __swig_getmethods__["ToPdf"] = lambda x: _PDFNetPython2.Convert_ToPdf
    if _newclass:ToPdf = staticmethod(_PDFNetPython2.Convert_ToPdf)
    __swig_getmethods__["RequiresPrinter"] = lambda x: _PDFNetPython2.Convert_RequiresPrinter
    if _newclass:RequiresPrinter = staticmethod(_PDFNetPython2.Convert_RequiresPrinter)
Convert_swigregister = _PDFNetPython2.Convert_swigregister
Convert_swigregister(Convert)

def Convert_FromXps(*args):
  return _PDFNetPython2.Convert_FromXps(*args)
Convert_FromXps = _PDFNetPython2.Convert_FromXps

def Convert_FromEmf(*args):
  return _PDFNetPython2.Convert_FromEmf(*args)
Convert_FromEmf = _PDFNetPython2.Convert_FromEmf

def Convert_ToEmf(*args):
  return _PDFNetPython2.Convert_ToEmf(*args)
Convert_ToEmf = _PDFNetPython2.Convert_ToEmf

def Convert_ToSvg(*args):
  return _PDFNetPython2.Convert_ToSvg(*args)
Convert_ToSvg = _PDFNetPython2.Convert_ToSvg

def Convert_ToXps(*args):
  return _PDFNetPython2.Convert_ToXps(*args)
Convert_ToXps = _PDFNetPython2.Convert_ToXps

def Convert_ToXod(*args):
  return _PDFNetPython2.Convert_ToXod(*args)
Convert_ToXod = _PDFNetPython2.Convert_ToXod

def Convert_ToPdf(*args):
  return _PDFNetPython2.Convert_ToPdf(*args)
Convert_ToPdf = _PDFNetPython2.Convert_ToPdf

def Convert_RequiresPrinter(*args):
  return _PDFNetPython2.Convert_RequiresPrinter(*args)
Convert_RequiresPrinter = _PDFNetPython2.Convert_RequiresPrinter

class PathData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathData, name)
    __repr__ = _swig_repr
    e_moveto = _PDFNetPython2.PathData_e_moveto
    e_lineto = _PDFNetPython2.PathData_e_lineto
    e_cubicto = _PDFNetPython2.PathData_e_cubicto
    e_conicto = _PDFNetPython2.PathData_e_conicto
    e_rect = _PDFNetPython2.PathData_e_rect
    e_closepath = _PDFNetPython2.PathData_e_closepath
    def SetOperators(self, *args): return _PDFNetPython2.PathData_SetOperators(self, *args)
    def SetPoints(self, *args): return _PDFNetPython2.PathData_SetPoints(self, *args)
    def GetOperators(self): return _PDFNetPython2.PathData_GetOperators(self)
    def GetPoints(self): return _PDFNetPython2.PathData_GetPoints(self)
    def IsDefined(self): return _PDFNetPython2.PathData_IsDefined(self)
    __swig_setmethods__["is_def"] = _PDFNetPython2.PathData_is_def_set
    __swig_getmethods__["is_def"] = _PDFNetPython2.PathData_is_def_get
    if _newclass:is_def = _swig_property(_PDFNetPython2.PathData_is_def_get, _PDFNetPython2.PathData_is_def_set)
    __swig_setmethods__["oprs"] = _PDFNetPython2.PathData_oprs_set
    __swig_getmethods__["oprs"] = _PDFNetPython2.PathData_oprs_get
    if _newclass:oprs = _swig_property(_PDFNetPython2.PathData_oprs_get, _PDFNetPython2.PathData_oprs_set)
    __swig_setmethods__["pts"] = _PDFNetPython2.PathData_pts_set
    __swig_getmethods__["pts"] = _PDFNetPython2.PathData_pts_get
    if _newclass:pts = _swig_property(_PDFNetPython2.PathData_pts_get, _PDFNetPython2.PathData_pts_set)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PathData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PathData
    __del__ = lambda self : None;
PathData_swigregister = _PDFNetPython2.PathData_swigregister
PathData_swigregister(PathData)

class Font(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    __repr__ = _swig_repr
    e_times_roman = _PDFNetPython2.Font_e_times_roman
    e_times_bold = _PDFNetPython2.Font_e_times_bold
    e_times_italic = _PDFNetPython2.Font_e_times_italic
    e_times_bold_italic = _PDFNetPython2.Font_e_times_bold_italic
    e_helvetica = _PDFNetPython2.Font_e_helvetica
    e_helvetica_bold = _PDFNetPython2.Font_e_helvetica_bold
    e_helvetica_oblique = _PDFNetPython2.Font_e_helvetica_oblique
    e_helvetica_bold_oblique = _PDFNetPython2.Font_e_helvetica_bold_oblique
    e_courier = _PDFNetPython2.Font_e_courier
    e_courier_bold = _PDFNetPython2.Font_e_courier_bold
    e_courier_oblique = _PDFNetPython2.Font_e_courier_oblique
    e_courier_bold_oblique = _PDFNetPython2.Font_e_courier_bold_oblique
    e_symbol = _PDFNetPython2.Font_e_symbol
    e_zapf_dingbats = _PDFNetPython2.Font_e_zapf_dingbats
    e_null = _PDFNetPython2.Font_e_null
    __swig_getmethods__["CreateTrueTypeFont"] = lambda x: _PDFNetPython2.Font_CreateTrueTypeFont
    if _newclass:CreateTrueTypeFont = staticmethod(_PDFNetPython2.Font_CreateTrueTypeFont)
    e_IdentityH = _PDFNetPython2.Font_e_IdentityH
    e_Indices = _PDFNetPython2.Font_e_Indices
    __swig_getmethods__["CreateCIDTrueTypeFont"] = lambda x: _PDFNetPython2.Font_CreateCIDTrueTypeFont
    if _newclass:CreateCIDTrueTypeFont = staticmethod(_PDFNetPython2.Font_CreateCIDTrueTypeFont)
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Font_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Font_Create)
    __swig_getmethods__["CreateType1Font"] = lambda x: _PDFNetPython2.Font_CreateType1Font
    if _newclass:CreateType1Font = staticmethod(_PDFNetPython2.Font_CreateType1Font)
    e_Type1 = _PDFNetPython2.Font_e_Type1
    e_TrueType = _PDFNetPython2.Font_e_TrueType
    e_MMType1 = _PDFNetPython2.Font_e_MMType1
    e_Type3 = _PDFNetPython2.Font_e_Type3
    e_Type0 = _PDFNetPython2.Font_e_Type0
    e_CIDType0 = _PDFNetPython2.Font_e_CIDType0
    e_CIDType2 = _PDFNetPython2.Font_e_CIDType2
    def GetType(self): return _PDFNetPython2.Font_GetType(self)
    def IsSimple(self): return _PDFNetPython2.Font_IsSimple(self)
    def GetSDFObj(self): return _PDFNetPython2.Font_GetSDFObj(self)
    def GetDescriptor(self): return _PDFNetPython2.Font_GetDescriptor(self)
    def GetName(self): return _PDFNetPython2.Font_GetName(self)
    def GetFamilyName(self): return _PDFNetPython2.Font_GetFamilyName(self)
    def IsFixedWidth(self): return _PDFNetPython2.Font_IsFixedWidth(self)
    def IsSerif(self): return _PDFNetPython2.Font_IsSerif(self)
    def IsSymbolic(self): return _PDFNetPython2.Font_IsSymbolic(self)
    def IsItalic(self): return _PDFNetPython2.Font_IsItalic(self)
    def IsAllCap(self): return _PDFNetPython2.Font_IsAllCap(self)
    def IsForceBold(self): return _PDFNetPython2.Font_IsForceBold(self)
    def IsHorizontalMode(self): return _PDFNetPython2.Font_IsHorizontalMode(self)
    def GetWidth(self, *args): return _PDFNetPython2.Font_GetWidth(self, *args)
    def GetMaxWidth(self): return _PDFNetPython2.Font_GetMaxWidth(self)
    def GetMissingWidth(self): return _PDFNetPython2.Font_GetMissingWidth(self)
    def GetCharCodeIterator(self): return _PDFNetPython2.Font_GetCharCodeIterator(self)
    def GetGlyphPath(self, *args): return _PDFNetPython2.Font_GetGlyphPath(self, *args)
    def MapToUnicode(self, *args): return _PDFNetPython2.Font_MapToUnicode(self, *args)
    def IsEmbedded(self): return _PDFNetPython2.Font_IsEmbedded(self)
    def GetEmbeddedFontName(self): return _PDFNetPython2.Font_GetEmbeddedFontName(self)
    def GetEmbeddedFont(self): return _PDFNetPython2.Font_GetEmbeddedFont(self)
    def GetEmbeddedFontBufSize(self): return _PDFNetPython2.Font_GetEmbeddedFontBufSize(self)
    def GetUnitsPerEm(self): return _PDFNetPython2.Font_GetUnitsPerEm(self)
    def GetBBox(self): return _PDFNetPython2.Font_GetBBox(self)
    def GetAscent(self): return _PDFNetPython2.Font_GetAscent(self)
    def GetDescent(self): return _PDFNetPython2.Font_GetDescent(self)
    def GetStandardType1FontType(self): return _PDFNetPython2.Font_GetStandardType1FontType(self)
    def IsCFF(self): return _PDFNetPython2.Font_IsCFF(self)
    def GetType3FontMatrix(self): return _PDFNetPython2.Font_GetType3FontMatrix(self)
    def GetType3GlyphStream(self, *args): return _PDFNetPython2.Font_GetType3GlyphStream(self, *args)
    def GetVerticalAdvance(self, *args): return _PDFNetPython2.Font_GetVerticalAdvance(self, *args)
    def GetDescendant(self): return _PDFNetPython2.Font_GetDescendant(self)
    def MapToCID(self, *args): return _PDFNetPython2.Font_MapToCID(self, *args)
    def Destroy(self): return _PDFNetPython2.Font_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Font(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Font
    __del__ = lambda self : None;
    __swig_setmethods__["mp_font"] = _PDFNetPython2.Font_mp_font_set
    __swig_getmethods__["mp_font"] = _PDFNetPython2.Font_mp_font_get
    if _newclass:mp_font = _swig_property(_PDFNetPython2.Font_mp_font_get, _PDFNetPython2.Font_mp_font_set)
Font_swigregister = _PDFNetPython2.Font_swigregister
Font_swigregister(Font)

def Font_CreateTrueTypeFont(*args):
  return _PDFNetPython2.Font_CreateTrueTypeFont(*args)
Font_CreateTrueTypeFont = _PDFNetPython2.Font_CreateTrueTypeFont

def Font_CreateCIDTrueTypeFont(*args):
  return _PDFNetPython2.Font_CreateCIDTrueTypeFont(*args)
Font_CreateCIDTrueTypeFont = _PDFNetPython2.Font_CreateCIDTrueTypeFont

def Font_Create(*args):
  return _PDFNetPython2.Font_Create(*args)
Font_Create = _PDFNetPython2.Font_Create

def Font_CreateType1Font(*args):
  return _PDFNetPython2.Font_CreateType1Font(*args)
Font_CreateType1Font = _PDFNetPython2.Font_CreateType1Font

class Shading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shading, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_Shading
    __del__ = lambda self : None;
    e_function_shading = _PDFNetPython2.Shading_e_function_shading
    e_axial_shading = _PDFNetPython2.Shading_e_axial_shading
    e_radial_shading = _PDFNetPython2.Shading_e_radial_shading
    e_free_gouraud_shading = _PDFNetPython2.Shading_e_free_gouraud_shading
    e_lattice_gouraud_shading = _PDFNetPython2.Shading_e_lattice_gouraud_shading
    e_coons_shading = _PDFNetPython2.Shading_e_coons_shading
    e_tensor_shading = _PDFNetPython2.Shading_e_tensor_shading
    e_null = _PDFNetPython2.Shading_e_null
    def GetType(self): return _PDFNetPython2.Shading_GetType(self)
    def GetSDFObj(self): return _PDFNetPython2.Shading_GetSDFObj(self)
    def GetBaseColorSpace(self): return _PDFNetPython2.Shading_GetBaseColorSpace(self)
    def HasBBox(self): return _PDFNetPython2.Shading_HasBBox(self)
    def GetBBox(self): return _PDFNetPython2.Shading_GetBBox(self)
    def HasBackground(self): return _PDFNetPython2.Shading_HasBackground(self)
    def GetBackground(self): return _PDFNetPython2.Shading_GetBackground(self)
    def GetAntialias(self): return _PDFNetPython2.Shading_GetAntialias(self)
    def GetParamStart(self): return _PDFNetPython2.Shading_GetParamStart(self)
    def GetParamEnd(self): return _PDFNetPython2.Shading_GetParamEnd(self)
    def IsExtendStart(self): return _PDFNetPython2.Shading_IsExtendStart(self)
    def IsExtendEnd(self): return _PDFNetPython2.Shading_IsExtendEnd(self)
    def GetCoordsAxial(self): return _PDFNetPython2.Shading_GetCoordsAxial(self)
    def GetCoordsRadial(self): return _PDFNetPython2.Shading_GetCoordsRadial(self)
    def GetDomain(self): return _PDFNetPython2.Shading_GetDomain(self)
    def GetMatrix(self): return _PDFNetPython2.Shading_GetMatrix(self)
    def GetColor(self, *args): return _PDFNetPython2.Shading_GetColor(self, *args)
    def Destroy(self): return _PDFNetPython2.Shading_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Shading(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_shade"] = _PDFNetPython2.Shading_mp_shade_set
    __swig_getmethods__["mp_shade"] = _PDFNetPython2.Shading_mp_shade_get
    if _newclass:mp_shade = _swig_property(_PDFNetPython2.Shading_mp_shade_get, _PDFNetPython2.Shading_mp_shade_set)
Shading_swigregister = _PDFNetPython2.Shading_swigregister
Shading_swigregister(Shading)

class PatternColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PatternColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PatternColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_PatternColor
    __del__ = lambda self : None;
    e_uncolored_tiling_pattern = _PDFNetPython2.PatternColor_e_uncolored_tiling_pattern
    e_colored_tiling_pattern = _PDFNetPython2.PatternColor_e_colored_tiling_pattern
    e_shading = _PDFNetPython2.PatternColor_e_shading
    e_null = _PDFNetPython2.PatternColor_e_null
    def GetType(self): return _PDFNetPython2.PatternColor_GetType(self)
    def GetSDFObj(self): return _PDFNetPython2.PatternColor_GetSDFObj(self)
    def GetMatrix(self): return _PDFNetPython2.PatternColor_GetMatrix(self)
    def GetShading(self): return _PDFNetPython2.PatternColor_GetShading(self)
    e_constant_spacing = _PDFNetPython2.PatternColor_e_constant_spacing
    e_no_distortion = _PDFNetPython2.PatternColor_e_no_distortion
    e_constant_spacing_fast_fill = _PDFNetPython2.PatternColor_e_constant_spacing_fast_fill
    def GetTilingType(self): return _PDFNetPython2.PatternColor_GetTilingType(self)
    def GetBBox(self): return _PDFNetPython2.PatternColor_GetBBox(self)
    def GetXStep(self): return _PDFNetPython2.PatternColor_GetXStep(self)
    def GetYStep(self): return _PDFNetPython2.PatternColor_GetYStep(self)
    def Destroy(self): return _PDFNetPython2.PatternColor_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PatternColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_pc"] = _PDFNetPython2.PatternColor_mp_pc_set
    __swig_getmethods__["mp_pc"] = _PDFNetPython2.PatternColor_mp_pc_get
    if _newclass:mp_pc = _swig_property(_PDFNetPython2.PatternColor_mp_pc_get, _PDFNetPython2.PatternColor_mp_pc_set)
PatternColor_swigregister = _PDFNetPython2.PatternColor_swigregister
PatternColor_swigregister(PatternColor)

class GState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GState, name)
    __repr__ = _swig_repr
    e_transform = _PDFNetPython2.GState_e_transform
    e_rendering_intent = _PDFNetPython2.GState_e_rendering_intent
    e_stroke_cs = _PDFNetPython2.GState_e_stroke_cs
    e_stroke_color = _PDFNetPython2.GState_e_stroke_color
    e_fill_cs = _PDFNetPython2.GState_e_fill_cs
    e_fill_color = _PDFNetPython2.GState_e_fill_color
    e_line_width = _PDFNetPython2.GState_e_line_width
    e_line_cap = _PDFNetPython2.GState_e_line_cap
    e_line_join = _PDFNetPython2.GState_e_line_join
    e_flatness = _PDFNetPython2.GState_e_flatness
    e_miter_limit = _PDFNetPython2.GState_e_miter_limit
    e_dash_pattern = _PDFNetPython2.GState_e_dash_pattern
    e_char_spacing = _PDFNetPython2.GState_e_char_spacing
    e_word_spacing = _PDFNetPython2.GState_e_word_spacing
    e_horizontal_scale = _PDFNetPython2.GState_e_horizontal_scale
    e_leading = _PDFNetPython2.GState_e_leading
    e_font = _PDFNetPython2.GState_e_font
    e_font_size = _PDFNetPython2.GState_e_font_size
    e_text_render_mode = _PDFNetPython2.GState_e_text_render_mode
    e_text_rise = _PDFNetPython2.GState_e_text_rise
    e_text_knockout = _PDFNetPython2.GState_e_text_knockout
    e_text_pos_offset = _PDFNetPython2.GState_e_text_pos_offset
    e_blend_mode = _PDFNetPython2.GState_e_blend_mode
    e_opacity_fill = _PDFNetPython2.GState_e_opacity_fill
    e_opacity_stroke = _PDFNetPython2.GState_e_opacity_stroke
    e_alpha_is_shape = _PDFNetPython2.GState_e_alpha_is_shape
    e_soft_mask = _PDFNetPython2.GState_e_soft_mask
    e_smoothnes = _PDFNetPython2.GState_e_smoothnes
    e_auto_stoke_adjust = _PDFNetPython2.GState_e_auto_stoke_adjust
    e_stroke_overprint = _PDFNetPython2.GState_e_stroke_overprint
    e_fill_overprint = _PDFNetPython2.GState_e_fill_overprint
    e_overprint_mode = _PDFNetPython2.GState_e_overprint_mode
    e_transfer_funct = _PDFNetPython2.GState_e_transfer_funct
    e_BG_funct = _PDFNetPython2.GState_e_BG_funct
    e_UCR_funct = _PDFNetPython2.GState_e_UCR_funct
    e_halftone = _PDFNetPython2.GState_e_halftone
    e_null = _PDFNetPython2.GState_e_null
    def GetTransform(self): return _PDFNetPython2.GState_GetTransform(self)
    def GetStrokeColorSpace(self): return _PDFNetPython2.GState_GetStrokeColorSpace(self)
    def GetFillColorSpace(self): return _PDFNetPython2.GState_GetFillColorSpace(self)
    def GetStrokeColor(self): return _PDFNetPython2.GState_GetStrokeColor(self)
    def GetStrokePattern(self): return _PDFNetPython2.GState_GetStrokePattern(self)
    def GetFillColor(self): return _PDFNetPython2.GState_GetFillColor(self)
    def GetFillPattern(self): return _PDFNetPython2.GState_GetFillPattern(self)
    def GetFlatness(self): return _PDFNetPython2.GState_GetFlatness(self)
    e_butt_cap = _PDFNetPython2.GState_e_butt_cap
    e_round_cap = _PDFNetPython2.GState_e_round_cap
    e_square_cap = _PDFNetPython2.GState_e_square_cap
    def GetLineCap(self): return _PDFNetPython2.GState_GetLineCap(self)
    e_miter_join = _PDFNetPython2.GState_e_miter_join
    e_round_join = _PDFNetPython2.GState_e_round_join
    e_bevel_join = _PDFNetPython2.GState_e_bevel_join
    def GetLineJoin(self): return _PDFNetPython2.GState_GetLineJoin(self)
    def GetLineWidth(self): return _PDFNetPython2.GState_GetLineWidth(self)
    def GetMiterLimit(self): return _PDFNetPython2.GState_GetMiterLimit(self)
    def GetDashes(self): return _PDFNetPython2.GState_GetDashes(self)
    def GetPhase(self): return _PDFNetPython2.GState_GetPhase(self)
    def GetCharSpacing(self): return _PDFNetPython2.GState_GetCharSpacing(self)
    def GetWordSpacing(self): return _PDFNetPython2.GState_GetWordSpacing(self)
    def GetHorizontalScale(self): return _PDFNetPython2.GState_GetHorizontalScale(self)
    def GetLeading(self): return _PDFNetPython2.GState_GetLeading(self)
    def GetFont(self): return _PDFNetPython2.GState_GetFont(self)
    def GetFontSize(self): return _PDFNetPython2.GState_GetFontSize(self)
    e_fill_text = _PDFNetPython2.GState_e_fill_text
    e_stroke_text = _PDFNetPython2.GState_e_stroke_text
    e_fill_stroke_text = _PDFNetPython2.GState_e_fill_stroke_text
    e_invisible_text = _PDFNetPython2.GState_e_invisible_text
    e_fill_clip_text = _PDFNetPython2.GState_e_fill_clip_text
    e_stroke_clip_text = _PDFNetPython2.GState_e_stroke_clip_text
    e_fill_stroke_clip_text = _PDFNetPython2.GState_e_fill_stroke_clip_text
    e_clip_text = _PDFNetPython2.GState_e_clip_text
    def GetTextRenderMode(self): return _PDFNetPython2.GState_GetTextRenderMode(self)
    def GetTextRise(self): return _PDFNetPython2.GState_GetTextRise(self)
    def IsTextKnockout(self): return _PDFNetPython2.GState_IsTextKnockout(self)
    e_absolute_colorimetric = _PDFNetPython2.GState_e_absolute_colorimetric
    e_relative_colorimetric = _PDFNetPython2.GState_e_relative_colorimetric
    e_saturation = _PDFNetPython2.GState_e_saturation
    e_perceptual = _PDFNetPython2.GState_e_perceptual
    def GetRenderingIntent(self): return _PDFNetPython2.GState_GetRenderingIntent(self)
    __swig_getmethods__["GetRenderingIntentType"] = lambda x: _PDFNetPython2.GState_GetRenderingIntentType
    if _newclass:GetRenderingIntentType = staticmethod(_PDFNetPython2.GState_GetRenderingIntentType)
    e_bl_compatible = _PDFNetPython2.GState_e_bl_compatible
    e_bl_normal = _PDFNetPython2.GState_e_bl_normal
    e_bl_multiply = _PDFNetPython2.GState_e_bl_multiply
    e_bl_screen = _PDFNetPython2.GState_e_bl_screen
    e_bl_difference = _PDFNetPython2.GState_e_bl_difference
    e_bl_darken = _PDFNetPython2.GState_e_bl_darken
    e_bl_lighten = _PDFNetPython2.GState_e_bl_lighten
    e_bl_color_dodge = _PDFNetPython2.GState_e_bl_color_dodge
    e_bl_color_burn = _PDFNetPython2.GState_e_bl_color_burn
    e_bl_exclusion = _PDFNetPython2.GState_e_bl_exclusion
    e_bl_hard_light = _PDFNetPython2.GState_e_bl_hard_light
    e_bl_overlay = _PDFNetPython2.GState_e_bl_overlay
    e_bl_soft_light = _PDFNetPython2.GState_e_bl_soft_light
    e_bl_luminosity = _PDFNetPython2.GState_e_bl_luminosity
    e_bl_hue = _PDFNetPython2.GState_e_bl_hue
    e_bl_saturation = _PDFNetPython2.GState_e_bl_saturation
    e_bl_color = _PDFNetPython2.GState_e_bl_color
    def GetBlendMode(self): return _PDFNetPython2.GState_GetBlendMode(self)
    def GetFillOpacity(self): return _PDFNetPython2.GState_GetFillOpacity(self)
    def GetStrokeOpacity(self): return _PDFNetPython2.GState_GetStrokeOpacity(self)
    def GetAISFlag(self): return _PDFNetPython2.GState_GetAISFlag(self)
    def GetSoftMask(self): return _PDFNetPython2.GState_GetSoftMask(self)
    def GetSoftMaskTransform(self): return _PDFNetPython2.GState_GetSoftMaskTransform(self)
    def GetStrokeOverprint(self): return _PDFNetPython2.GState_GetStrokeOverprint(self)
    def GetFillOverprint(self): return _PDFNetPython2.GState_GetFillOverprint(self)
    def GetOverprintMode(self): return _PDFNetPython2.GState_GetOverprintMode(self)
    def GetAutoStrokeAdjust(self): return _PDFNetPython2.GState_GetAutoStrokeAdjust(self)
    def GetSmoothnessTolerance(self): return _PDFNetPython2.GState_GetSmoothnessTolerance(self)
    def GetTransferFunct(self): return _PDFNetPython2.GState_GetTransferFunct(self)
    def GetBlackGenFunct(self): return _PDFNetPython2.GState_GetBlackGenFunct(self)
    def GetUCRFunct(self): return _PDFNetPython2.GState_GetUCRFunct(self)
    def GetHalftone(self): return _PDFNetPython2.GState_GetHalftone(self)
    def SetTransform(self, *args): return _PDFNetPython2.GState_SetTransform(self, *args)
    def Concat(self, *args): return _PDFNetPython2.GState_Concat(self, *args)
    def SetStrokeColorSpace(self, *args): return _PDFNetPython2.GState_SetStrokeColorSpace(self, *args)
    def SetFillColorSpace(self, *args): return _PDFNetPython2.GState_SetFillColorSpace(self, *args)
    def SetStrokeColor(self, *args): return _PDFNetPython2.GState_SetStrokeColor(self, *args)
    def SetFillColor(self, *args): return _PDFNetPython2.GState_SetFillColor(self, *args)
    def SetFlatness(self, *args): return _PDFNetPython2.GState_SetFlatness(self, *args)
    def SetLineCap(self, *args): return _PDFNetPython2.GState_SetLineCap(self, *args)
    def SetLineJoin(self, *args): return _PDFNetPython2.GState_SetLineJoin(self, *args)
    def SetLineWidth(self, *args): return _PDFNetPython2.GState_SetLineWidth(self, *args)
    def SetMiterLimit(self, *args): return _PDFNetPython2.GState_SetMiterLimit(self, *args)
    def SetDashPattern(self, *args): return _PDFNetPython2.GState_SetDashPattern(self, *args)
    def SetCharSpacing(self, *args): return _PDFNetPython2.GState_SetCharSpacing(self, *args)
    def SetWordSpacing(self, *args): return _PDFNetPython2.GState_SetWordSpacing(self, *args)
    def SetHorizontalScale(self, *args): return _PDFNetPython2.GState_SetHorizontalScale(self, *args)
    def SetLeading(self, *args): return _PDFNetPython2.GState_SetLeading(self, *args)
    def SetFont(self, *args): return _PDFNetPython2.GState_SetFont(self, *args)
    def SetTextRenderMode(self, *args): return _PDFNetPython2.GState_SetTextRenderMode(self, *args)
    def SetTextRise(self, *args): return _PDFNetPython2.GState_SetTextRise(self, *args)
    def SetTextKnockout(self, *args): return _PDFNetPython2.GState_SetTextKnockout(self, *args)
    def SetRenderingIntent(self, *args): return _PDFNetPython2.GState_SetRenderingIntent(self, *args)
    def SetBlendMode(self, *args): return _PDFNetPython2.GState_SetBlendMode(self, *args)
    def SetFillOpacity(self, *args): return _PDFNetPython2.GState_SetFillOpacity(self, *args)
    def SetStrokeOpacity(self, *args): return _PDFNetPython2.GState_SetStrokeOpacity(self, *args)
    def SetAISFlag(self, *args): return _PDFNetPython2.GState_SetAISFlag(self, *args)
    def SetSoftMask(self, *args): return _PDFNetPython2.GState_SetSoftMask(self, *args)
    def SetStrokeOverprint(self, *args): return _PDFNetPython2.GState_SetStrokeOverprint(self, *args)
    def SetFillOverprint(self, *args): return _PDFNetPython2.GState_SetFillOverprint(self, *args)
    def SetOverprintMode(self, *args): return _PDFNetPython2.GState_SetOverprintMode(self, *args)
    def SetAutoStrokeAdjust(self, *args): return _PDFNetPython2.GState_SetAutoStrokeAdjust(self, *args)
    def SetSmoothnessTolerance(self, *args): return _PDFNetPython2.GState_SetSmoothnessTolerance(self, *args)
    def SetBlackGenFunct(self, *args): return _PDFNetPython2.GState_SetBlackGenFunct(self, *args)
    def SetUCRFunct(self, *args): return _PDFNetPython2.GState_SetUCRFunct(self, *args)
    def SetTransferFunct(self, *args): return _PDFNetPython2.GState_SetTransferFunct(self, *args)
    def SetHalftone(self, *args): return _PDFNetPython2.GState_SetHalftone(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_GState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_state"] = _PDFNetPython2.GState_mp_state_set
    __swig_getmethods__["mp_state"] = _PDFNetPython2.GState_mp_state_get
    if _newclass:mp_state = _swig_property(_PDFNetPython2.GState_mp_state_get, _PDFNetPython2.GState_mp_state_set)
    __swig_destroy__ = _PDFNetPython2.delete_GState
    __del__ = lambda self : None;
GState_swigregister = _PDFNetPython2.GState_swigregister
GState_swigregister(GState)

def GState_GetRenderingIntentType(*args):
  return _PDFNetPython2.GState_GetRenderingIntentType(*args)
GState_GetRenderingIntentType = _PDFNetPython2.GState_GetRenderingIntentType

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    __swig_getmethods__["CreateImageMask"] = lambda x: _PDFNetPython2.Image_CreateImageMask
    if _newclass:CreateImageMask = staticmethod(_PDFNetPython2.Image_CreateImageMask)
    __swig_getmethods__["CreateSoftMask"] = lambda x: _PDFNetPython2.Image_CreateSoftMask
    if _newclass:CreateSoftMask = staticmethod(_PDFNetPython2.Image_CreateSoftMask)
    e_none = _PDFNetPython2.Image_e_none
    e_jpeg = _PDFNetPython2.Image_e_jpeg
    e_jp2 = _PDFNetPython2.Image_e_jp2
    e_flate = _PDFNetPython2.Image_e_flate
    e_g3 = _PDFNetPython2.Image_e_g3
    e_g4 = _PDFNetPython2.Image_e_g4
    e_ascii_hex = _PDFNetPython2.Image_e_ascii_hex
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.Image_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.Image_Create)
    def GetSDFObj(self): return _PDFNetPython2.Image_GetSDFObj(self)
    def IsValid(self): return _PDFNetPython2.Image_IsValid(self)
    def GetImageData(self): return _PDFNetPython2.Image_GetImageData(self)
    def GetImageDataSize(self): return _PDFNetPython2.Image_GetImageDataSize(self)
    def GetImageColorSpace(self): return _PDFNetPython2.Image_GetImageColorSpace(self)
    def GetImageWidth(self): return _PDFNetPython2.Image_GetImageWidth(self)
    def GetImageHeight(self): return _PDFNetPython2.Image_GetImageHeight(self)
    def GetDecodeArray(self): return _PDFNetPython2.Image_GetDecodeArray(self)
    def GetBitsPerComponent(self): return _PDFNetPython2.Image_GetBitsPerComponent(self)
    def GetComponentNum(self): return _PDFNetPython2.Image_GetComponentNum(self)
    def IsImageMask(self): return _PDFNetPython2.Image_IsImageMask(self)
    def IsImageInterpolate(self): return _PDFNetPython2.Image_IsImageInterpolate(self)
    def GetMask(self): return _PDFNetPython2.Image_GetMask(self)
    def SetMask(self, *args): return _PDFNetPython2.Image_SetMask(self, *args)
    def GetSoftMask(self): return _PDFNetPython2.Image_GetSoftMask(self)
    def SetSoftMask(self, *args): return _PDFNetPython2.Image_SetSoftMask(self, *args)
    def GetImageRenderingIntent(self): return _PDFNetPython2.Image_GetImageRenderingIntent(self)
    def Export(self, *args): return _PDFNetPython2.Image_Export(self, *args)
    def ExportAsTiff(self, *args): return _PDFNetPython2.Image_ExportAsTiff(self, *args)
    def ExportAsPng(self, *args): return _PDFNetPython2.Image_ExportAsPng(self, *args)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_image"] = _PDFNetPython2.Image_mp_image_set
    __swig_getmethods__["mp_image"] = _PDFNetPython2.Image_mp_image_get
    if _newclass:mp_image = _swig_property(_PDFNetPython2.Image_mp_image_get, _PDFNetPython2.Image_mp_image_set)
    __swig_destroy__ = _PDFNetPython2.delete_Image
    __del__ = lambda self : None;
Image_swigregister = _PDFNetPython2.Image_swigregister
Image_swigregister(Image)

def Image_CreateImageMask(*args):
  return _PDFNetPython2.Image_CreateImageMask(*args)
Image_CreateImageMask = _PDFNetPython2.Image_CreateImageMask

def Image_CreateSoftMask(*args):
  return _PDFNetPython2.Image_CreateSoftMask(*args)
Image_CreateSoftMask = _PDFNetPython2.Image_CreateSoftMask

def Image_Create(*args):
  return _PDFNetPython2.Image_Create(*args)
Image_Create = _PDFNetPython2.Image_Create

class Element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    __repr__ = _swig_repr
    e_null = _PDFNetPython2.Element_e_null
    e_path = _PDFNetPython2.Element_e_path
    e_text_begin = _PDFNetPython2.Element_e_text_begin
    e_text = _PDFNetPython2.Element_e_text
    e_text_new_line = _PDFNetPython2.Element_e_text_new_line
    e_text_end = _PDFNetPython2.Element_e_text_end
    e_image = _PDFNetPython2.Element_e_image
    e_inline_image = _PDFNetPython2.Element_e_inline_image
    e_shading = _PDFNetPython2.Element_e_shading
    e_form = _PDFNetPython2.Element_e_form
    e_group_begin = _PDFNetPython2.Element_e_group_begin
    e_group_end = _PDFNetPython2.Element_e_group_end
    e_marked_content_begin = _PDFNetPython2.Element_e_marked_content_begin
    e_marked_content_end = _PDFNetPython2.Element_e_marked_content_end
    e_marked_content_point = _PDFNetPython2.Element_e_marked_content_point
    def __nonzero__(self):
        return _PDFNetPython2.Element___nonzero__(self)
    __bool__ = __nonzero__


    def GetType(self): return _PDFNetPython2.Element_GetType(self)
    def GetGState(self): return _PDFNetPython2.Element_GetGState(self)
    def GetCTM(self): return _PDFNetPython2.Element_GetCTM(self)
    def GetBBox(self): return _PDFNetPython2.Element_GetBBox(self)
    def GetParentStructElement(self): return _PDFNetPython2.Element_GetParentStructElement(self)
    def GetStructMCID(self): return _PDFNetPython2.Element_GetStructMCID(self)
    def IsOCVisible(self): return _PDFNetPython2.Element_IsOCVisible(self)
    def IsClippingPath(self): return _PDFNetPython2.Element_IsClippingPath(self)
    def IsStroked(self): return _PDFNetPython2.Element_IsStroked(self)
    def IsFilled(self): return _PDFNetPython2.Element_IsFilled(self)
    def IsWindingFill(self): return _PDFNetPython2.Element_IsWindingFill(self)
    def IsClipWindingFill(self): return _PDFNetPython2.Element_IsClipWindingFill(self)
    def GetPathData(self): return _PDFNetPython2.Element_GetPathData(self)
    def SetPathData(self, *args): return _PDFNetPython2.Element_SetPathData(self, *args)
    def SetPathClip(self, *args): return _PDFNetPython2.Element_SetPathClip(self, *args)
    def SetPathStroke(self, *args): return _PDFNetPython2.Element_SetPathStroke(self, *args)
    def SetPathFill(self, *args): return _PDFNetPython2.Element_SetPathFill(self, *args)
    def SetWindingFill(self, *args): return _PDFNetPython2.Element_SetWindingFill(self, *args)
    def SetClipWindingFill(self, *args): return _PDFNetPython2.Element_SetClipWindingFill(self, *args)
    def GetXObject(self): return _PDFNetPython2.Element_GetXObject(self)
    def GetImageData(self): return _PDFNetPython2.Element_GetImageData(self)
    def GetImageDataSize(self): return _PDFNetPython2.Element_GetImageDataSize(self)
    def GetImageColorSpace(self): return _PDFNetPython2.Element_GetImageColorSpace(self)
    def GetImageWidth(self): return _PDFNetPython2.Element_GetImageWidth(self)
    def GetImageHeight(self): return _PDFNetPython2.Element_GetImageHeight(self)
    def GetDecodeArray(self): return _PDFNetPython2.Element_GetDecodeArray(self)
    def GetBitsPerComponent(self): return _PDFNetPython2.Element_GetBitsPerComponent(self)
    def GetComponentNum(self): return _PDFNetPython2.Element_GetComponentNum(self)
    def IsImageMask(self): return _PDFNetPython2.Element_IsImageMask(self)
    def IsImageInterpolate(self): return _PDFNetPython2.Element_IsImageInterpolate(self)
    def GetMask(self): return _PDFNetPython2.Element_GetMask(self)
    def GetImageRenderingIntent(self): return _PDFNetPython2.Element_GetImageRenderingIntent(self)
    def GetTextString(self): return _PDFNetPython2.Element_GetTextString(self)
    def GetTextData(self): return _PDFNetPython2.Element_GetTextData(self)
    def GetTextDataSize(self): return _PDFNetPython2.Element_GetTextDataSize(self)
    def GetTextMatrix(self): return _PDFNetPython2.Element_GetTextMatrix(self)
    def GetCharIterator(self): return _PDFNetPython2.Element_GetCharIterator(self)
    def GetTextLength(self): return _PDFNetPython2.Element_GetTextLength(self)
    def GetPosAdjustment(self): return _PDFNetPython2.Element_GetPosAdjustment(self)
    def GetNewTextLineOffset(self): return _PDFNetPython2.Element_GetNewTextLineOffset(self)
    def SetNewTextLineOffset(self, *args): return _PDFNetPython2.Element_SetNewTextLineOffset(self, *args)
    def HasTextMatrix(self): return _PDFNetPython2.Element_HasTextMatrix(self)
    def SetTextData(self, *args): return _PDFNetPython2.Element_SetTextData(self, *args)
    def SetTextMatrix(self, *args): return _PDFNetPython2.Element_SetTextMatrix(self, *args)
    def SetPosAdjustment(self, *args): return _PDFNetPython2.Element_SetPosAdjustment(self, *args)
    def UpdateTextMetrics(self): return _PDFNetPython2.Element_UpdateTextMetrics(self)
    def GetShading(self): return _PDFNetPython2.Element_GetShading(self)
    def GetMCPropertyDict(self): return _PDFNetPython2.Element_GetMCPropertyDict(self)
    def GetMCTag(self): return _PDFNetPython2.Element_GetMCTag(self)
    __swig_destroy__ = _PDFNetPython2.delete_Element
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Element(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_elem"] = _PDFNetPython2.Element_mp_elem_set
    __swig_getmethods__["mp_elem"] = _PDFNetPython2.Element_mp_elem_get
    if _newclass:mp_elem = _swig_property(_PDFNetPython2.Element_mp_elem_get, _PDFNetPython2.Element_mp_elem_set)
Element_swigregister = _PDFNetPython2.Element_swigregister
Element_swigregister(Element)

class ElementBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementBuilder, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_ElementBuilder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_ElementBuilder
    __del__ = lambda self : None;
    def Reset(self, *args): return _PDFNetPython2.ElementBuilder_Reset(self, *args)
    def CreateImage(self, *args): return _PDFNetPython2.ElementBuilder_CreateImage(self, *args)
    def CreateGroupBegin(self): return _PDFNetPython2.ElementBuilder_CreateGroupBegin(self)
    def CreateGroupEnd(self): return _PDFNetPython2.ElementBuilder_CreateGroupEnd(self)
    def CreateShading(self, *args): return _PDFNetPython2.ElementBuilder_CreateShading(self, *args)
    def CreateForm(self, *args): return _PDFNetPython2.ElementBuilder_CreateForm(self, *args)
    def CreateTextBegin(self, *args): return _PDFNetPython2.ElementBuilder_CreateTextBegin(self, *args)
    def CreateTextEnd(self): return _PDFNetPython2.ElementBuilder_CreateTextEnd(self)
    def CreateTextRun(self, *args): return _PDFNetPython2.ElementBuilder_CreateTextRun(self, *args)
    def CreateUnicodeTextRun(self, *args): return _PDFNetPython2.ElementBuilder_CreateUnicodeTextRun(self, *args)
    def CreateTextNewLine(self, *args): return _PDFNetPython2.ElementBuilder_CreateTextNewLine(self, *args)
    def CreatePath(self, *args): return _PDFNetPython2.ElementBuilder_CreatePath(self, *args)
    def CreateRect(self, *args): return _PDFNetPython2.ElementBuilder_CreateRect(self, *args)
    def CreateEllipse(self, *args): return _PDFNetPython2.ElementBuilder_CreateEllipse(self, *args)
    def PathBegin(self): return _PDFNetPython2.ElementBuilder_PathBegin(self)
    def PathEnd(self): return _PDFNetPython2.ElementBuilder_PathEnd(self)
    def MoveTo(self, *args): return _PDFNetPython2.ElementBuilder_MoveTo(self, *args)
    def LineTo(self, *args): return _PDFNetPython2.ElementBuilder_LineTo(self, *args)
    def CurveTo(self, *args): return _PDFNetPython2.ElementBuilder_CurveTo(self, *args)
    def ArcTo(self, *args): return _PDFNetPython2.ElementBuilder_ArcTo(self, *args)
    def Ellipse(self, *args): return _PDFNetPython2.ElementBuilder_Ellipse(self, *args)
    def Rect(self, *args): return _PDFNetPython2.ElementBuilder_Rect(self, *args)
    def ClosePath(self): return _PDFNetPython2.ElementBuilder_ClosePath(self)
    def Destroy(self): return _PDFNetPython2.ElementBuilder_Destroy(self)
    __swig_setmethods__["mp_builder"] = _PDFNetPython2.ElementBuilder_mp_builder_set
    __swig_getmethods__["mp_builder"] = _PDFNetPython2.ElementBuilder_mp_builder_get
    if _newclass:mp_builder = _swig_property(_PDFNetPython2.ElementBuilder_mp_builder_get, _PDFNetPython2.ElementBuilder_mp_builder_set)
ElementBuilder_swigregister = _PDFNetPython2.ElementBuilder_swigregister
ElementBuilder_swigregister(ElementBuilder)

class ElementReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementReader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_ElementReader
    __del__ = lambda self : None;
    def Begin(self, *args): return _PDFNetPython2.ElementReader_Begin(self, *args)
    def Next(self): return _PDFNetPython2.ElementReader_Next(self)
    def Current(self): return _PDFNetPython2.ElementReader_Current(self)
    def FormBegin(self): return _PDFNetPython2.ElementReader_FormBegin(self)
    def PatternBegin(self, *args): return _PDFNetPython2.ElementReader_PatternBegin(self, *args)
    def Type3FontBegin(self, *args): return _PDFNetPython2.ElementReader_Type3FontBegin(self, *args)
    def End(self): return _PDFNetPython2.ElementReader_End(self)
    def GetChangesIterator(self): return _PDFNetPython2.ElementReader_GetChangesIterator(self)
    def IsChanged(self, *args): return _PDFNetPython2.ElementReader_IsChanged(self, *args)
    def ClearChangeList(self): return _PDFNetPython2.ElementReader_ClearChangeList(self)
    def GetFont(self, *args): return _PDFNetPython2.ElementReader_GetFont(self, *args)
    def GetXObject(self, *args): return _PDFNetPython2.ElementReader_GetXObject(self, *args)
    def GetShading(self, *args): return _PDFNetPython2.ElementReader_GetShading(self, *args)
    def GetColorSpace(self, *args): return _PDFNetPython2.ElementReader_GetColorSpace(self, *args)
    def GetPattern(self, *args): return _PDFNetPython2.ElementReader_GetPattern(self, *args)
    def GetExtGState(self, *args): return _PDFNetPython2.ElementReader_GetExtGState(self, *args)
    def Destroy(self): return _PDFNetPython2.ElementReader_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_ElementReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_reader"] = _PDFNetPython2.ElementReader_mp_reader_set
    __swig_getmethods__["mp_reader"] = _PDFNetPython2.ElementReader_mp_reader_get
    if _newclass:mp_reader = _swig_property(_PDFNetPython2.ElementReader_mp_reader_get, _PDFNetPython2.ElementReader_mp_reader_set)
ElementReader_swigregister = _PDFNetPython2.ElementReader_swigregister
ElementReader_swigregister(ElementReader)

class ElementWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementWriter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_ElementWriter
    __del__ = lambda self : None;
    e_underlay = _PDFNetPython2.ElementWriter_e_underlay
    e_overlay = _PDFNetPython2.ElementWriter_e_overlay
    e_replacement = _PDFNetPython2.ElementWriter_e_replacement
    def Begin(self, *args): return _PDFNetPython2.ElementWriter_Begin(self, *args)
    def End(self): return _PDFNetPython2.ElementWriter_End(self)
    def WriteElement(self, *args): return _PDFNetPython2.ElementWriter_WriteElement(self, *args)
    def WritePlacedElement(self, *args): return _PDFNetPython2.ElementWriter_WritePlacedElement(self, *args)
    def Flush(self): return _PDFNetPython2.ElementWriter_Flush(self)
    def WriteBuffer(self, *args): return _PDFNetPython2.ElementWriter_WriteBuffer(self, *args)
    def WriteString(self, *args): return _PDFNetPython2.ElementWriter_WriteString(self, *args)
    def Destroy(self): return _PDFNetPython2.ElementWriter_Destroy(self)
    __swig_setmethods__["mp_writer"] = _PDFNetPython2.ElementWriter_mp_writer_set
    __swig_getmethods__["mp_writer"] = _PDFNetPython2.ElementWriter_mp_writer_get
    if _newclass:mp_writer = _swig_property(_PDFNetPython2.ElementWriter_mp_writer_get, _PDFNetPython2.ElementWriter_mp_writer_set)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_ElementWriter(*args)
        try: self.this.append(this)
        except: self.this = this
ElementWriter_swigregister = _PDFNetPython2.ElementWriter_swigregister
ElementWriter_swigregister(ElementWriter)

class Image2RGB(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image2RGB, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image2RGB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Image2RGB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Image2RGB
    __del__ = lambda self : None;
Image2RGB_swigregister = _PDFNetPython2.Image2RGB_swigregister
Image2RGB_swigregister(Image2RGB)

class Image2RGBA(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image2RGBA, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image2RGBA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Image2RGBA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Image2RGBA
    __del__ = lambda self : None;
Image2RGBA_swigregister = _PDFNetPython2.Image2RGBA_swigregister
Image2RGBA_swigregister(Image2RGBA)

class Highlights(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Highlights, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Highlights, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython2.delete_Highlights
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Highlights(*args)
        try: self.this.append(this)
        except: self.this = this
    def Load(self, *args): return _PDFNetPython2.Highlights_Load(self, *args)
    def Save(self, *args): return _PDFNetPython2.Highlights_Save(self, *args)
    def Add(self, *args): return _PDFNetPython2.Highlights_Add(self, *args)
    def Clear(self): return _PDFNetPython2.Highlights_Clear(self)
    def Begin(self, *args): return _PDFNetPython2.Highlights_Begin(self, *args)
    def HasNext(self): return _PDFNetPython2.Highlights_HasNext(self)
    def Next(self): return _PDFNetPython2.Highlights_Next(self)
    def GetCurrentPageNumber(self): return _PDFNetPython2.Highlights_GetCurrentPageNumber(self)
    def GetCurrentQuads(self): return _PDFNetPython2.Highlights_GetCurrentQuads(self)
    def Destroy(self): return _PDFNetPython2.Highlights_Destroy(self)
Highlights_swigregister = _PDFNetPython2.Highlights_swigregister
Highlights_swigregister(Highlights)

class Optimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optimizer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Optimize"] = lambda x: _PDFNetPython2.Optimizer_Optimize
    if _newclass:Optimize = staticmethod(_PDFNetPython2.Optimizer_Optimize)
    __swig_destroy__ = _PDFNetPython2.delete_Optimizer
    __del__ = lambda self : None;
Optimizer_swigregister = _PDFNetPython2.Optimizer_swigregister
Optimizer_swigregister(Optimizer)

def Optimizer_Optimize(*args):
  return _PDFNetPython2.Optimizer_Optimize(*args)
Optimizer_Optimize = _PDFNetPython2.Optimizer_Optimize

class PageLabel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageLabel, name)
    __repr__ = _swig_repr
    e_decimal = _PDFNetPython2.PageLabel_e_decimal
    e_roman_uppercase = _PDFNetPython2.PageLabel_e_roman_uppercase
    e_roman_lowercase = _PDFNetPython2.PageLabel_e_roman_lowercase
    e_alphabetic_uppercase = _PDFNetPython2.PageLabel_e_alphabetic_uppercase
    e_alphabetic_lowercase = _PDFNetPython2.PageLabel_e_alphabetic_lowercase
    e_none = _PDFNetPython2.PageLabel_e_none
    __swig_getmethods__["Create"] = lambda x: _PDFNetPython2.PageLabel_Create
    if _newclass:Create = staticmethod(_PDFNetPython2.PageLabel_Create)
    def __eq__(self, *args): return _PDFNetPython2.PageLabel___eq__(self, *args)
    def IsValid(self): return _PDFNetPython2.PageLabel_IsValid(self)
    def GetLabelTitle(self, *args): return _PDFNetPython2.PageLabel_GetLabelTitle(self, *args)
    def SetStyle(self, *args): return _PDFNetPython2.PageLabel_SetStyle(self, *args)
    def GetStyle(self): return _PDFNetPython2.PageLabel_GetStyle(self)
    def GetPrefix(self): return _PDFNetPython2.PageLabel_GetPrefix(self)
    def SetPrefix(self, *args): return _PDFNetPython2.PageLabel_SetPrefix(self, *args)
    def GetStart(self): return _PDFNetPython2.PageLabel_GetStart(self)
    def SetStart(self, *args): return _PDFNetPython2.PageLabel_SetStart(self, *args)
    def GetFirstPageNum(self): return _PDFNetPython2.PageLabel_GetFirstPageNum(self)
    def GetLastPageNum(self): return _PDFNetPython2.PageLabel_GetLastPageNum(self)
    def GetSDFObj(self): return _PDFNetPython2.PageLabel_GetSDFObj(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PageLabel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PageLabel
    __del__ = lambda self : None;
PageLabel_swigregister = _PDFNetPython2.PageLabel_swigregister
PageLabel_swigregister(PageLabel)

def PageLabel_Create(*args):
  return _PDFNetPython2.PageLabel_Create(*args)
PageLabel_Create = _PDFNetPython2.PageLabel_Create

class PageSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageSet, name)
    __repr__ = _swig_repr
    e_all = _PDFNetPython2.PageSet_e_all
    e_even = _PDFNetPython2.PageSet_e_even
    e_odd = _PDFNetPython2.PageSet_e_odd
    __swig_destroy__ = _PDFNetPython2.delete_PageSet
    __del__ = lambda self : None;
    def AddPage(self, *args): return _PDFNetPython2.PageSet_AddPage(self, *args)
    def AddRange(self, *args): return _PDFNetPython2.PageSet_AddRange(self, *args)
    def Destroy(self): return _PDFNetPython2.PageSet_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PageSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.PageSet_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.PageSet_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.PageSet_mp_impl_get, _PDFNetPython2.PageSet_mp_impl_set)
PageSet_swigregister = _PDFNetPython2.PageSet_swigregister
PageSet_swigregister(PageSet)

class PDFDocInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDocInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDocInfo, name)
    __repr__ = _swig_repr
    def GetTitle(self): return _PDFNetPython2.PDFDocInfo_GetTitle(self)
    def GetTitleObj(self): return _PDFNetPython2.PDFDocInfo_GetTitleObj(self)
    def SetTitle(self, *args): return _PDFNetPython2.PDFDocInfo_SetTitle(self, *args)
    def GetAuthor(self): return _PDFNetPython2.PDFDocInfo_GetAuthor(self)
    def GetAuthorObj(self): return _PDFNetPython2.PDFDocInfo_GetAuthorObj(self)
    def SetAuthor(self, *args): return _PDFNetPython2.PDFDocInfo_SetAuthor(self, *args)
    def GetSubject(self): return _PDFNetPython2.PDFDocInfo_GetSubject(self)
    def GetSubjectObj(self): return _PDFNetPython2.PDFDocInfo_GetSubjectObj(self)
    def SetSubject(self, *args): return _PDFNetPython2.PDFDocInfo_SetSubject(self, *args)
    def GetKeywords(self): return _PDFNetPython2.PDFDocInfo_GetKeywords(self)
    def GetKeywordsObj(self): return _PDFNetPython2.PDFDocInfo_GetKeywordsObj(self)
    def SetKeywords(self, *args): return _PDFNetPython2.PDFDocInfo_SetKeywords(self, *args)
    def GetCreator(self): return _PDFNetPython2.PDFDocInfo_GetCreator(self)
    def GetCreatorObj(self): return _PDFNetPython2.PDFDocInfo_GetCreatorObj(self)
    def SetCreator(self, *args): return _PDFNetPython2.PDFDocInfo_SetCreator(self, *args)
    def GetProducer(self): return _PDFNetPython2.PDFDocInfo_GetProducer(self)
    def GetProducerObj(self): return _PDFNetPython2.PDFDocInfo_GetProducerObj(self)
    def SetProducer(self, *args): return _PDFNetPython2.PDFDocInfo_SetProducer(self, *args)
    def GetCreationDate(self): return _PDFNetPython2.PDFDocInfo_GetCreationDate(self)
    def SetCreationDate(self, *args): return _PDFNetPython2.PDFDocInfo_SetCreationDate(self, *args)
    def GetModDate(self): return _PDFNetPython2.PDFDocInfo_GetModDate(self)
    def SetModDate(self, *args): return _PDFNetPython2.PDFDocInfo_SetModDate(self, *args)
    def GetSDFObj(self): return _PDFNetPython2.PDFDocInfo_GetSDFObj(self)
    __swig_setmethods__["mp_info"] = _PDFNetPython2.PDFDocInfo_mp_info_set
    __swig_getmethods__["mp_info"] = _PDFNetPython2.PDFDocInfo_mp_info_get
    if _newclass:mp_info = _swig_property(_PDFNetPython2.PDFDocInfo_mp_info_get, _PDFNetPython2.PDFDocInfo_mp_info_set)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PDFDocInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PDFDocInfo
    __del__ = lambda self : None;
PDFDocInfo_swigregister = _PDFNetPython2.PDFDocInfo_swigregister
PDFDocInfo_swigregister(PDFDocInfo)

class PDFDocViewPrefs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDocViewPrefs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDocViewPrefs, name)
    __repr__ = _swig_repr
    def SetInitialPage(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetInitialPage(self, *args)
    e_UseNone = _PDFNetPython2.PDFDocViewPrefs_e_UseNone
    e_UseThumbs = _PDFNetPython2.PDFDocViewPrefs_e_UseThumbs
    e_UseBookmarks = _PDFNetPython2.PDFDocViewPrefs_e_UseBookmarks
    e_FullScreen = _PDFNetPython2.PDFDocViewPrefs_e_FullScreen
    e_UseOC = _PDFNetPython2.PDFDocViewPrefs_e_UseOC
    e_UseAttachments = _PDFNetPython2.PDFDocViewPrefs_e_UseAttachments
    def SetPageMode(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetPageMode(self, *args)
    def GetPageMode(self): return _PDFNetPython2.PDFDocViewPrefs_GetPageMode(self)
    e_Default = _PDFNetPython2.PDFDocViewPrefs_e_Default
    e_SinglePage = _PDFNetPython2.PDFDocViewPrefs_e_SinglePage
    e_OneColumn = _PDFNetPython2.PDFDocViewPrefs_e_OneColumn
    e_TwoColumnLeft = _PDFNetPython2.PDFDocViewPrefs_e_TwoColumnLeft
    e_TwoColumnRight = _PDFNetPython2.PDFDocViewPrefs_e_TwoColumnRight
    e_TwoPageLeft = _PDFNetPython2.PDFDocViewPrefs_e_TwoPageLeft
    e_TwoPageRight = _PDFNetPython2.PDFDocViewPrefs_e_TwoPageRight
    def SetLayoutMode(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetLayoutMode(self, *args)
    def GetLayoutMode(self): return _PDFNetPython2.PDFDocViewPrefs_GetLayoutMode(self)
    e_HideToolbar = _PDFNetPython2.PDFDocViewPrefs_e_HideToolbar
    e_HideMenubar = _PDFNetPython2.PDFDocViewPrefs_e_HideMenubar
    e_HideWindowUI = _PDFNetPython2.PDFDocViewPrefs_e_HideWindowUI
    e_FitWindow = _PDFNetPython2.PDFDocViewPrefs_e_FitWindow
    e_CenterWindow = _PDFNetPython2.PDFDocViewPrefs_e_CenterWindow
    e_DisplayDocTitle = _PDFNetPython2.PDFDocViewPrefs_e_DisplayDocTitle
    def SetPref(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetPref(self, *args)
    def GetPref(self, *args): return _PDFNetPython2.PDFDocViewPrefs_GetPref(self, *args)
    def SetNonFullScreenPageMode(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetNonFullScreenPageMode(self, *args)
    def GetNonFullScreenPageMode(self): return _PDFNetPython2.PDFDocViewPrefs_GetNonFullScreenPageMode(self)
    def SetDirection(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetDirection(self, *args)
    def GetDirection(self): return _PDFNetPython2.PDFDocViewPrefs_GetDirection(self)
    def SetViewArea(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetViewArea(self, *args)
    def GetViewArea(self): return _PDFNetPython2.PDFDocViewPrefs_GetViewArea(self)
    def SetViewClip(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetViewClip(self, *args)
    def GetViewClip(self): return _PDFNetPython2.PDFDocViewPrefs_GetViewClip(self)
    def SetPrintArea(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetPrintArea(self, *args)
    def GetPrintArea(self): return _PDFNetPython2.PDFDocViewPrefs_GetPrintArea(self)
    def SetPrintClip(self, *args): return _PDFNetPython2.PDFDocViewPrefs_SetPrintClip(self, *args)
    def GetPrintClip(self): return _PDFNetPython2.PDFDocViewPrefs_GetPrintClip(self)
    def GetSDFObj(self): return _PDFNetPython2.PDFDocViewPrefs_GetSDFObj(self)
    __swig_setmethods__["mp_prefs"] = _PDFNetPython2.PDFDocViewPrefs_mp_prefs_set
    __swig_getmethods__["mp_prefs"] = _PDFNetPython2.PDFDocViewPrefs_mp_prefs_get
    if _newclass:mp_prefs = _swig_property(_PDFNetPython2.PDFDocViewPrefs_mp_prefs_get, _PDFNetPython2.PDFDocViewPrefs_mp_prefs_set)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PDFDocViewPrefs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PDFDocViewPrefs
    __del__ = lambda self : None;
PDFDocViewPrefs_swigregister = _PDFNetPython2.PDFDocViewPrefs_swigregister
PDFDocViewPrefs_swigregister(PDFDocViewPrefs)

class PDFDoc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDoc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PDFDoc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PDFDoc
    __del__ = lambda self : None;
    def Close(self): return _PDFNetPython2.PDFDoc_Close(self)
    def IsEncrypted(self): return _PDFNetPython2.PDFDoc_IsEncrypted(self)
    def InitSecurityHandler(self): return _PDFNetPython2.PDFDoc_InitSecurityHandler(self)
    def InitStdSecurityHandler(self, *args): return _PDFNetPython2.PDFDoc_InitStdSecurityHandler(self, *args)
    def GetSecurityHandler(self): return _PDFNetPython2.PDFDoc_GetSecurityHandler(self)
    def SetSecurityHandler(self, *args): return _PDFNetPython2.PDFDoc_SetSecurityHandler(self, *args)
    def RemoveSecurity(self): return _PDFNetPython2.PDFDoc_RemoveSecurity(self)
    def HasSignatures(self): return _PDFNetPython2.PDFDoc_HasSignatures(self)
    def AddSignatureHandler(self, *args): return _PDFNetPython2.PDFDoc_AddSignatureHandler(self, *args)
    def RemoveSignatureHandler(self, *args): return _PDFNetPython2.PDFDoc_RemoveSignatureHandler(self, *args)
    def GetSignatureHandler(self, *args): return _PDFNetPython2.PDFDoc_GetSignatureHandler(self, *args)
    def GetDocInfo(self): return _PDFNetPython2.PDFDoc_GetDocInfo(self)
    def GetViewPrefs(self): return _PDFNetPython2.PDFDoc_GetViewPrefs(self)
    def IsModified(self): return _PDFNetPython2.PDFDoc_IsModified(self)
    def IsLinearized(self): return _PDFNetPython2.PDFDoc_IsLinearized(self)
    def Save(self, *args): return _PDFNetPython2.PDFDoc_Save(self, *args)
    def GetPageIterator(self, page_number = 1): return _PDFNetPython2.PDFDoc_GetPageIterator(self, page_number)
    def GetPage(self, *args): return _PDFNetPython2.PDFDoc_GetPage(self, *args)
    def PageRemove(self, *args): return _PDFNetPython2.PDFDoc_PageRemove(self, *args)
    e_none = _PDFNetPython2.PDFDoc_e_none
    e_insert_bookmark = _PDFNetPython2.PDFDoc_e_insert_bookmark
    def PageInsert(self, *args): return _PDFNetPython2.PDFDoc_PageInsert(self, *args)
    def InsertPages(self, *args): return _PDFNetPython2.PDFDoc_InsertPages(self, *args)
    def MovePages(self, *args): return _PDFNetPython2.PDFDoc_MovePages(self, *args)
    def PagePushFront(self, *args): return _PDFNetPython2.PDFDoc_PagePushFront(self, *args)
    def PagePushBack(self, *args): return _PDFNetPython2.PDFDoc_PagePushBack(self, *args)
    def ImportPages(self, *args): return _PDFNetPython2.PDFDoc_ImportPages(self, *args)
    def PageCreate(self, *args): return _PDFNetPython2.PDFDoc_PageCreate(self, *args)
    def GetFirstBookmark(self): return _PDFNetPython2.PDFDoc_GetFirstBookmark(self)
    def AddRootBookmark(self, *args): return _PDFNetPython2.PDFDoc_AddRootBookmark(self, *args)
    def GetTrailer(self): return _PDFNetPython2.PDFDoc_GetTrailer(self)
    def GetRoot(self): return _PDFNetPython2.PDFDoc_GetRoot(self)
    def GetPages(self): return _PDFNetPython2.PDFDoc_GetPages(self)
    def GetPageCount(self): return _PDFNetPython2.PDFDoc_GetPageCount(self)
    def GetFieldIterator(self, *args): return _PDFNetPython2.PDFDoc_GetFieldIterator(self, *args)
    def GetField(self, *args): return _PDFNetPython2.PDFDoc_GetField(self, *args)
    def FieldCreate(self, *args): return _PDFNetPython2.PDFDoc_FieldCreate(self, *args)
    def RefreshFieldAppearances(self): return _PDFNetPython2.PDFDoc_RefreshFieldAppearances(self)
    def FlattenAnnotations(self, forms_only = False): return _PDFNetPython2.PDFDoc_FlattenAnnotations(self, forms_only)
    def GetAcroForm(self): return _PDFNetPython2.PDFDoc_GetAcroForm(self)
    e_forms_only = _PDFNetPython2.PDFDoc_e_forms_only
    e_annots_only = _PDFNetPython2.PDFDoc_e_annots_only
    e_both = _PDFNetPython2.PDFDoc_e_both
    def FDFExtract(self, *args): return _PDFNetPython2.PDFDoc_FDFExtract(self, *args)
    def FDFMerge(self, *args): return _PDFNetPython2.PDFDoc_FDFMerge(self, *args)
    def GetOpenAction(self): return _PDFNetPython2.PDFDoc_GetOpenAction(self)
    def SetOpenAction(self, *args): return _PDFNetPython2.PDFDoc_SetOpenAction(self, *args)
    def AddFileAttachment(self, *args): return _PDFNetPython2.PDFDoc_AddFileAttachment(self, *args)
    def GetPageLabel(self, *args): return _PDFNetPython2.PDFDoc_GetPageLabel(self, *args)
    def SetPageLabel(self, *args): return _PDFNetPython2.PDFDoc_SetPageLabel(self, *args)
    def RemovePageLabel(self, *args): return _PDFNetPython2.PDFDoc_RemovePageLabel(self, *args)
    def IsTagged(self): return _PDFNetPython2.PDFDoc_IsTagged(self)
    def GetStructTree(self): return _PDFNetPython2.PDFDoc_GetStructTree(self)
    def HasOC(self): return _PDFNetPython2.PDFDoc_HasOC(self)
    def GetOCGs(self): return _PDFNetPython2.PDFDoc_GetOCGs(self)
    def GetOCGConfig(self): return _PDFNetPython2.PDFDoc_GetOCGConfig(self)
    def AddHighlights(self, *args): return _PDFNetPython2.PDFDoc_AddHighlights(self, *args)
    def CreateIndirectName(self, *args): return _PDFNetPython2.PDFDoc_CreateIndirectName(self, *args)
    def CreateIndirectArray(self): return _PDFNetPython2.PDFDoc_CreateIndirectArray(self)
    def CreateIndirectBool(self, *args): return _PDFNetPython2.PDFDoc_CreateIndirectBool(self, *args)
    def CreateIndirectDict(self): return _PDFNetPython2.PDFDoc_CreateIndirectDict(self)
    def CreateIndirectNull(self): return _PDFNetPython2.PDFDoc_CreateIndirectNull(self)
    def CreateIndirectNumber(self, *args): return _PDFNetPython2.PDFDoc_CreateIndirectNumber(self, *args)
    def CreateIndirectString(self, *args): return _PDFNetPython2.PDFDoc_CreateIndirectString(self, *args)
    def CreateIndirectStream(self, *args): return _PDFNetPython2.PDFDoc_CreateIndirectStream(self, *args)
    def GetSDFDoc(self): return _PDFNetPython2.PDFDoc_GetSDFDoc(self)
    def Lock(self): return _PDFNetPython2.PDFDoc_Lock(self)
    def Unlock(self): return _PDFNetPython2.PDFDoc_Unlock(self)
    def IsLocked(self): return _PDFNetPython2.PDFDoc_IsLocked(self)
    def TryLock(self, milliseconds = 0): return _PDFNetPython2.PDFDoc_TryLock(self, milliseconds)
    def GetFileName(self): return _PDFNetPython2.PDFDoc_GetFileName(self)
    __swig_setmethods__["mp_doc"] = _PDFNetPython2.PDFDoc_mp_doc_set
    __swig_getmethods__["mp_doc"] = _PDFNetPython2.PDFDoc_mp_doc_get
    if _newclass:mp_doc = _swig_property(_PDFNetPython2.PDFDoc_mp_doc_get, _PDFNetPython2.PDFDoc_mp_doc_set)
PDFDoc_swigregister = _PDFNetPython2.PDFDoc_swigregister
PDFDoc_swigregister(PDFDoc)

class PDFRasterizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFRasterizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFRasterizer, name)
    __repr__ = _swig_repr
    e_BuiltIn = _PDFNetPython2.PDFRasterizer_e_BuiltIn
    e_GDIPlus = _PDFNetPython2.PDFRasterizer_e_GDIPlus
    e_op_off = _PDFNetPython2.PDFRasterizer_e_op_off
    e_op_on = _PDFNetPython2.PDFRasterizer_e_op_on
    e_op_pdfx_on = _PDFNetPython2.PDFRasterizer_e_op_pdfx_on
    def __init__(self, *args): 
        this = _PDFNetPython2.new_PDFRasterizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PDFRasterizer
    __del__ = lambda self : None;
    def Rasterize(self, *args): return _PDFNetPython2.PDFRasterizer_Rasterize(self, *args)
    def SetDrawAnnotations(self, *args): return _PDFNetPython2.PDFRasterizer_SetDrawAnnotations(self, *args)
    def SetHighlightFields(self, *args): return _PDFNetPython2.PDFRasterizer_SetHighlightFields(self, *args)
    def SetAntiAliasing(self, *args): return _PDFNetPython2.PDFRasterizer_SetAntiAliasing(self, *args)
    def SetPathHinting(self, *args): return _PDFNetPython2.PDFRasterizer_SetPathHinting(self, *args)
    def SetThinLineAdjustment(self, *args): return _PDFNetPython2.PDFRasterizer_SetThinLineAdjustment(self, *args)
    def SetImageSmoothing(self, smoothing_enabled = True): return _PDFNetPython2.PDFRasterizer_SetImageSmoothing(self, smoothing_enabled)
    def SetCaching(self, enabled = True): return _PDFNetPython2.PDFRasterizer_SetCaching(self, enabled)
    def SetGamma(self, *args): return _PDFNetPython2.PDFRasterizer_SetGamma(self, *args)
    def SetOCGContext(self, *args): return _PDFNetPython2.PDFRasterizer_SetOCGContext(self, *args)
    def SetPrintMode(self, *args): return _PDFNetPython2.PDFRasterizer_SetPrintMode(self, *args)
    def SetOverprint(self, *args): return _PDFNetPython2.PDFRasterizer_SetOverprint(self, *args)
    def SetErrorReportProc(self, *args): return _PDFNetPython2.PDFRasterizer_SetErrorReportProc(self, *args)
    def SetRasterizerType(self, *args): return _PDFNetPython2.PDFRasterizer_SetRasterizerType(self, *args)
    def GetRasterizerType(self): return _PDFNetPython2.PDFRasterizer_GetRasterizerType(self)
    def Destroy(self): return _PDFNetPython2.PDFRasterizer_Destroy(self)
    __swig_setmethods__["mp_rast"] = _PDFNetPython2.PDFRasterizer_mp_rast_set
    __swig_getmethods__["mp_rast"] = _PDFNetPython2.PDFRasterizer_mp_rast_get
    if _newclass:mp_rast = _swig_property(_PDFNetPython2.PDFRasterizer_mp_rast_get, _PDFNetPython2.PDFRasterizer_mp_rast_set)
PDFRasterizer_swigregister = _PDFNetPython2.PDFRasterizer_swigregister
PDFRasterizer_swigregister(PDFRasterizer)

class BitmapInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitmapInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitmapInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _PDFNetPython2.BitmapInfo_width_set
    __swig_getmethods__["width"] = _PDFNetPython2.BitmapInfo_width_get
    if _newclass:width = _swig_property(_PDFNetPython2.BitmapInfo_width_get, _PDFNetPython2.BitmapInfo_width_set)
    __swig_setmethods__["height"] = _PDFNetPython2.BitmapInfo_height_set
    __swig_getmethods__["height"] = _PDFNetPython2.BitmapInfo_height_get
    if _newclass:height = _swig_property(_PDFNetPython2.BitmapInfo_height_get, _PDFNetPython2.BitmapInfo_height_set)
    __swig_setmethods__["stride"] = _PDFNetPython2.BitmapInfo_stride_set
    __swig_getmethods__["stride"] = _PDFNetPython2.BitmapInfo_stride_get
    if _newclass:stride = _swig_property(_PDFNetPython2.BitmapInfo_stride_get, _PDFNetPython2.BitmapInfo_stride_set)
    __swig_setmethods__["dpi"] = _PDFNetPython2.BitmapInfo_dpi_set
    __swig_getmethods__["dpi"] = _PDFNetPython2.BitmapInfo_dpi_get
    if _newclass:dpi = _swig_property(_PDFNetPython2.BitmapInfo_dpi_get, _PDFNetPython2.BitmapInfo_dpi_set)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_BitmapInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetBuffer(self): return _PDFNetPython2.BitmapInfo_GetBuffer(self)
    __swig_destroy__ = _PDFNetPython2.delete_BitmapInfo
    __del__ = lambda self : None;
BitmapInfo_swigregister = _PDFNetPython2.BitmapInfo_swigregister
BitmapInfo_swigregister(BitmapInfo)

class PDFDraw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDraw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDraw, name)
    __repr__ = _swig_repr
    def __init__(self, dpi = 92): 
        this = _PDFNetPython2.new_PDFDraw(dpi)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PDFDraw
    __del__ = lambda self : None;
    def SetRasterizerType(self, *args): return _PDFNetPython2.PDFDraw_SetRasterizerType(self, *args)
    def SetDPI(self, *args): return _PDFNetPython2.PDFDraw_SetDPI(self, *args)
    def SetImageSize(self, *args): return _PDFNetPython2.PDFDraw_SetImageSize(self, *args)
    def SetPageBox(self, *args): return _PDFNetPython2.PDFDraw_SetPageBox(self, *args)
    def SetFlipYAxis(self, *args): return _PDFNetPython2.PDFDraw_SetFlipYAxis(self, *args)
    def SetRotate(self, *args): return _PDFNetPython2.PDFDraw_SetRotate(self, *args)
    def SetDrawAnnotations(self, *args): return _PDFNetPython2.PDFDraw_SetDrawAnnotations(self, *args)
    def SetHighlightFields(self, *args): return _PDFNetPython2.PDFDraw_SetHighlightFields(self, *args)
    def SetAntiAliasing(self, *args): return _PDFNetPython2.PDFDraw_SetAntiAliasing(self, *args)
    def SetPathHinting(self, *args): return _PDFNetPython2.PDFDraw_SetPathHinting(self, *args)
    def SetThinLineAdjustment(self, *args): return _PDFNetPython2.PDFDraw_SetThinLineAdjustment(self, *args)
    def SetImageSmoothing(self, smoothing_enabled = True): return _PDFNetPython2.PDFDraw_SetImageSmoothing(self, smoothing_enabled)
    def SetCaching(self, enabled = True): return _PDFNetPython2.PDFDraw_SetCaching(self, enabled)
    def SetGamma(self, *args): return _PDFNetPython2.PDFDraw_SetGamma(self, *args)
    def SetOCGContext(self, *args): return _PDFNetPython2.PDFDraw_SetOCGContext(self, *args)
    def SetPrintMode(self, *args): return _PDFNetPython2.PDFDraw_SetPrintMode(self, *args)
    def SetDefaultPageColor(self, *args): return _PDFNetPython2.PDFDraw_SetDefaultPageColor(self, *args)
    def SetPageTransparent(self, *args): return _PDFNetPython2.PDFDraw_SetPageTransparent(self, *args)
    def SetOverprint(self, *args): return _PDFNetPython2.PDFDraw_SetOverprint(self, *args)
    def Export(self, *args): return _PDFNetPython2.PDFDraw_Export(self, *args)
    e_rgba = _PDFNetPython2.PDFDraw_e_rgba
    e_bgra = _PDFNetPython2.PDFDraw_e_bgra
    e_rgb = _PDFNetPython2.PDFDraw_e_rgb
    e_bgr = _PDFNetPython2.PDFDraw_e_bgr
    e_gray = _PDFNetPython2.PDFDraw_e_gray
    e_gray_alpha = _PDFNetPython2.PDFDraw_e_gray_alpha
    e_cmyk = _PDFNetPython2.PDFDraw_e_cmyk
    def GetBitmap(self, *args): return _PDFNetPython2.PDFDraw_GetBitmap(self, *args)
    def SetErrorReportProc(self, *args): return _PDFNetPython2.PDFDraw_SetErrorReportProc(self, *args)
    def Destroy(self): return _PDFNetPython2.PDFDraw_Destroy(self)
    __swig_setmethods__["mp_draw"] = _PDFNetPython2.PDFDraw_mp_draw_set
    __swig_getmethods__["mp_draw"] = _PDFNetPython2.PDFDraw_mp_draw_get
    if _newclass:mp_draw = _swig_property(_PDFNetPython2.PDFDraw_mp_draw_get, _PDFNetPython2.PDFDraw_mp_draw_set)
PDFDraw_swigregister = _PDFNetPython2.PDFDraw_swigregister
PDFDraw_swigregister(PDFDraw)

class PDFNet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFNet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFNet, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Initialize"] = lambda x: _PDFNetPython2.PDFNet_Initialize
    if _newclass:Initialize = staticmethod(_PDFNetPython2.PDFNet_Initialize)
    __swig_getmethods__["SetResourcesPath"] = lambda x: _PDFNetPython2.PDFNet_SetResourcesPath
    if _newclass:SetResourcesPath = staticmethod(_PDFNetPython2.PDFNet_SetResourcesPath)
    __swig_getmethods__["GetResourcesPath"] = lambda x: _PDFNetPython2.PDFNet_GetResourcesPath
    if _newclass:GetResourcesPath = staticmethod(_PDFNetPython2.PDFNet_GetResourcesPath)
    __swig_getmethods__["GetVersion"] = lambda x: _PDFNetPython2.PDFNet_GetVersion
    if _newclass:GetVersion = staticmethod(_PDFNetPython2.PDFNet_GetVersion)
    e_lcms = _PDFNetPython2.PDFNet_e_lcms
    e_icm = _PDFNetPython2.PDFNet_e_icm
    e_no_cms = _PDFNetPython2.PDFNet_e_no_cms
    __swig_getmethods__["SetColorManagement"] = lambda x: _PDFNetPython2.PDFNet_SetColorManagement
    if _newclass:SetColorManagement = staticmethod(_PDFNetPython2.PDFNet_SetColorManagement)
    __swig_getmethods__["SetDefaultDeviceCMYKProfile"] = lambda x: _PDFNetPython2.PDFNet_SetDefaultDeviceCMYKProfile
    if _newclass:SetDefaultDeviceCMYKProfile = staticmethod(_PDFNetPython2.PDFNet_SetDefaultDeviceCMYKProfile)
    __swig_getmethods__["SetDefaultDeviceRGBProfile"] = lambda x: _PDFNetPython2.PDFNet_SetDefaultDeviceRGBProfile
    if _newclass:SetDefaultDeviceRGBProfile = staticmethod(_PDFNetPython2.PDFNet_SetDefaultDeviceRGBProfile)
    __swig_getmethods__["SetDefaultDiskCachingEnabled"] = lambda x: _PDFNetPython2.PDFNet_SetDefaultDiskCachingEnabled
    if _newclass:SetDefaultDiskCachingEnabled = staticmethod(_PDFNetPython2.PDFNet_SetDefaultDiskCachingEnabled)
    e_Identity = _PDFNetPython2.PDFNet_e_Identity
    e_Japan1 = _PDFNetPython2.PDFNet_e_Japan1
    e_Japan2 = _PDFNetPython2.PDFNet_e_Japan2
    e_GB1 = _PDFNetPython2.PDFNet_e_GB1
    e_CNS1 = _PDFNetPython2.PDFNet_e_CNS1
    e_Korea1 = _PDFNetPython2.PDFNet_e_Korea1
    __swig_getmethods__["AddFontSubst"] = lambda x: _PDFNetPython2.PDFNet_AddFontSubst
    if _newclass:AddFontSubst = staticmethod(_PDFNetPython2.PDFNet_AddFontSubst)
    __swig_getmethods__["SetTempPath"] = lambda x: _PDFNetPython2.PDFNet_SetTempPath
    if _newclass:SetTempPath = staticmethod(_PDFNetPython2.PDFNet_SetTempPath)
    def __init__(self): 
        this = _PDFNetPython2.new_PDFNet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PDFNet
    __del__ = lambda self : None;
PDFNet_swigregister = _PDFNetPython2.PDFNet_swigregister
PDFNet_swigregister(PDFNet)

def PDFNet_Initialize(license_key = None):
  return _PDFNetPython2.PDFNet_Initialize(license_key)
PDFNet_Initialize = _PDFNetPython2.PDFNet_Initialize

def PDFNet_SetResourcesPath(*args):
  return _PDFNetPython2.PDFNet_SetResourcesPath(*args)
PDFNet_SetResourcesPath = _PDFNetPython2.PDFNet_SetResourcesPath

def PDFNet_GetResourcesPath():
  return _PDFNetPython2.PDFNet_GetResourcesPath()
PDFNet_GetResourcesPath = _PDFNetPython2.PDFNet_GetResourcesPath

def PDFNet_GetVersion():
  return _PDFNetPython2.PDFNet_GetVersion()
PDFNet_GetVersion = _PDFNetPython2.PDFNet_GetVersion

def PDFNet_SetColorManagement(*args):
  return _PDFNetPython2.PDFNet_SetColorManagement(*args)
PDFNet_SetColorManagement = _PDFNetPython2.PDFNet_SetColorManagement

def PDFNet_SetDefaultDeviceCMYKProfile(*args):
  return _PDFNetPython2.PDFNet_SetDefaultDeviceCMYKProfile(*args)
PDFNet_SetDefaultDeviceCMYKProfile = _PDFNetPython2.PDFNet_SetDefaultDeviceCMYKProfile

def PDFNet_SetDefaultDeviceRGBProfile(*args):
  return _PDFNetPython2.PDFNet_SetDefaultDeviceRGBProfile(*args)
PDFNet_SetDefaultDeviceRGBProfile = _PDFNetPython2.PDFNet_SetDefaultDeviceRGBProfile

def PDFNet_SetDefaultDiskCachingEnabled(*args):
  return _PDFNetPython2.PDFNet_SetDefaultDiskCachingEnabled(*args)
PDFNet_SetDefaultDiskCachingEnabled = _PDFNetPython2.PDFNet_SetDefaultDiskCachingEnabled

def PDFNet_AddFontSubst(*args):
  return _PDFNetPython2.PDFNet_AddFontSubst(*args)
PDFNet_AddFontSubst = _PDFNetPython2.PDFNet_AddFontSubst

def PDFNet_SetTempPath(*args):
  return _PDFNetPython2.PDFNet_SetTempPath(*args)
PDFNet_SetTempPath = _PDFNetPython2.PDFNet_SetTempPath

class PDFView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFView, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_PDFView()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PDFView
    __del__ = lambda self : None;
    def SetDoc(self, *args): return _PDFNetPython2.PDFView_SetDoc(self, *args)
    def CloseDoc(self): return _PDFNetPython2.PDFView_CloseDoc(self)
    def GetDoc(self): return _PDFNetPython2.PDFView_GetDoc(self)
    e_fit_page = _PDFNetPython2.PDFView_e_fit_page
    e_fit_width = _PDFNetPython2.PDFView_e_fit_width
    e_fit_height = _PDFNetPython2.PDFView_e_fit_height
    e_zoom = _PDFNetPython2.PDFView_e_zoom
    def SetPageViewMode(self, *args): return _PDFNetPython2.PDFView_SetPageViewMode(self, *args)
    def GetPageViewMode(self): return _PDFNetPython2.PDFView_GetPageViewMode(self)
    e_single_page = _PDFNetPython2.PDFView_e_single_page
    e_single_continuous = _PDFNetPython2.PDFView_e_single_continuous
    e_facing = _PDFNetPython2.PDFView_e_facing
    e_facing_continuous = _PDFNetPython2.PDFView_e_facing_continuous
    e_facing_cover = _PDFNetPython2.PDFView_e_facing_cover
    e_facing_continuous_cover = _PDFNetPython2.PDFView_e_facing_continuous_cover
    def SetPagePresentationMode(self, *args): return _PDFNetPython2.PDFView_SetPagePresentationMode(self, *args)
    def GetPagePresentationMode(self): return _PDFNetPython2.PDFView_GetPagePresentationMode(self)
    def GetCurrentPage(self): return _PDFNetPython2.PDFView_GetCurrentPage(self)
    def GetPageCount(self): return _PDFNetPython2.PDFView_GetPageCount(self)
    def GotoFirstPage(self): return _PDFNetPython2.PDFView_GotoFirstPage(self)
    def GotoLastPage(self): return _PDFNetPython2.PDFView_GotoLastPage(self)
    def GotoNextPage(self): return _PDFNetPython2.PDFView_GotoNextPage(self)
    def GotoPreviousPage(self): return _PDFNetPython2.PDFView_GotoPreviousPage(self)
    def SetCurrentPage(self, *args): return _PDFNetPython2.PDFView_SetCurrentPage(self, *args)
    def ShowRect(self, *args): return _PDFNetPython2.PDFView_ShowRect(self, *args)
    def GetZoom(self): return _PDFNetPython2.PDFView_GetZoom(self)
    def SetZoom(self, *args): return _PDFNetPython2.PDFView_SetZoom(self, *args)
    def RotateClockwise(self): return _PDFNetPython2.PDFView_RotateClockwise(self)
    def RotateCounterClockwise(self): return _PDFNetPython2.PDFView_RotateCounterClockwise(self)
    def GetRotation(self): return _PDFNetPython2.PDFView_GetRotation(self)
    def GetPageNumberFromScreenPt(self, *args): return _PDFNetPython2.PDFView_GetPageNumberFromScreenPt(self, *args)
    def ConvScreenPtToCanvasPt(self, *args): return _PDFNetPython2.PDFView_ConvScreenPtToCanvasPt(self, *args)
    def ConvCanvasPtToScreenPt(self, *args): return _PDFNetPython2.PDFView_ConvCanvasPtToScreenPt(self, *args)
    def ConvCanvasPtToPagePt(self, *args): return _PDFNetPython2.PDFView_ConvCanvasPtToPagePt(self, *args)
    def ConvPagePtToCanvasPt(self, *args): return _PDFNetPython2.PDFView_ConvPagePtToCanvasPt(self, *args)
    def ConvScreenPtToPagePt(self, *args): return _PDFNetPython2.PDFView_ConvScreenPtToPagePt(self, *args)
    def ConvPagePtToScreenPt(self, *args): return _PDFNetPython2.PDFView_ConvPagePtToScreenPt(self, *args)
    def GetDeviceTransform(self, *args): return _PDFNetPython2.PDFView_GetDeviceTransform(self, *args)
    def SetErrorReportProc(self, *args): return _PDFNetPython2.PDFView_SetErrorReportProc(self, *args)
    def SetCurrentPageProc(self, *args): return _PDFNetPython2.PDFView_SetCurrentPageProc(self, *args)
    def SetCurrentZoomProc(self, *args): return _PDFNetPython2.PDFView_SetCurrentZoomProc(self, *args)
    def GetCanvasWidth(self): return _PDFNetPython2.PDFView_GetCanvasWidth(self)
    def GetCanvasHeight(self): return _PDFNetPython2.PDFView_GetCanvasHeight(self)
    def GetHScrollPos(self): return _PDFNetPython2.PDFView_GetHScrollPos(self)
    def GetVScrollPos(self): return _PDFNetPython2.PDFView_GetVScrollPos(self)
    def OnScroll(self, *args): return _PDFNetPython2.PDFView_OnScroll(self, *args)
    def SetHScrollPos(self, *args): return _PDFNetPython2.PDFView_SetHScrollPos(self, *args)
    def SetVScrollPos(self, *args): return _PDFNetPython2.PDFView_SetVScrollPos(self, *args)
    def OnSize(self, *args): return _PDFNetPython2.PDFView_OnSize(self, *args)
    def IsFinishedRendering(self): return _PDFNetPython2.PDFView_IsFinishedRendering(self)
    def CancelRendering(self): return _PDFNetPython2.PDFView_CancelRendering(self)
    def Update(self, *args): return _PDFNetPython2.PDFView_Update(self, *args)
    def UpdatePageLayout(self): return _PDFNetPython2.PDFView_UpdatePageLayout(self)
    def GetBuffer(self): return _PDFNetPython2.PDFView_GetBuffer(self)
    def UpdateBuffer(self): return _PDFNetPython2.PDFView_UpdateBuffer(self)
    def GetBufferWidth(self): return _PDFNetPython2.PDFView_GetBufferWidth(self)
    def GetBufferHeight(self): return _PDFNetPython2.PDFView_GetBufferHeight(self)
    def GetBufferStride(self): return _PDFNetPython2.PDFView_GetBufferStride(self)
    def SetDrawAnnotations(self, *args): return _PDFNetPython2.PDFView_SetDrawAnnotations(self, *args)
    def SetHighlightFields(self, *args): return _PDFNetPython2.PDFView_SetHighlightFields(self, *args)
    def SetAntiAliasing(self, *args): return _PDFNetPython2.PDFView_SetAntiAliasing(self, *args)
    def SetPathHinting(self, *args): return _PDFNetPython2.PDFView_SetPathHinting(self, *args)
    def SetThinLineAdjustment(self, *args): return _PDFNetPython2.PDFView_SetThinLineAdjustment(self, *args)
    def SetImageSmoothing(self, smoothing_enabled = True): return _PDFNetPython2.PDFView_SetImageSmoothing(self, smoothing_enabled)
    def SetCaching(self, *args): return _PDFNetPython2.PDFView_SetCaching(self, *args)
    def SetRasterizerType(self, *args): return _PDFNetPython2.PDFView_SetRasterizerType(self, *args)
    def SetGamma(self, *args): return _PDFNetPython2.PDFView_SetGamma(self, *args)
    def SetOverprint(self, *args): return _PDFNetPython2.PDFView_SetOverprint(self, *args)
    def SetOCGContext(self, *args): return _PDFNetPython2.PDFView_SetOCGContext(self, *args)
    def GetOCGContext(self): return _PDFNetPython2.PDFView_GetOCGContext(self)
    def SetRenderBeginProc(self, *args): return _PDFNetPython2.PDFView_SetRenderBeginProc(self, *args)
    def SetRenderFinishProc(self, *args): return _PDFNetPython2.PDFView_SetRenderFinishProc(self, *args)
    e_structural = _PDFNetPython2.PDFView_e_structural
    e_rectangular = _PDFNetPython2.PDFView_e_rectangular
    def SetTextSelectionMode(self, *args): return _PDFNetPython2.PDFView_SetTextSelectionMode(self, *args)
    def Select(self, *args): return _PDFNetPython2.PDFView_Select(self, *args)
    def FindText(self, *args): return _PDFNetPython2.PDFView_FindText(self, *args)
    def SelectAll(self): return _PDFNetPython2.PDFView_SelectAll(self)
    def HasSelection(self): return _PDFNetPython2.PDFView_HasSelection(self)
    def ClearSelection(self): return _PDFNetPython2.PDFView_ClearSelection(self)
    def GetSelection(self, *args): return _PDFNetPython2.PDFView_GetSelection(self, *args)
    def GetSelectionBeginPage(self): return _PDFNetPython2.PDFView_GetSelectionBeginPage(self)
    def GetSelectionEndPage(self): return _PDFNetPython2.PDFView_GetSelectionEndPage(self)
    def HasSelectionOnPage(self, *args): return _PDFNetPython2.PDFView_HasSelectionOnPage(self, *args)
    def SetPageBorderVisibility(self, *args): return _PDFNetPython2.PDFView_SetPageBorderVisibility(self, *args)
    def SetPageTransparencyGrid(self, *args): return _PDFNetPython2.PDFView_SetPageTransparencyGrid(self, *args)
    def SetDefaultPageColor(self, *args): return _PDFNetPython2.PDFView_SetDefaultPageColor(self, *args)
    def SetBackgroundColor(self, *args): return _PDFNetPython2.PDFView_SetBackgroundColor(self, *args)
    def SetHorizontalAlign(self, *args): return _PDFNetPython2.PDFView_SetHorizontalAlign(self, *args)
    def SetVerticalAlign(self, *args): return _PDFNetPython2.PDFView_SetVerticalAlign(self, *args)
    def SetPageSpacing(self, *args): return _PDFNetPython2.PDFView_SetPageSpacing(self, *args)
    def Destroy(self): return _PDFNetPython2.PDFView_Destroy(self)
    def GetAnnotationAt(self, *args): return _PDFNetPython2.PDFView_GetAnnotationAt(self, *args)
PDFView_swigregister = _PDFNetPython2.PDFView_swigregister
PDFView_swigregister(PDFView)

class Print(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Print, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Print, name)
    __repr__ = _swig_repr
    __swig_getmethods__["StartPrintJob"] = lambda x: _PDFNetPython2.Print_StartPrintJob
    if _newclass:StartPrintJob = staticmethod(_PDFNetPython2.Print_StartPrintJob)
    def __init__(self): 
        this = _PDFNetPython2.new_Print()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Print
    __del__ = lambda self : None;
Print_swigregister = _PDFNetPython2.Print_swigregister
Print_swigregister(Print)

def Print_StartPrintJob(*args):
  return _PDFNetPython2.Print_StartPrintJob(*args)
Print_StartPrintJob = _PDFNetPython2.Print_StartPrintJob

class PrinterMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrinterMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrinterMode, name)
    __repr__ = _swig_repr
    e_custom = _PDFNetPython2.PrinterMode_e_custom
    e_letter = _PDFNetPython2.PrinterMode_e_letter
    e_letter_small = _PDFNetPython2.PrinterMode_e_letter_small
    e_tabloid = _PDFNetPython2.PrinterMode_e_tabloid
    e_ledger = _PDFNetPython2.PrinterMode_e_ledger
    e_legal = _PDFNetPython2.PrinterMode_e_legal
    e_statement = _PDFNetPython2.PrinterMode_e_statement
    e_executive = _PDFNetPython2.PrinterMode_e_executive
    e_a3 = _PDFNetPython2.PrinterMode_e_a3
    e_a4 = _PDFNetPython2.PrinterMode_e_a4
    e_a4_small = _PDFNetPython2.PrinterMode_e_a4_small
    e_a5 = _PDFNetPython2.PrinterMode_e_a5
    e_b4_jis = _PDFNetPython2.PrinterMode_e_b4_jis
    e_b5_jis = _PDFNetPython2.PrinterMode_e_b5_jis
    e_folio = _PDFNetPython2.PrinterMode_e_folio
    e_quarto = _PDFNetPython2.PrinterMode_e_quarto
    e_10x14 = _PDFNetPython2.PrinterMode_e_10x14
    e_11x17 = _PDFNetPython2.PrinterMode_e_11x17
    e_note = _PDFNetPython2.PrinterMode_e_note
    e_envelope_9 = _PDFNetPython2.PrinterMode_e_envelope_9
    e_envelope_10 = _PDFNetPython2.PrinterMode_e_envelope_10
    e_envelope_11 = _PDFNetPython2.PrinterMode_e_envelope_11
    e_envelope_12 = _PDFNetPython2.PrinterMode_e_envelope_12
    e_envelope_14 = _PDFNetPython2.PrinterMode_e_envelope_14
    e_c_size_sheet = _PDFNetPython2.PrinterMode_e_c_size_sheet
    e_d_size_sheet = _PDFNetPython2.PrinterMode_e_d_size_sheet
    e_e_size_sheet = _PDFNetPython2.PrinterMode_e_e_size_sheet
    e_envelope_dl = _PDFNetPython2.PrinterMode_e_envelope_dl
    e_envelope_c5 = _PDFNetPython2.PrinterMode_e_envelope_c5
    e_envelope_c3 = _PDFNetPython2.PrinterMode_e_envelope_c3
    e_envelope_c4 = _PDFNetPython2.PrinterMode_e_envelope_c4
    e_envelope_c6 = _PDFNetPython2.PrinterMode_e_envelope_c6
    e_envelope_c65 = _PDFNetPython2.PrinterMode_e_envelope_c65
    e_envelope_b4 = _PDFNetPython2.PrinterMode_e_envelope_b4
    e_envelope_b5 = _PDFNetPython2.PrinterMode_e_envelope_b5
    e_envelope_b6 = _PDFNetPython2.PrinterMode_e_envelope_b6
    e_envelope_italy = _PDFNetPython2.PrinterMode_e_envelope_italy
    e_envelope_monarch = _PDFNetPython2.PrinterMode_e_envelope_monarch
    e_6_3_quarters_envelope = _PDFNetPython2.PrinterMode_e_6_3_quarters_envelope
    e_us_std_fanfold = _PDFNetPython2.PrinterMode_e_us_std_fanfold
    e_german_std_fanfold = _PDFNetPython2.PrinterMode_e_german_std_fanfold
    e_german_legal_fanfold = _PDFNetPython2.PrinterMode_e_german_legal_fanfold
    e_b4_iso = _PDFNetPython2.PrinterMode_e_b4_iso
    e_japanese_postcard = _PDFNetPython2.PrinterMode_e_japanese_postcard
    e_9x11 = _PDFNetPython2.PrinterMode_e_9x11
    e_10x11 = _PDFNetPython2.PrinterMode_e_10x11
    e_15x11 = _PDFNetPython2.PrinterMode_e_15x11
    e_envelope_invite = _PDFNetPython2.PrinterMode_e_envelope_invite
    e_reserved_48 = _PDFNetPython2.PrinterMode_e_reserved_48
    e_reserved_49 = _PDFNetPython2.PrinterMode_e_reserved_49
    e_letter_extra = _PDFNetPython2.PrinterMode_e_letter_extra
    e_legal_extra = _PDFNetPython2.PrinterMode_e_legal_extra
    e_tabloid_extra = _PDFNetPython2.PrinterMode_e_tabloid_extra
    e_a4_extra = _PDFNetPython2.PrinterMode_e_a4_extra
    e_letter_transverse = _PDFNetPython2.PrinterMode_e_letter_transverse
    e_a4_transverse = _PDFNetPython2.PrinterMode_e_a4_transverse
    e_letter_extra_transverse = _PDFNetPython2.PrinterMode_e_letter_extra_transverse
    e_supera_supera_a4 = _PDFNetPython2.PrinterMode_e_supera_supera_a4
    e_Superb_Superb_a3 = _PDFNetPython2.PrinterMode_e_Superb_Superb_a3
    e_letter_plus = _PDFNetPython2.PrinterMode_e_letter_plus
    e_a4_plus = _PDFNetPython2.PrinterMode_e_a4_plus
    e_a5_transverse = _PDFNetPython2.PrinterMode_e_a5_transverse
    e_b5_jis_transverse = _PDFNetPython2.PrinterMode_e_b5_jis_transverse
    e_a3_extra = _PDFNetPython2.PrinterMode_e_a3_extra
    e_a5_extra = _PDFNetPython2.PrinterMode_e_a5_extra
    e_b5_iso_extra = _PDFNetPython2.PrinterMode_e_b5_iso_extra
    e_a2 = _PDFNetPython2.PrinterMode_e_a2
    e_a3_transverse = _PDFNetPython2.PrinterMode_e_a3_transverse
    e_a3_extra_transverse = _PDFNetPython2.PrinterMode_e_a3_extra_transverse
    e_japanese_double_postcard = _PDFNetPython2.PrinterMode_e_japanese_double_postcard
    e_a6 = _PDFNetPython2.PrinterMode_e_a6
    e_japanese_envelope_kaku_2 = _PDFNetPython2.PrinterMode_e_japanese_envelope_kaku_2
    e_japanese_envelope_kaku_3 = _PDFNetPython2.PrinterMode_e_japanese_envelope_kaku_3
    e_japanese_envelope_chou_3 = _PDFNetPython2.PrinterMode_e_japanese_envelope_chou_3
    e_japanese_envelope_chou_4 = _PDFNetPython2.PrinterMode_e_japanese_envelope_chou_4
    e_letter_rotated = _PDFNetPython2.PrinterMode_e_letter_rotated
    e_a3_rotated = _PDFNetPython2.PrinterMode_e_a3_rotated
    e_a4_rotated = _PDFNetPython2.PrinterMode_e_a4_rotated
    e_a5_rotated = _PDFNetPython2.PrinterMode_e_a5_rotated
    e_b4_jis_rotated = _PDFNetPython2.PrinterMode_e_b4_jis_rotated
    e_b5_jis_rotated = _PDFNetPython2.PrinterMode_e_b5_jis_rotated
    e_japanese_postcard_rotated = _PDFNetPython2.PrinterMode_e_japanese_postcard_rotated
    e_double_japanese_postcard_rotated = _PDFNetPython2.PrinterMode_e_double_japanese_postcard_rotated
    e_a6_rotated = _PDFNetPython2.PrinterMode_e_a6_rotated
    e_japanese_envelope_kaku_2_rotated = _PDFNetPython2.PrinterMode_e_japanese_envelope_kaku_2_rotated
    e_japanese_envelope_kaku_3_rotated = _PDFNetPython2.PrinterMode_e_japanese_envelope_kaku_3_rotated
    e_japanese_envelope_chou_3_rotated = _PDFNetPython2.PrinterMode_e_japanese_envelope_chou_3_rotated
    e_japanese_envelope_chou_4_rotated = _PDFNetPython2.PrinterMode_e_japanese_envelope_chou_4_rotated
    e_b6_jis = _PDFNetPython2.PrinterMode_e_b6_jis
    e_b6_jis_rotated = _PDFNetPython2.PrinterMode_e_b6_jis_rotated
    e_12x11 = _PDFNetPython2.PrinterMode_e_12x11
    e_japanese_envelope_you_4 = _PDFNetPython2.PrinterMode_e_japanese_envelope_you_4
    e_japanese_envelope_you_4_rotated = _PDFNetPython2.PrinterMode_e_japanese_envelope_you_4_rotated
    e_prc_16k = _PDFNetPython2.PrinterMode_e_prc_16k
    e_prc_32k = _PDFNetPython2.PrinterMode_e_prc_32k
    e_prc_32k_big = _PDFNetPython2.PrinterMode_e_prc_32k_big
    e_prc_envelop_1 = _PDFNetPython2.PrinterMode_e_prc_envelop_1
    e_prc_envelop_2 = _PDFNetPython2.PrinterMode_e_prc_envelop_2
    e_prc_envelop_3 = _PDFNetPython2.PrinterMode_e_prc_envelop_3
    e_prc_envelop_4 = _PDFNetPython2.PrinterMode_e_prc_envelop_4
    e_prc_envelop_5 = _PDFNetPython2.PrinterMode_e_prc_envelop_5
    e_prc_envelop_6 = _PDFNetPython2.PrinterMode_e_prc_envelop_6
    e_prc_envelop_7 = _PDFNetPython2.PrinterMode_e_prc_envelop_7
    e_prc_envelop_8 = _PDFNetPython2.PrinterMode_e_prc_envelop_8
    e_prc_envelop_9 = _PDFNetPython2.PrinterMode_e_prc_envelop_9
    e_prc_envelop_10 = _PDFNetPython2.PrinterMode_e_prc_envelop_10
    e_prc_16k_rotated = _PDFNetPython2.PrinterMode_e_prc_16k_rotated
    e_prc_32k_rotated = _PDFNetPython2.PrinterMode_e_prc_32k_rotated
    e_prc_32k_big__rotated = _PDFNetPython2.PrinterMode_e_prc_32k_big__rotated
    e_prc_envelop_1_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_1_rotated
    e_prc_envelop_2_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_2_rotated
    e_prc_envelop_3_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_3_rotated
    e_prc_envelop_4_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_4_rotated
    e_prc_envelop_5_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_5_rotated
    e_prc_envelop_6_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_6_rotated
    e_prc_envelop_7_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_7_rotated
    e_prc_envelop_8_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_8_rotated
    e_prc_envelop_9_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_9_rotated
    e_prc_envelop_10_rotated = _PDFNetPython2.PrinterMode_e_prc_envelop_10_rotated
    e_Duplex_Auto = _PDFNetPython2.PrinterMode_e_Duplex_Auto
    e_Duplex_None = _PDFNetPython2.PrinterMode_e_Duplex_None
    e_Duplex_LongSide = _PDFNetPython2.PrinterMode_e_Duplex_LongSide
    e_Duplex_ShortSide = _PDFNetPython2.PrinterMode_e_Duplex_ShortSide
    e_OutputQuality_Draft = _PDFNetPython2.PrinterMode_e_OutputQuality_Draft
    e_OutputQuality_Low = _PDFNetPython2.PrinterMode_e_OutputQuality_Low
    e_OutputQuality_Medium = _PDFNetPython2.PrinterMode_e_OutputQuality_Medium
    e_OutputQuality_High = _PDFNetPython2.PrinterMode_e_OutputQuality_High
    e_OutputColor_Color = _PDFNetPython2.PrinterMode_e_OutputColor_Color
    e_OutputColor_Grayscale = _PDFNetPython2.PrinterMode_e_OutputColor_Grayscale
    e_OutputColor_Monochrome = _PDFNetPython2.PrinterMode_e_OutputColor_Monochrome
    e_Orientation_Portrait = _PDFNetPython2.PrinterMode_e_Orientation_Portrait
    e_Orientation_Landscape = _PDFNetPython2.PrinterMode_e_Orientation_Landscape
    e_ScaleType_None = _PDFNetPython2.PrinterMode_e_ScaleType_None
    e_ScaleType_FitToOutputPage = _PDFNetPython2.PrinterMode_e_ScaleType_FitToOutputPage
    e_ScaleType_ReduceToOutputPage = _PDFNetPython2.PrinterMode_e_ScaleType_ReduceToOutputPage
    e_NUp_1_1 = _PDFNetPython2.PrinterMode_e_NUp_1_1
    e_NUp_2_1 = _PDFNetPython2.PrinterMode_e_NUp_2_1
    e_NUp_2_2 = _PDFNetPython2.PrinterMode_e_NUp_2_2
    e_NUp_3_2 = _PDFNetPython2.PrinterMode_e_NUp_3_2
    e_NUp_3_3 = _PDFNetPython2.PrinterMode_e_NUp_3_3
    e_NUp_4_4 = _PDFNetPython2.PrinterMode_e_NUp_4_4
    e_PageOrder_LeftToRightThenTopToBottom = _PDFNetPython2.PrinterMode_e_PageOrder_LeftToRightThenTopToBottom
    e_PageOrder_RightToLeftThenTopToBottom = _PDFNetPython2.PrinterMode_e_PageOrder_RightToLeftThenTopToBottom
    e_PageOrder_TopToBottomThenLeftToRight = _PDFNetPython2.PrinterMode_e_PageOrder_TopToBottomThenLeftToRight
    e_PageOrder_BottomToTopThenLeftToRight = _PDFNetPython2.PrinterMode_e_PageOrder_BottomToTopThenLeftToRight
    e_PrintContent_DocumentOnly = _PDFNetPython2.PrinterMode_e_PrintContent_DocumentOnly
    e_PrintContent_DocumentAndAnnotations = _PDFNetPython2.PrinterMode_e_PrintContent_DocumentAndAnnotations
    e_PrintContent_DocumentAnnotationsAndComments = _PDFNetPython2.PrinterMode_e_PrintContent_DocumentAnnotationsAndComments
    def __init__(self): 
        this = _PDFNetPython2.new_PrinterMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_PrinterMode
    __del__ = lambda self : None;
    def SetAutoCenter(self, *args): return _PDFNetPython2.PrinterMode_SetAutoCenter(self, *args)
    def SetAutoRotate(self, *args): return _PDFNetPython2.PrinterMode_SetAutoRotate(self, *args)
    def SetCollation(self, *args): return _PDFNetPython2.PrinterMode_SetCollation(self, *args)
    def SetCopyCount(self, *args): return _PDFNetPython2.PrinterMode_SetCopyCount(self, *args)
    def SetDPI(self, *args): return _PDFNetPython2.PrinterMode_SetDPI(self, *args)
    def SetDuplexing(self, *args): return _PDFNetPython2.PrinterMode_SetDuplexing(self, *args)
    def SetNUp(self, *args): return _PDFNetPython2.PrinterMode_SetNUp(self, *args)
    def SetOrientation(self, *args): return _PDFNetPython2.PrinterMode_SetOrientation(self, *args)
    def SetOutputAnnot(self, *args): return _PDFNetPython2.PrinterMode_SetOutputAnnot(self, *args)
    def SetOutputColor(self, *args): return _PDFNetPython2.PrinterMode_SetOutputColor(self, *args)
    def SetOutputQuality(self, *args): return _PDFNetPython2.PrinterMode_SetOutputQuality(self, *args)
    def SetOutputPageBorder(self, *args): return _PDFNetPython2.PrinterMode_SetOutputPageBorder(self, *args)
    def SetPaperSize(self, *args): return _PDFNetPython2.PrinterMode_SetPaperSize(self, *args)
    def SetScale(self, *args): return _PDFNetPython2.PrinterMode_SetScale(self, *args)
    def SetScaleType(self, *args): return _PDFNetPython2.PrinterMode_SetScaleType(self, *args)
    def SetUseRleImageCompression(self, *args): return _PDFNetPython2.PrinterMode_SetUseRleImageCompression(self, *args)
    __swig_setmethods__["m_printerMode"] = _PDFNetPython2.PrinterMode_m_printerMode_set
    __swig_getmethods__["m_printerMode"] = _PDFNetPython2.PrinterMode_m_printerMode_get
    if _newclass:m_printerMode = _swig_property(_PDFNetPython2.PrinterMode_m_printerMode_get, _PDFNetPython2.PrinterMode_m_printerMode_set)
PrinterMode_swigregister = _PDFNetPython2.PrinterMode_swigregister
PrinterMode_swigregister(PrinterMode)

class HTML2PDF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTML2PDF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTML2PDF, name)
    __repr__ = _swig_repr
    def InsertFromURL(self, *args): return _PDFNetPython2.HTML2PDF_InsertFromURL(self, *args)
    def InsertFromHtmlString(self, *args): return _PDFNetPython2.HTML2PDF_InsertFromHtmlString(self, *args)
    def InsertTOC(self, *args): return _PDFNetPython2.HTML2PDF_InsertTOC(self, *args)
    def Convert(self, *args): return _PDFNetPython2.HTML2PDF_Convert(self, *args)
    def GetHTTPErrorCode(self): return _PDFNetPython2.HTML2PDF_GetHTTPErrorCode(self)
    def SetQuiet(self, *args): return _PDFNetPython2.HTML2PDF_SetQuiet(self, *args)
    def GetLog(self): return _PDFNetPython2.HTML2PDF_GetLog(self)
    __swig_getmethods__["SetModulePath"] = lambda x: _PDFNetPython2.HTML2PDF_SetModulePath
    if _newclass:SetModulePath = staticmethod(_PDFNetPython2.HTML2PDF_SetModulePath)
    def __init__(self): 
        this = _PDFNetPython2.new_HTML2PDF()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_HTML2PDF
    __del__ = lambda self : None;
    def SetPaperSize(self, *args): return _PDFNetPython2.HTML2PDF_SetPaperSize(self, *args)
    def SetLandscape(self, *args): return _PDFNetPython2.HTML2PDF_SetLandscape(self, *args)
    def SetDPI(self, *args): return _PDFNetPython2.HTML2PDF_SetDPI(self, *args)
    def SetOutline(self, *args): return _PDFNetPython2.HTML2PDF_SetOutline(self, *args)
    def DumpOutline(self, *args): return _PDFNetPython2.HTML2PDF_DumpOutline(self, *args)
    def SetPDFCompression(self, *args): return _PDFNetPython2.HTML2PDF_SetPDFCompression(self, *args)
    def SetMargins(self, *args): return _PDFNetPython2.HTML2PDF_SetMargins(self, *args)
    def SetImageDPI(self, *args): return _PDFNetPython2.HTML2PDF_SetImageDPI(self, *args)
    def SetImageQuality(self, *args): return _PDFNetPython2.HTML2PDF_SetImageQuality(self, *args)
    def SetCookieJar(self, *args): return _PDFNetPython2.HTML2PDF_SetCookieJar(self, *args)
    def Destroy(self): return _PDFNetPython2.HTML2PDF_Destroy(self)
    __swig_setmethods__["mp_html2pdf"] = _PDFNetPython2.HTML2PDF_mp_html2pdf_set
    __swig_getmethods__["mp_html2pdf"] = _PDFNetPython2.HTML2PDF_mp_html2pdf_get
    if _newclass:mp_html2pdf = _swig_property(_PDFNetPython2.HTML2PDF_mp_html2pdf_get, _PDFNetPython2.HTML2PDF_mp_html2pdf_set)
HTML2PDF_swigregister = _PDFNetPython2.HTML2PDF_swigregister
HTML2PDF_swigregister(HTML2PDF)

def HTML2PDF_SetModulePath(*args):
  return _PDFNetPython2.HTML2PDF_SetModulePath(*args)
HTML2PDF_SetModulePath = _PDFNetPython2.HTML2PDF_SetModulePath

class Stamper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stamper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stamper, name)
    __repr__ = _swig_repr
    e_relative_scale = _PDFNetPython2.Stamper_e_relative_scale
    e_absolute_size = _PDFNetPython2.Stamper_e_absolute_size
    e_font_size = _PDFNetPython2.Stamper_e_font_size
    e_horizontal_left = _PDFNetPython2.Stamper_e_horizontal_left
    e_horizontal_center = _PDFNetPython2.Stamper_e_horizontal_center
    e_horizontal_right = _PDFNetPython2.Stamper_e_horizontal_right
    e_vertical_bottom = _PDFNetPython2.Stamper_e_vertical_bottom
    e_vertical_center = _PDFNetPython2.Stamper_e_vertical_center
    e_vertical_top = _PDFNetPython2.Stamper_e_vertical_top
    e_align_left = _PDFNetPython2.Stamper_e_align_left
    e_align_center = _PDFNetPython2.Stamper_e_align_center
    e_align_right = _PDFNetPython2.Stamper_e_align_right
    __swig_destroy__ = _PDFNetPython2.delete_Stamper
    __del__ = lambda self : None;
    def StampImage(self, *args): return _PDFNetPython2.Stamper_StampImage(self, *args)
    def StampPage(self, *args): return _PDFNetPython2.Stamper_StampPage(self, *args)
    def StampText(self, *args): return _PDFNetPython2.Stamper_StampText(self, *args)
    def SetFont(self, *args): return _PDFNetPython2.Stamper_SetFont(self, *args)
    def SetFontColor(self, *args): return _PDFNetPython2.Stamper_SetFontColor(self, *args)
    def SetOpacity(self, *args): return _PDFNetPython2.Stamper_SetOpacity(self, *args)
    def SetRotation(self, *args): return _PDFNetPython2.Stamper_SetRotation(self, *args)
    def SetAsBackground(self, *args): return _PDFNetPython2.Stamper_SetAsBackground(self, *args)
    def SetAsAnnotation(self, *args): return _PDFNetPython2.Stamper_SetAsAnnotation(self, *args)
    def ShowsOnScreen(self, *args): return _PDFNetPython2.Stamper_ShowsOnScreen(self, *args)
    def ShowsOnPrint(self, *args): return _PDFNetPython2.Stamper_ShowsOnPrint(self, *args)
    def SetPosition(self, *args): return _PDFNetPython2.Stamper_SetPosition(self, *args)
    def SetAlignment(self, *args): return _PDFNetPython2.Stamper_SetAlignment(self, *args)
    def SetTextAlignment(self, *args): return _PDFNetPython2.Stamper_SetTextAlignment(self, *args)
    def SetSize(self, *args): return _PDFNetPython2.Stamper_SetSize(self, *args)
    __swig_getmethods__["DeleteStamps"] = lambda x: _PDFNetPython2.Stamper_DeleteStamps
    if _newclass:DeleteStamps = staticmethod(_PDFNetPython2.Stamper_DeleteStamps)
    __swig_getmethods__["HasStamps"] = lambda x: _PDFNetPython2.Stamper_HasStamps
    if _newclass:HasStamps = staticmethod(_PDFNetPython2.Stamper_HasStamps)
    def Destroy(self): return _PDFNetPython2.Stamper_Destroy(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_Stamper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython2.Stamper_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython2.Stamper_mp_impl_get
    if _newclass:mp_impl = _swig_property(_PDFNetPython2.Stamper_mp_impl_get, _PDFNetPython2.Stamper_mp_impl_set)
Stamper_swigregister = _PDFNetPython2.Stamper_swigregister
Stamper_swigregister(Stamper)

def Stamper_DeleteStamps(*args):
  return _PDFNetPython2.Stamper_DeleteStamps(*args)
Stamper_DeleteStamps = _PDFNetPython2.Stamper_DeleteStamps

def Stamper_HasStamps(*args):
  return _PDFNetPython2.Stamper_HasStamps(*args)
Stamper_HasStamps = _PDFNetPython2.Stamper_HasStamps

class TextExtractor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextExtractor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextExtractor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_TextExtractor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TextExtractor
    __del__ = lambda self : None;
    e_no_ligature_exp = _PDFNetPython2.TextExtractor_e_no_ligature_exp
    e_no_dup_remove = _PDFNetPython2.TextExtractor_e_no_dup_remove
    e_punct_break = _PDFNetPython2.TextExtractor_e_punct_break
    e_remove_hidden_text = _PDFNetPython2.TextExtractor_e_remove_hidden_text
    e_no_invisible_text = _PDFNetPython2.TextExtractor_e_no_invisible_text
    def Begin(self, *args): return _PDFNetPython2.TextExtractor_Begin(self, *args)
    def GetWordCount(self): return _PDFNetPython2.TextExtractor_GetWordCount(self)
    def GetAsText(self, dehyphen = True): return _PDFNetPython2.TextExtractor_GetAsText(self, dehyphen)
    def GetTextUnderAnnot(self, *args): return _PDFNetPython2.TextExtractor_GetTextUnderAnnot(self, *args)
    e_words_as_elements = _PDFNetPython2.TextExtractor_e_words_as_elements
    e_output_bbox = _PDFNetPython2.TextExtractor_e_output_bbox
    e_output_style_info = _PDFNetPython2.TextExtractor_e_output_style_info
    def GetAsXML(self, xml_output_flags = 0): return _PDFNetPython2.TextExtractor_GetAsXML(self, xml_output_flags)
    def GetNumLines(self): return _PDFNetPython2.TextExtractor_GetNumLines(self)
    def GetFirstLine(self): return _PDFNetPython2.TextExtractor_GetFirstLine(self)
    def Destroy(self): return _PDFNetPython2.TextExtractor_Destroy(self)
TextExtractor_swigregister = _PDFNetPython2.TextExtractor_swigregister
TextExtractor_swigregister(TextExtractor)

class SearchResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchResult, name)
    __repr__ = _swig_repr
    def __nonzero__(self):
        return _PDFNetPython2.SearchResult___nonzero__(self)
    __bool__ = __nonzero__


    def IsFound(self): return _PDFNetPython2.SearchResult_IsFound(self)
    def IsDocEnd(self): return _PDFNetPython2.SearchResult_IsDocEnd(self)
    def IsPageEnd(self): return _PDFNetPython2.SearchResult_IsPageEnd(self)
    def GetPageNumber(self): return _PDFNetPython2.SearchResult_GetPageNumber(self)
    def GetMatch(self): return _PDFNetPython2.SearchResult_GetMatch(self)
    def GetAmbientString(self): return _PDFNetPython2.SearchResult_GetAmbientString(self)
    def GetHighlights(self): return _PDFNetPython2.SearchResult_GetHighlights(self)
    def __init__(self, *args): 
        this = _PDFNetPython2.new_SearchResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_SearchResult
    __del__ = lambda self : None;
SearchResult_swigregister = _PDFNetPython2.SearchResult_swigregister
SearchResult_swigregister(SearchResult)

class TextSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextSearch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _PDFNetPython2.new_TextSearch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_TextSearch
    __del__ = lambda self : None;
    e_reg_expression = _PDFNetPython2.TextSearch_e_reg_expression
    e_case_sensitive = _PDFNetPython2.TextSearch_e_case_sensitive
    e_whole_word = _PDFNetPython2.TextSearch_e_whole_word
    e_search_up = _PDFNetPython2.TextSearch_e_search_up
    e_page_stop = _PDFNetPython2.TextSearch_e_page_stop
    e_highlight = _PDFNetPython2.TextSearch_e_highlight
    e_ambient_string = _PDFNetPython2.TextSearch_e_ambient_string
    def Begin(self, *args): return _PDFNetPython2.TextSearch_Begin(self, *args)
    def Run(self): return _PDFNetPython2.TextSearch_Run(self)
    def SetPattern(self, *args): return _PDFNetPython2.TextSearch_SetPattern(self, *args)
    def GetMode(self): return _PDFNetPython2.TextSearch_GetMode(self)
    def SetMode(self, *args): return _PDFNetPython2.TextSearch_SetMode(self, *args)
    def GetCurrentPage(self): return _PDFNetPython2.TextSearch_GetCurrentPage(self)
    def Destroy(self): return _PDFNetPython2.TextSearch_Destroy(self)
TextSearch_swigregister = _PDFNetPython2.TextSearch_swigregister
TextSearch_swigregister(TextSearch)

class Redactor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Redactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Redactor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Redact"] = lambda x: _PDFNetPython2.Redactor_Redact
    if _newclass:Redact = staticmethod(_PDFNetPython2.Redactor_Redact)
    def __init__(self): 
        this = _PDFNetPython2.new_Redactor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PDFNetPython2.delete_Redactor
    __del__ = lambda self : None;
Redactor_swigregister = _PDFNetPython2.Redactor_swigregister
Redactor_swigregister(Redactor)

def Redactor_Redact(*args):
  return _PDFNetPython2.Redactor_Redact(*args)
Redactor_Redact = _PDFNetPython2.Redactor_Redact



